
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a98  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bdc  08006ba8  08006ba8  00016ba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007784  08007784  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08007784  08007784  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007784  08007784  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007784  08007784  00017784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007788  08007788  00017788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800778c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  200001f0  0800797c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  0800797c  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8c0  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef0  00000000  00000000  0002aad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002c9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  0002d4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018953  00000000  00000000  0002dee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d023  00000000  00000000  0004683b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086f58  00000000  00000000  0005385e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da7b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e24  00000000  00000000  000da808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006b90 	.word	0x08006b90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08006b90 	.word	0x08006b90

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <CalculateChecksum>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
static uint8_t CalculateChecksum(uint8_t *data, uint8_t length)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
  uint8_t checksum = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]

  while (length--)
 8000f54:	e022      	b.n	8000f9c <CalculateChecksum+0x58>
  {
    uint8_t currentByte = *data++;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	1c5a      	adds	r2, r3, #1
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	73bb      	strb	r3, [r7, #14]

    for (uint8_t i = 8; i; i--)
 8000f60:	2308      	movs	r3, #8
 8000f62:	737b      	strb	r3, [r7, #13]
 8000f64:	e017      	b.n	8000f96 <CalculateChecksum+0x52>
    {
      uint8_t temp = (checksum ^ currentByte) & 0x01;
 8000f66:	7bfa      	ldrb	r2, [r7, #15]
 8000f68:	7bbb      	ldrb	r3, [r7, #14]
 8000f6a:	4053      	eors	r3, r2
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	733b      	strb	r3, [r7, #12]
      checksum >>= 1;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	085b      	lsrs	r3, r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]

      if (temp)
 8000f7a:	7b3b      	ldrb	r3, [r7, #12]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d004      	beq.n	8000f8a <CalculateChecksum+0x46>
      {
        checksum ^= 0x8C;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8000f86:	43db      	mvns	r3, r3
 8000f88:	73fb      	strb	r3, [r7, #15]
      }

      currentByte >>= 1;
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	085b      	lsrs	r3, r3, #1
 8000f8e:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 8; i; i--)
 8000f90:	7b7b      	ldrb	r3, [r7, #13]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	737b      	strb	r3, [r7, #13]
 8000f96:	7b7b      	ldrb	r3, [r7, #13]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1e4      	bne.n	8000f66 <CalculateChecksum+0x22>
  while (length--)
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	1e5a      	subs	r2, r3, #1
 8000fa0:	70fa      	strb	r2, [r7, #3]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1d7      	bne.n	8000f56 <CalculateChecksum+0x12>
    }
  }

  return checksum;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr

08000fb2 <ExecuteCommand>:



/*----------------------------------------------------------------------------*/
static DS18B20_Status ExecuteCommand(DS18B20 *sensor, DS18B20_Command command, uint8_t *data)
{
 8000fb2:	b590      	push	{r4, r7, lr}
 8000fb4:	b087      	sub	sp, #28
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
  if (sensor->isConnected == 0)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	785b      	ldrb	r3, [r3, #1]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <ExecuteCommand+0x18>
  {
    return DS18B20_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e044      	b.n	8001054 <ExecuteCommand+0xa2>
  }

  OneWire_ProcessByte(sensor->uart, command.code);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	7a3a      	ldrb	r2, [r7, #8]
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fc94 	bl	8001900 <OneWire_ProcessByte>

  if (command.rxBytesNum != 0)
 8000fd8:	7a7b      	ldrb	r3, [r7, #9]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d026      	beq.n	800102c <ExecuteCommand+0x7a>
  {
    for (uint8_t i = 0; i < command.rxBytesNum; i++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	75fb      	strb	r3, [r7, #23]
 8000fe2:	e00c      	b.n	8000ffe <ExecuteCommand+0x4c>
    {
      data[i] = OneWire_ProcessByte(sensor->uart, 0xFF);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6858      	ldr	r0, [r3, #4]
 8000fe8:	7dfb      	ldrb	r3, [r7, #23]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	18d4      	adds	r4, r2, r3
 8000fee:	21ff      	movs	r1, #255	; 0xff
 8000ff0:	f000 fc86 	bl	8001900 <OneWire_ProcessByte>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < command.rxBytesNum; i++)
 8000ff8:	7dfb      	ldrb	r3, [r7, #23]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	75fb      	strb	r3, [r7, #23]
 8000ffe:	7a7b      	ldrb	r3, [r7, #9]
 8001000:	7dfa      	ldrb	r2, [r7, #23]
 8001002:	429a      	cmp	r2, r3
 8001004:	d3ee      	bcc.n	8000fe4 <ExecuteCommand+0x32>
    }

    uint8_t checkSum = CalculateChecksum(data, command.rxBytesNum - 1);
 8001006:	7a7b      	ldrb	r3, [r7, #9]
 8001008:	3b01      	subs	r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4619      	mov	r1, r3
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ff98 	bl	8000f44 <CalculateChecksum>
 8001014:	4603      	mov	r3, r0
 8001016:	757b      	strb	r3, [r7, #21]
    if (checkSum != data[command.rxBytesNum - 1])
 8001018:	7a7b      	ldrb	r3, [r7, #9]
 800101a:	3b01      	subs	r3, #1
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	4413      	add	r3, r2
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	7d7a      	ldrb	r2, [r7, #21]
 8001024:	429a      	cmp	r2, r3
 8001026:	d014      	beq.n	8001052 <ExecuteCommand+0xa0>
    {
      return DS18B20_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e013      	b.n	8001054 <ExecuteCommand+0xa2>
    }
  }
  else
  {
    for (uint8_t i = 0; i < command.txBytesNum; i++)
 800102c:	2300      	movs	r3, #0
 800102e:	75bb      	strb	r3, [r7, #22]
 8001030:	e00b      	b.n	800104a <ExecuteCommand+0x98>
    {
      OneWire_ProcessByte(sensor->uart, data[i]);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6858      	ldr	r0, [r3, #4]
 8001036:	7dbb      	ldrb	r3, [r7, #22]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	f000 fc5e 	bl	8001900 <OneWire_ProcessByte>
    for (uint8_t i = 0; i < command.txBytesNum; i++)
 8001044:	7dbb      	ldrb	r3, [r7, #22]
 8001046:	3301      	adds	r3, #1
 8001048:	75bb      	strb	r3, [r7, #22]
 800104a:	7abb      	ldrb	r3, [r7, #10]
 800104c:	7dba      	ldrb	r2, [r7, #22]
 800104e:	429a      	cmp	r2, r3
 8001050:	d3ef      	bcc.n	8001032 <ExecuteCommand+0x80>
    }
  }

  return DS18B20_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	371c      	adds	r7, #28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd90      	pop	{r4, r7, pc}

0800105c <WaitForConversionFinished>:



/*----------------------------------------------------------------------------*/
static void WaitForConversionFinished(DS18B20 *sensor)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint8_t data = OneWire_ProcessBit(sensor->uart, 1);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2101      	movs	r1, #1
 800106a:	4618      	mov	r0, r3
 800106c:	f000 fc26 	bl	80018bc <OneWire_ProcessBit>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]
  while(data != 0xFF)
 8001074:	e007      	b.n	8001086 <WaitForConversionFinished+0x2a>
  {
    data = OneWire_ProcessBit(sensor->uart, 1);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2101      	movs	r1, #1
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fc1d 	bl	80018bc <OneWire_ProcessBit>
 8001082:	4603      	mov	r3, r0
 8001084:	73fb      	strb	r3, [r7, #15]
  while(data != 0xFF)
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	2bff      	cmp	r3, #255	; 0xff
 800108a:	d1f4      	bne.n	8001076 <WaitForConversionFinished+0x1a>
  }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <DS18B20_ConvertT>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ConvertT(DS18B20 *sensor, DS18B20_WaitCondition waitCondition)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
  DS18B20_Status result;
  uint8_t rxDummyData;

  result = ExecuteCommand(sensor, convertT, &rxDummyData);
 80010a4:	f107 030a 	add.w	r3, r7, #10
 80010a8:	491c      	ldr	r1, [pc, #112]	; (800111c <DS18B20_ConvertT+0x84>)
 80010aa:	461a      	mov	r2, r3
 80010ac:	6809      	ldr	r1, [r1, #0]
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff7f 	bl	8000fb2 <ExecuteCommand>
 80010b4:	4603      	mov	r3, r0
 80010b6:	72fb      	strb	r3, [r7, #11]

  if (waitCondition == DS18B20_DATA)
 80010b8:	78fb      	ldrb	r3, [r7, #3]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d102      	bne.n	80010c4 <DS18B20_ConvertT+0x2c>
  {
    WaitForConversionFinished(sensor);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffcc 	bl	800105c <WaitForConversionFinished>
  }

  if (waitCondition == DS18B20_DELAY)
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d122      	bne.n	8001110 <DS18B20_ConvertT+0x78>
  {
    uint32_t delayValueMs = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]

    switch (sensor->configRegister)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7c1b      	ldrb	r3, [r3, #16]
 80010d2:	2b7f      	cmp	r3, #127	; 0x7f
 80010d4:	d014      	beq.n	8001100 <DS18B20_ConvertT+0x68>
 80010d6:	2b7f      	cmp	r3, #127	; 0x7f
 80010d8:	dc16      	bgt.n	8001108 <DS18B20_ConvertT+0x70>
 80010da:	2b5f      	cmp	r3, #95	; 0x5f
 80010dc:	d00c      	beq.n	80010f8 <DS18B20_ConvertT+0x60>
 80010de:	2b5f      	cmp	r3, #95	; 0x5f
 80010e0:	dc12      	bgt.n	8001108 <DS18B20_ConvertT+0x70>
 80010e2:	2b1f      	cmp	r3, #31
 80010e4:	d002      	beq.n	80010ec <DS18B20_ConvertT+0x54>
 80010e6:	2b3f      	cmp	r3, #63	; 0x3f
 80010e8:	d003      	beq.n	80010f2 <DS18B20_ConvertT+0x5a>
      case DS18B20_12_BITS_CONFIG:
        delayValueMs = DS18B20_12_BITS_DELAY_MS;
        break;

      default:
        break;
 80010ea:	e00d      	b.n	8001108 <DS18B20_ConvertT+0x70>
        delayValueMs = DS18B20_9_BITS_DELAY_MS;
 80010ec:	235e      	movs	r3, #94	; 0x5e
 80010ee:	60fb      	str	r3, [r7, #12]
        break;
 80010f0:	e00b      	b.n	800110a <DS18B20_ConvertT+0x72>
        delayValueMs = DS18B20_10_BITS_DELAY_MS;
 80010f2:	23bc      	movs	r3, #188	; 0xbc
 80010f4:	60fb      	str	r3, [r7, #12]
        break;
 80010f6:	e008      	b.n	800110a <DS18B20_ConvertT+0x72>
        delayValueMs = DS18B20_11_BITS_DELAY_MS;
 80010f8:	f240 1377 	movw	r3, #375	; 0x177
 80010fc:	60fb      	str	r3, [r7, #12]
        break;
 80010fe:	e004      	b.n	800110a <DS18B20_ConvertT+0x72>
        delayValueMs = DS18B20_12_BITS_DELAY_MS;
 8001100:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001104:	60fb      	str	r3, [r7, #12]
        break;
 8001106:	e000      	b.n	800110a <DS18B20_ConvertT+0x72>
        break;
 8001108:	bf00      	nop
    }
    HAL_Delay(delayValueMs);
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f001 f8bc 	bl	8002288 <HAL_Delay>
  }

  return result;
 8001110:	7afb      	ldrb	r3, [r7, #11]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008

08001120 <DS18B20_ReadScratchpad>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ReadScratchpad(DS18B20 *sensor)
{
 8001120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001124:	b087      	sub	sp, #28
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	466b      	mov	r3, sp
 800112c:	461e      	mov	r6, r3
  DS18B20_Status result;
  uint8_t rxData[readScratchpad.rxBytesNum];
 800112e:	4b50      	ldr	r3, [pc, #320]	; (8001270 <DS18B20_ReadScratchpad+0x150>)
 8001130:	7859      	ldrb	r1, [r3, #1]
 8001132:	460b      	mov	r3, r1
 8001134:	3b01      	subs	r3, #1
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	b2cb      	uxtb	r3, r1
 800113a:	2200      	movs	r2, #0
 800113c:	4698      	mov	r8, r3
 800113e:	4691      	mov	r9, r2
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800114c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001150:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001154:	b2cb      	uxtb	r3, r1
 8001156:	2200      	movs	r2, #0
 8001158:	461c      	mov	r4, r3
 800115a:	4615      	mov	r5, r2
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	00eb      	lsls	r3, r5, #3
 8001166:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800116a:	00e2      	lsls	r2, r4, #3
 800116c:	460b      	mov	r3, r1
 800116e:	3307      	adds	r3, #7
 8001170:	08db      	lsrs	r3, r3, #3
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	ebad 0d03 	sub.w	sp, sp, r3
 8001178:	466b      	mov	r3, sp
 800117a:	3300      	adds	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  result = ExecuteCommand(sensor, readScratchpad, rxData);
 800117e:	4b3c      	ldr	r3, [pc, #240]	; (8001270 <DS18B20_ReadScratchpad+0x150>)
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	6819      	ldr	r1, [r3, #0]
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff14 	bl	8000fb2 <ExecuteCommand>
 800118a:	4603      	mov	r3, r0
 800118c:	72fb      	strb	r3, [r7, #11]

  if (result != DS18B20_OK)
 800118e:	7afb      	ldrb	r3, [r7, #11]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <DS18B20_ReadScratchpad+0x78>
  {
    return result;
 8001194:	7afb      	ldrb	r3, [r7, #11]
 8001196:	e065      	b.n	8001264 <DS18B20_ReadScratchpad+0x144>
  }

  sensor->temperatureLimitHigh = rxData[DS18B20_SCRATCHPAD_T_LIMIT_H_BYTE_IDX];
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	789a      	ldrb	r2, [r3, #2]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	73da      	strb	r2, [r3, #15]
  sensor->temperatureLimitLow = rxData[DS18B20_SCRATCHPAD_T_LIMIT_L_BYTE_IDX];
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	78da      	ldrb	r2, [r3, #3]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	739a      	strb	r2, [r3, #14]
  sensor->configRegister = rxData[DS18B20_SCRATCHPAD_CONFIG_BYTE_IDX];
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	791a      	ldrb	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	741a      	strb	r2, [r3, #16]

  uint16_t tRegValue = (rxData[DS18B20_SCRATCHPAD_T_MSB_BYTE_IDX] << 8) | rxData[DS18B20_SCRATCHPAD_T_LSB_BYTE_IDX];
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	785b      	ldrb	r3, [r3, #1]
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b21b      	sxth	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	82fb      	strh	r3, [r7, #22]
  uint16_t sign = tRegValue & DS18B20_SIGN_MASK;
 80011c4:	8afb      	ldrh	r3, [r7, #22]
 80011c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80011ca:	f023 0307 	bic.w	r3, r3, #7
 80011ce:	813b      	strh	r3, [r7, #8]

  if (sign != 0)
 80011d0:	893b      	ldrh	r3, [r7, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <DS18B20_ReadScratchpad+0xbc>
  {
    tRegValue = (0xFFFF - tRegValue + 1);
 80011d6:	8afb      	ldrh	r3, [r7, #22]
 80011d8:	425b      	negs	r3, r3
 80011da:	82fb      	strh	r3, [r7, #22]
  }

  switch (sensor->configRegister)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7c1b      	ldrb	r3, [r3, #16]
 80011e0:	2b7f      	cmp	r3, #127	; 0x7f
 80011e2:	d01d      	beq.n	8001220 <DS18B20_ReadScratchpad+0x100>
 80011e4:	2b7f      	cmp	r3, #127	; 0x7f
 80011e6:	dc20      	bgt.n	800122a <DS18B20_ReadScratchpad+0x10a>
 80011e8:	2b5f      	cmp	r3, #95	; 0x5f
 80011ea:	d012      	beq.n	8001212 <DS18B20_ReadScratchpad+0xf2>
 80011ec:	2b5f      	cmp	r3, #95	; 0x5f
 80011ee:	dc1c      	bgt.n	800122a <DS18B20_ReadScratchpad+0x10a>
 80011f0:	2b1f      	cmp	r3, #31
 80011f2:	d002      	beq.n	80011fa <DS18B20_ReadScratchpad+0xda>
 80011f4:	2b3f      	cmp	r3, #63	; 0x3f
 80011f6:	d005      	beq.n	8001204 <DS18B20_ReadScratchpad+0xe4>
 80011f8:	e017      	b.n	800122a <DS18B20_ReadScratchpad+0x10a>
  {
    case DS18B20_9_BITS_CONFIG:
      tRegValue &= DS18B20_9_BITS_DATA_MASK;
 80011fa:	8afb      	ldrh	r3, [r7, #22]
 80011fc:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8001200:	82fb      	strh	r3, [r7, #22]
      break;
 8001202:	e017      	b.n	8001234 <DS18B20_ReadScratchpad+0x114>

    case DS18B20_10_BITS_CONFIG:
      tRegValue &= DS18B20_10_BITS_DATA_MASK;
 8001204:	8afb      	ldrh	r3, [r7, #22]
 8001206:	f023 0303 	bic.w	r3, r3, #3
 800120a:	055b      	lsls	r3, r3, #21
 800120c:	0d5b      	lsrs	r3, r3, #21
 800120e:	82fb      	strh	r3, [r7, #22]
      break;
 8001210:	e010      	b.n	8001234 <DS18B20_ReadScratchpad+0x114>

    case DS18B20_11_BITS_CONFIG:
      tRegValue &= DS18B20_11_BITS_DATA_MASK;
 8001212:	8afb      	ldrh	r3, [r7, #22]
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	055b      	lsls	r3, r3, #21
 800121a:	0d5b      	lsrs	r3, r3, #21
 800121c:	82fb      	strh	r3, [r7, #22]
      break;
 800121e:	e009      	b.n	8001234 <DS18B20_ReadScratchpad+0x114>

    case DS18B20_12_BITS_CONFIG:
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
 8001220:	8afb      	ldrh	r3, [r7, #22]
 8001222:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001226:	82fb      	strh	r3, [r7, #22]
      break;
 8001228:	e004      	b.n	8001234 <DS18B20_ReadScratchpad+0x114>

    default:
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
 800122a:	8afb      	ldrh	r3, [r7, #22]
 800122c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001230:	82fb      	strh	r3, [r7, #22]
      break;
 8001232:	bf00      	nop
  }

  sensor->temperature = (float)tRegValue * DS18B20_T_STEP;
 8001234:	8afb      	ldrh	r3, [r7, #22]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fcdc 	bl	8000bf4 <__aeabi_ui2f>
 800123c:	4603      	mov	r3, r0
 800123e:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fd2e 	bl	8000ca4 <__aeabi_fmul>
 8001248:	4603      	mov	r3, r0
 800124a:	461a      	mov	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	615a      	str	r2, [r3, #20]

  if (sign != 0)
 8001250:	893b      	ldrh	r3, [r7, #8]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d005      	beq.n	8001262 <DS18B20_ReadScratchpad+0x142>
  {
    sensor->temperature *= (-1);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	615a      	str	r2, [r3, #20]
  }

  return DS18B20_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	46b5      	mov	sp, r6
}
 8001266:	4618      	mov	r0, r3
 8001268:	371c      	adds	r7, #28
 800126a:	46bd      	mov	sp, r7
 800126c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001270:	20000004 	.word	0x20000004

08001274 <DS18B20_InitializationCommand>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_InitializationCommand(DS18B20 *sensor)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if (sensor->isInitialized == 0)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <DS18B20_InitializationCommand+0x14>
  {
    return DS18B20_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e012      	b.n	80012ae <DS18B20_InitializationCommand+0x3a>
  }

  ONEWIRE_Status status = OneWire_Reset(sensor->uart);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	4618      	mov	r0, r3
 800128e:	f000 fb6d 	bl	800196c <OneWire_Reset>
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]

  if (status == ONEWIRE_OK)
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d104      	bne.n	80012a6 <DS18B20_InitializationCommand+0x32>
  {
    sensor->isConnected = 1;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	705a      	strb	r2, [r3, #1]
    return DS18B20_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e003      	b.n	80012ae <DS18B20_InitializationCommand+0x3a>
  }
  else
  {
    sensor->isConnected = 0;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	705a      	strb	r2, [r3, #1]
    return DS18B20_ERROR;
 80012ac:	2301      	movs	r3, #1
  }
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <DS18B20_ReadRom>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ReadRom(DS18B20 *sensor)
{
 80012b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012bc:	b087      	sub	sp, #28
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	466b      	mov	r3, sp
 80012c4:	461e      	mov	r6, r3
  DS18B20_Status result;
  uint8_t rxData[readRom.rxBytesNum];
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <DS18B20_ReadRom+0xac>)
 80012c8:	7859      	ldrb	r1, [r3, #1]
 80012ca:	460b      	mov	r3, r1
 80012cc:	3b01      	subs	r3, #1
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	b2cb      	uxtb	r3, r1
 80012d2:	2200      	movs	r2, #0
 80012d4:	4698      	mov	r8, r3
 80012d6:	4691      	mov	r9, r2
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012ec:	b2cb      	uxtb	r3, r1
 80012ee:	2200      	movs	r2, #0
 80012f0:	461c      	mov	r4, r3
 80012f2:	4615      	mov	r5, r2
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	00eb      	lsls	r3, r5, #3
 80012fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001302:	00e2      	lsls	r2, r4, #3
 8001304:	460b      	mov	r3, r1
 8001306:	3307      	adds	r3, #7
 8001308:	08db      	lsrs	r3, r3, #3
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	ebad 0d03 	sub.w	sp, sp, r3
 8001310:	466b      	mov	r3, sp
 8001312:	3300      	adds	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
  result = ExecuteCommand(sensor, readRom, rxData);
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <DS18B20_ReadRom+0xac>)
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	6819      	ldr	r1, [r3, #0]
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff fe48 	bl	8000fb2 <ExecuteCommand>
 8001322:	4603      	mov	r3, r0
 8001324:	72fb      	strb	r3, [r7, #11]

  if (result != DS18B20_OK)
 8001326:	7afb      	ldrb	r3, [r7, #11]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <DS18B20_ReadRom+0x78>
  {
    return result;
 800132c:	7afb      	ldrb	r3, [r7, #11]
 800132e:	e012      	b.n	8001356 <DS18B20_ReadRom+0x9e>
  }

  for (uint8_t i = 0; i < DS18B20_SERIAL_NUMBER_LEN_BYTES; i++)
 8001330:	2300      	movs	r3, #0
 8001332:	75fb      	strb	r3, [r7, #23]
 8001334:	e00b      	b.n	800134e <DS18B20_ReadRom+0x96>
  {
    sensor->serialNumber[i] = rxData[DS18B20_SERIAL_NUMBER_OFFSET_BYTES + i];
 8001336:	7dfb      	ldrb	r3, [r7, #23]
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	7dfb      	ldrb	r3, [r7, #23]
 800133c:	68f9      	ldr	r1, [r7, #12]
 800133e:	5c89      	ldrb	r1, [r1, r2]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	460a      	mov	r2, r1
 8001346:	721a      	strb	r2, [r3, #8]
  for (uint8_t i = 0; i < DS18B20_SERIAL_NUMBER_LEN_BYTES; i++)
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	3301      	adds	r3, #1
 800134c:	75fb      	strb	r3, [r7, #23]
 800134e:	7dfb      	ldrb	r3, [r7, #23]
 8001350:	2b05      	cmp	r3, #5
 8001352:	d9f0      	bls.n	8001336 <DS18B20_ReadRom+0x7e>
  }

  return DS18B20_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	46b5      	mov	sp, r6
}
 8001358:	4618      	mov	r0, r3
 800135a:	371c      	adds	r7, #28
 800135c:	46bd      	mov	sp, r7
 800135e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001362:	bf00      	nop
 8001364:	20000000 	.word	0x20000000

08001368 <DS18B20_Init>:



/*----------------------------------------------------------------------------*/
void DS18B20_Init(DS18B20 *sensor, UART_HandleTypeDef *huart)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  sensor->isConnected = 0;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	705a      	strb	r2, [r3, #1]
  sensor->uart = huart;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	605a      	str	r2, [r3, #4]
  sensor->isInitialized = 1;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
	...

08001390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001392:	b093      	sub	sp, #76	; 0x4c
 8001394:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001396:	f000 ff15 	bl	80021c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139a:	f000 f919 	bl	80015d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139e:	f000 f9b5 	bl	800170c <MX_GPIO_Init>
  MX_I2C1_Init();
 80013a2:	f000 f95b 	bl	800165c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80013a6:	f000 f987 	bl	80016b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  DS18B20 sensor;
  DS18B20_Status state;
  DS18B20_Init(&sensor, &huart1);
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	497d      	ldr	r1, [pc, #500]	; (80015a4 <main+0x214>)
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ffd9 	bl	8001368 <DS18B20_Init>

  ssd1306_Init();
 80013b6:	f000 fb43 	bl	8001a40 <ssd1306_Init>
  state = DS18B20_InitializationCommand(&sensor);
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff58 	bl	8001274 <DS18B20_InitializationCommand>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (state == DS18B20_OK) {
 80013ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d106      	bne.n	80013e0 <main+0x50>
	  ssd1306_WriteString("init ok", Font_7x10, White);
 80013d2:	4a75      	ldr	r2, [pc, #468]	; (80015a8 <main+0x218>)
 80013d4:	2301      	movs	r3, #1
 80013d6:	ca06      	ldmia	r2, {r1, r2}
 80013d8:	4874      	ldr	r0, [pc, #464]	; (80015ac <main+0x21c>)
 80013da:	f000 fcbf 	bl	8001d5c <ssd1306_WriteString>
 80013de:	e005      	b.n	80013ec <main+0x5c>
  }
  else {
	  ssd1306_WriteString("init failed", Font_7x10, White);
 80013e0:	4a71      	ldr	r2, [pc, #452]	; (80015a8 <main+0x218>)
 80013e2:	2301      	movs	r3, #1
 80013e4:	ca06      	ldmia	r2, {r1, r2}
 80013e6:	4872      	ldr	r0, [pc, #456]	; (80015b0 <main+0x220>)
 80013e8:	f000 fcb8 	bl	8001d5c <ssd1306_WriteString>
  }

  state = DS18B20_ReadRom(&sensor);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff61 	bl	80012b8 <DS18B20_ReadRom>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  ssd1306_SetCursor(0, 10);
 80013fc:	210a      	movs	r1, #10
 80013fe:	2000      	movs	r0, #0
 8001400:	f000 fcd2 	bl	8001da8 <ssd1306_SetCursor>
  if (state == DS18B20_OK) {
 8001404:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001408:	2b00      	cmp	r3, #0
 800140a:	d106      	bne.n	800141a <main+0x8a>
  	  ssd1306_WriteString("ReadRom() ok", Font_7x10, White);
 800140c:	4a66      	ldr	r2, [pc, #408]	; (80015a8 <main+0x218>)
 800140e:	2301      	movs	r3, #1
 8001410:	ca06      	ldmia	r2, {r1, r2}
 8001412:	4868      	ldr	r0, [pc, #416]	; (80015b4 <main+0x224>)
 8001414:	f000 fca2 	bl	8001d5c <ssd1306_WriteString>
 8001418:	e005      	b.n	8001426 <main+0x96>
  }
  else {
  	  ssd1306_WriteString("ReadRom() failed", Font_7x10, White);
 800141a:	4a63      	ldr	r2, [pc, #396]	; (80015a8 <main+0x218>)
 800141c:	2301      	movs	r3, #1
 800141e:	ca06      	ldmia	r2, {r1, r2}
 8001420:	4865      	ldr	r0, [pc, #404]	; (80015b8 <main+0x228>)
 8001422:	f000 fc9b 	bl	8001d5c <ssd1306_WriteString>
  }
  char serial[12];
  sprintf(serial, "%X%X%X%X%X%Xh", (uint8_t)*sensor.serialNumber,
 8001426:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800142a:	461d      	mov	r5, r3
		  	  	  	  	  (uint8_t)*(sensor.serialNumber+1),
 800142c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
  sprintf(serial, "%X%X%X%X%X%Xh", (uint8_t)*sensor.serialNumber,
 8001430:	461e      	mov	r6, r3
						  (uint8_t)*(sensor.serialNumber+2),
 8001432:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
						  (uint8_t)*(sensor.serialNumber+3),
 8001436:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
						  (uint8_t)*(sensor.serialNumber+4),
 800143a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
						  (uint8_t)*(sensor.serialNumber+5));
 800143e:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
  sprintf(serial, "%X%X%X%X%X%Xh", (uint8_t)*sensor.serialNumber,
 8001442:	4604      	mov	r4, r0
 8001444:	f107 0010 	add.w	r0, r7, #16
 8001448:	9403      	str	r4, [sp, #12]
 800144a:	9102      	str	r1, [sp, #8]
 800144c:	9201      	str	r2, [sp, #4]
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	4633      	mov	r3, r6
 8001452:	462a      	mov	r2, r5
 8001454:	4959      	ldr	r1, [pc, #356]	; (80015bc <main+0x22c>)
 8001456:	f003 f94b 	bl	80046f0 <siprintf>
  ssd1306_SetCursor(0, 0);
 800145a:	2100      	movs	r1, #0
 800145c:	2000      	movs	r0, #0
 800145e:	f000 fca3 	bl	8001da8 <ssd1306_SetCursor>
  ssd1306_WriteString(serial, Font_7x10, White);
 8001462:	4a51      	ldr	r2, [pc, #324]	; (80015a8 <main+0x218>)
 8001464:	f107 0010 	add.w	r0, r7, #16
 8001468:	2301      	movs	r3, #1
 800146a:	ca06      	ldmia	r2, {r1, r2}
 800146c:	f000 fc76 	bl	8001d5c <ssd1306_WriteString>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ssd1306_SetCursor(0, 20);
 8001470:	2114      	movs	r1, #20
 8001472:	2000      	movs	r0, #0
 8001474:	f000 fc98 	bl	8001da8 <ssd1306_SetCursor>

	  state = DS18B20_InitializationCommand(&sensor);
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fef9 	bl	8001274 <DS18B20_InitializationCommand>
 8001482:	4603      	mov	r3, r0
 8001484:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  state = DS18B20_ReadRom(&sensor);
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff13 	bl	80012b8 <DS18B20_ReadRom>
 8001492:	4603      	mov	r3, r0
 8001494:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  state = DS18B20_ConvertT(&sensor, DS18B20_DATA);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	2101      	movs	r1, #1
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fdfa 	bl	8001098 <DS18B20_ConvertT>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  if (state == DS18B20_ERROR) {
 80014aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d10c      	bne.n	80014cc <main+0x13c>
		  ssd1306_WriteString("ConvertT error", Font_7x10, White);
 80014b2:	4a3d      	ldr	r2, [pc, #244]	; (80015a8 <main+0x218>)
 80014b4:	2301      	movs	r3, #1
 80014b6:	ca06      	ldmia	r2, {r1, r2}
 80014b8:	4841      	ldr	r0, [pc, #260]	; (80015c0 <main+0x230>)
 80014ba:	f000 fc4f 	bl	8001d5c <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 80014be:	f000 fb4b 	bl	8001b58 <ssd1306_UpdateScreen>
		  HAL_Delay(1000);
 80014c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014c6:	f000 fedf 	bl	8002288 <HAL_Delay>
		  continue;
 80014ca:	e06a      	b.n	80015a2 <main+0x212>
	  }

	  DS18B20_InitializationCommand(&sensor);
 80014cc:	f107 031c 	add.w	r3, r7, #28
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fecf 	bl	8001274 <DS18B20_InitializationCommand>
	  state = DS18B20_ReadRom(&sensor);
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff feec 	bl	80012b8 <DS18B20_ReadRom>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  ssd1306_SetCursor(0, 10);
 80014e6:	210a      	movs	r1, #10
 80014e8:	2000      	movs	r0, #0
 80014ea:	f000 fc5d 	bl	8001da8 <ssd1306_SetCursor>
	  if (state == DS18B20_OK) {
 80014ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d106      	bne.n	8001504 <main+0x174>
	  	  ssd1306_WriteString("ReadRom() ok", Font_7x10, White);
 80014f6:	4a2c      	ldr	r2, [pc, #176]	; (80015a8 <main+0x218>)
 80014f8:	2301      	movs	r3, #1
 80014fa:	ca06      	ldmia	r2, {r1, r2}
 80014fc:	482d      	ldr	r0, [pc, #180]	; (80015b4 <main+0x224>)
 80014fe:	f000 fc2d 	bl	8001d5c <ssd1306_WriteString>
 8001502:	e005      	b.n	8001510 <main+0x180>
	  }
	  else {
	  	  ssd1306_WriteString("ReadRom() failed", Font_7x10, White);
 8001504:	4a28      	ldr	r2, [pc, #160]	; (80015a8 <main+0x218>)
 8001506:	2301      	movs	r3, #1
 8001508:	ca06      	ldmia	r2, {r1, r2}
 800150a:	482b      	ldr	r0, [pc, #172]	; (80015b8 <main+0x228>)
 800150c:	f000 fc26 	bl	8001d5c <ssd1306_WriteString>
	  }

	  state = DS18B20_ReadScratchpad(&sensor);
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fe03 	bl	8001120 <DS18B20_ReadScratchpad>
 800151a:	4603      	mov	r3, r0
 800151c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  if (state == DS18B20_ERROR) {
 8001520:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001524:	2b01      	cmp	r3, #1
 8001526:	d10c      	bne.n	8001542 <main+0x1b2>
  		  ssd1306_WriteString("ReadS error", Font_7x10, White);
 8001528:	4a1f      	ldr	r2, [pc, #124]	; (80015a8 <main+0x218>)
 800152a:	2301      	movs	r3, #1
 800152c:	ca06      	ldmia	r2, {r1, r2}
 800152e:	4825      	ldr	r0, [pc, #148]	; (80015c4 <main+0x234>)
 8001530:	f000 fc14 	bl	8001d5c <ssd1306_WriteString>
  		  ssd1306_UpdateScreen();
 8001534:	f000 fb10 	bl	8001b58 <ssd1306_UpdateScreen>
  		  HAL_Delay(1000);
 8001538:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800153c:	f000 fea4 	bl	8002288 <HAL_Delay>
  		  continue;
 8001540:	e02f      	b.n	80015a2 <main+0x212>
	  }

	  else {
		  char config[3];
		  sprintf(config, "%Xh", sensor.configRegister);
 8001542:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001546:	461a      	mov	r2, r3
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	491e      	ldr	r1, [pc, #120]	; (80015c8 <main+0x238>)
 800154e:	4618      	mov	r0, r3
 8001550:	f003 f8ce 	bl	80046f0 <siprintf>
		  ssd1306_SetCursor(106, 0);
 8001554:	2100      	movs	r1, #0
 8001556:	206a      	movs	r0, #106	; 0x6a
 8001558:	f000 fc26 	bl	8001da8 <ssd1306_SetCursor>
		  ssd1306_WriteString(config, Font_7x10, White);
 800155c:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <main+0x218>)
 800155e:	f107 000c 	add.w	r0, r7, #12
 8001562:	2301      	movs	r3, #1
 8001564:	ca06      	ldmia	r2, {r1, r2}
 8001566:	f000 fbf9 	bl	8001d5c <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 800156a:	f000 faf5 	bl	8001b58 <ssd1306_UpdateScreen>

		  char buf[8];
		  sprintf(buf, "%2.1f", sensor.temperature);
 800156e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ff59 	bl	8000428 <__aeabi_f2d>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	1d38      	adds	r0, r7, #4
 800157c:	4913      	ldr	r1, [pc, #76]	; (80015cc <main+0x23c>)
 800157e:	f003 f8b7 	bl	80046f0 <siprintf>
		  ssd1306_SetCursor(0, 20);
 8001582:	2114      	movs	r1, #20
 8001584:	2000      	movs	r0, #0
 8001586:	f000 fc0f 	bl	8001da8 <ssd1306_SetCursor>
		  ssd1306_WriteString(buf, Font_7x10, White);
 800158a:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <main+0x218>)
 800158c:	1d38      	adds	r0, r7, #4
 800158e:	2301      	movs	r3, #1
 8001590:	ca06      	ldmia	r2, {r1, r2}
 8001592:	f000 fbe3 	bl	8001d5c <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 8001596:	f000 fadf 	bl	8001b58 <ssd1306_UpdateScreen>
		  HAL_Delay(1000);
 800159a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800159e:	f000 fe73 	bl	8002288 <HAL_Delay>
	  ssd1306_SetCursor(0, 20);
 80015a2:	e765      	b.n	8001470 <main+0xe0>
 80015a4:	20000260 	.word	0x20000260
 80015a8:	2000000c 	.word	0x2000000c
 80015ac:	08006ba8 	.word	0x08006ba8
 80015b0:	08006bb0 	.word	0x08006bb0
 80015b4:	08006bbc 	.word	0x08006bbc
 80015b8:	08006bcc 	.word	0x08006bcc
 80015bc:	08006be0 	.word	0x08006be0
 80015c0:	08006bf0 	.word	0x08006bf0
 80015c4:	08006c00 	.word	0x08006c00
 80015c8:	08006c0c 	.word	0x08006c0c
 80015cc:	08006c10 	.word	0x08006c10

080015d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b090      	sub	sp, #64	; 0x40
 80015d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 0318 	add.w	r3, r7, #24
 80015da:	2228      	movs	r2, #40	; 0x28
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 fc1e 	bl	8003e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015f2:	2301      	movs	r3, #1
 80015f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001600:	2301      	movs	r3, #1
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001604:	2302      	movs	r3, #2
 8001606:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800160c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800160e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001612:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001614:	f107 0318 	add.w	r3, r7, #24
 8001618:	4618      	mov	r0, r3
 800161a:	f001 fd33 	bl	8003084 <HAL_RCC_OscConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001624:	f000 f8ca 	bl	80017bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001628:	230f      	movs	r3, #15
 800162a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800162c:	2302      	movs	r3, #2
 800162e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2102      	movs	r1, #2
 8001642:	4618      	mov	r0, r3
 8001644:	f001 ffa0 	bl	8003588 <HAL_RCC_ClockConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800164e:	f000 f8b5 	bl	80017bc <Error_Handler>
  }
}
 8001652:	bf00      	nop
 8001654:	3740      	adds	r7, #64	; 0x40
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <MX_I2C1_Init+0x50>)
 8001662:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <MX_I2C1_Init+0x54>)
 8001664:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_I2C1_Init+0x50>)
 8001668:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <MX_I2C1_Init+0x58>)
 800166a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <MX_I2C1_Init+0x50>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_I2C1_Init+0x50>)
 8001674:	2200      	movs	r2, #0
 8001676:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_I2C1_Init+0x50>)
 800167a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800167e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <MX_I2C1_Init+0x50>)
 8001682:	2200      	movs	r2, #0
 8001684:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_I2C1_Init+0x50>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <MX_I2C1_Init+0x50>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_I2C1_Init+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001698:	4804      	ldr	r0, [pc, #16]	; (80016ac <MX_I2C1_Init+0x50>)
 800169a:	f001 f899 	bl	80027d0 <HAL_I2C_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016a4:	f000 f88a 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2000020c 	.word	0x2000020c
 80016b0:	40005400 	.word	0x40005400
 80016b4:	000186a0 	.word	0x000186a0

080016b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_USART1_UART_Init+0x4c>)
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <MX_USART1_UART_Init+0x50>)
 80016c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <MX_USART1_UART_Init+0x4c>)
 80016c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_USART1_UART_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_USART1_UART_Init+0x4c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <MX_USART1_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_USART1_UART_Init+0x4c>)
 80016de:	220c      	movs	r2, #12
 80016e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <MX_USART1_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_USART1_UART_Init+0x4c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_USART1_UART_Init+0x4c>)
 80016f0:	f002 f8e2 	bl	80038b8 <HAL_HalfDuplex_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016fa:	f000 f85f 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000260 	.word	0x20000260
 8001708:	40013800 	.word	0x40013800

0800170c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001720:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <MX_GPIO_Init+0xa8>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a23      	ldr	r2, [pc, #140]	; (80017b4 <MX_GPIO_Init+0xa8>)
 8001726:	f043 0310 	orr.w	r3, r3, #16
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <MX_GPIO_Init+0xa8>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <MX_GPIO_Init+0xa8>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a1d      	ldr	r2, [pc, #116]	; (80017b4 <MX_GPIO_Init+0xa8>)
 800173e:	f043 0320 	orr.w	r3, r3, #32
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <MX_GPIO_Init+0xa8>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0320 	and.w	r3, r3, #32
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <MX_GPIO_Init+0xa8>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a17      	ldr	r2, [pc, #92]	; (80017b4 <MX_GPIO_Init+0xa8>)
 8001756:	f043 0304 	orr.w	r3, r3, #4
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <MX_GPIO_Init+0xa8>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <MX_GPIO_Init+0xa8>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a11      	ldr	r2, [pc, #68]	; (80017b4 <MX_GPIO_Init+0xa8>)
 800176e:	f043 0308 	orr.w	r3, r3, #8
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_GPIO_Init+0xa8>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001786:	480c      	ldr	r0, [pc, #48]	; (80017b8 <MX_GPIO_Init+0xac>)
 8001788:	f001 f80a 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800178c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	2301      	movs	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2302      	movs	r3, #2
 800179c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	4619      	mov	r1, r3
 80017a4:	4804      	ldr	r0, [pc, #16]	; (80017b8 <MX_GPIO_Init+0xac>)
 80017a6:	f000 fe77 	bl	8002498 <HAL_GPIO_Init>

}
 80017aa:	bf00      	nop
 80017ac:	3720      	adds	r7, #32
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40011000 	.word	0x40011000

080017bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c0:	b672      	cpsid	i
}
 80017c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <Error_Handler+0x8>
	...

080017c8 <OneWire_SetBaudrate>:
#include "onewire.h"

static void OneWire_SetBaudrate(UART_HandleTypeDef *huart, uint32_t baudrate) {
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
	huart->Init.BaudRate = baudrate;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	605a      	str	r2, [r3, #4]
	huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80017d8:	f002 f83c 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 80017dc:	4602      	mov	r2, r0
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	009a      	lsls	r2, r3, #2
 80017e6:	441a      	add	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	4a31      	ldr	r2, [pc, #196]	; (80018b8 <OneWire_SetBaudrate+0xf0>)
 80017f4:	fba2 2303 	umull	r2, r3, r2, r3
 80017f8:	095b      	lsrs	r3, r3, #5
 80017fa:	011c      	lsls	r4, r3, #4
 80017fc:	f002 f82a 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 8001800:	4602      	mov	r2, r0
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	009a      	lsls	r2, r3, #2
 800180a:	441a      	add	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	fbb2 f5f3 	udiv	r5, r2, r3
 8001816:	f002 f81d 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 800181a:	4602      	mov	r2, r0
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	009a      	lsls	r2, r3, #2
 8001824:	441a      	add	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001830:	4a21      	ldr	r2, [pc, #132]	; (80018b8 <OneWire_SetBaudrate+0xf0>)
 8001832:	fba2 2303 	umull	r2, r3, r2, r3
 8001836:	095b      	lsrs	r3, r3, #5
 8001838:	2264      	movs	r2, #100	; 0x64
 800183a:	fb02 f303 	mul.w	r3, r2, r3
 800183e:	1aeb      	subs	r3, r5, r3
 8001840:	011b      	lsls	r3, r3, #4
 8001842:	3332      	adds	r3, #50	; 0x32
 8001844:	4a1c      	ldr	r2, [pc, #112]	; (80018b8 <OneWire_SetBaudrate+0xf0>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001850:	441c      	add	r4, r3
 8001852:	f001 ffff 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 8001856:	4602      	mov	r2, r0
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	009a      	lsls	r2, r3, #2
 8001860:	441a      	add	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	fbb2 f5f3 	udiv	r5, r2, r3
 800186c:	f001 fff2 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 8001870:	4602      	mov	r2, r0
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	009a      	lsls	r2, r3, #2
 800187a:	441a      	add	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4a0c      	ldr	r2, [pc, #48]	; (80018b8 <OneWire_SetBaudrate+0xf0>)
 8001888:	fba2 2303 	umull	r2, r3, r2, r3
 800188c:	095b      	lsrs	r3, r3, #5
 800188e:	2264      	movs	r2, #100	; 0x64
 8001890:	fb02 f303 	mul.w	r3, r2, r3
 8001894:	1aeb      	subs	r3, r5, r3
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	3332      	adds	r3, #50	; 0x32
 800189a:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <OneWire_SetBaudrate+0xf0>)
 800189c:	fba2 2303 	umull	r2, r3, r2, r3
 80018a0:	095b      	lsrs	r3, r3, #5
 80018a2:	f003 020f 	and.w	r2, r3, #15
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4422      	add	r2, r4
 80018ac:	609a      	str	r2, [r3, #8]
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bdb0      	pop	{r4, r5, r7, pc}
 80018b6:	bf00      	nop
 80018b8:	51eb851f 	.word	0x51eb851f

080018bc <OneWire_ProcessBit>:

uint8_t OneWire_ProcessBit(UART_HandleTypeDef *huart, uint8_t bit)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	70fb      	strb	r3, [r7, #3]
	uint8_t txData = 0xFF;
 80018c8:	23ff      	movs	r3, #255	; 0xff
 80018ca:	73fb      	strb	r3, [r7, #15]
	uint8_t rxData = 0x00;
 80018cc:	2300      	movs	r3, #0
 80018ce:	73bb      	strb	r3, [r7, #14]
	if (bit == 0)
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <OneWire_ProcessBit+0x1e>
	{
		txData = 0x00;
 80018d6:	2300      	movs	r3, #0
 80018d8:	73fb      	strb	r3, [r7, #15]
	}
	HAL_UART_Transmit(huart, &txData, 1, ONEWIRE_UART_TIMEOUT);
 80018da:	f107 010f 	add.w	r1, r7, #15
 80018de:	230a      	movs	r3, #10
 80018e0:	2201      	movs	r2, #1
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f002 f83d 	bl	8003962 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, &rxData, 1, ONEWIRE_UART_TIMEOUT);
 80018e8:	f107 010e 	add.w	r1, r7, #14
 80018ec:	230a      	movs	r3, #10
 80018ee:	2201      	movs	r2, #1
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f002 f8c8 	bl	8003a86 <HAL_UART_Receive>
	return rxData;
 80018f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <OneWire_ProcessByte>:

uint8_t OneWire_ProcessByte(UART_HandleTypeDef *huart, uint8_t byte)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
	uint8_t rxByte = 0x00;
 800190c:	2300      	movs	r3, #0
 800190e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 8001910:	2300      	movs	r3, #0
 8001912:	73bb      	strb	r3, [r7, #14]
 8001914:	e022      	b.n	800195c <OneWire_ProcessByte+0x5c>
	{
		uint8_t txBit = (byte >> i) & 0x01;
 8001916:	78fa      	ldrb	r2, [r7, #3]
 8001918:	7bbb      	ldrb	r3, [r7, #14]
 800191a:	fa42 f303 	asr.w	r3, r2, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	733b      	strb	r3, [r7, #12]
		uint8_t rxBit = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	737b      	strb	r3, [r7, #13]
		uint8_t tempRxData = OneWire_ProcessBit(huart, txBit);
 800192a:	7b3b      	ldrb	r3, [r7, #12]
 800192c:	4619      	mov	r1, r3
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ffc4 	bl	80018bc <OneWire_ProcessBit>
 8001934:	4603      	mov	r3, r0
 8001936:	72fb      	strb	r3, [r7, #11]
		if (tempRxData == 0xFF)
 8001938:	7afb      	ldrb	r3, [r7, #11]
 800193a:	2bff      	cmp	r3, #255	; 0xff
 800193c:	d101      	bne.n	8001942 <OneWire_ProcessByte+0x42>
		{
			rxBit = 1;
 800193e:	2301      	movs	r3, #1
 8001940:	737b      	strb	r3, [r7, #13]
		}
		rxByte |= (rxBit << i);
 8001942:	7b7a      	ldrb	r2, [r7, #13]
 8001944:	7bbb      	ldrb	r3, [r7, #14]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	b25a      	sxtb	r2, r3
 800194c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001950:	4313      	orrs	r3, r2
 8001952:	b25b      	sxtb	r3, r3
 8001954:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 8001956:	7bbb      	ldrb	r3, [r7, #14]
 8001958:	3301      	adds	r3, #1
 800195a:	73bb      	strb	r3, [r7, #14]
 800195c:	7bbb      	ldrb	r3, [r7, #14]
 800195e:	2b07      	cmp	r3, #7
 8001960:	d9d9      	bls.n	8001916 <OneWire_ProcessByte+0x16>
	}
	return rxByte;
 8001962:	7bfb      	ldrb	r3, [r7, #15]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <OneWire_Reset>:

ONEWIRE_Status OneWire_Reset(UART_HandleTypeDef *huart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	OneWire_ProcessByte(huart, 0x43);
 8001974:	2143      	movs	r1, #67	; 0x43
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ffc2 	bl	8001900 <OneWire_ProcessByte>
	ONEWIRE_Status status = ONEWIRE_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]
	uint8_t txByte = ONEWIRE_RESET_BYTE;
 8001980:	23f0      	movs	r3, #240	; 0xf0
 8001982:	73bb      	strb	r3, [r7, #14]
	uint8_t rxByte = 0x00;
 8001984:	2300      	movs	r3, #0
 8001986:	737b      	strb	r3, [r7, #13]
	OneWire_SetBaudrate(huart, ONEWIRE_RESET_BAUDRATE);
 8001988:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ff1b 	bl	80017c8 <OneWire_SetBaudrate>
	HAL_UART_Transmit(huart, &txByte, 1, ONEWIRE_UART_TIMEOUT);
 8001992:	f107 010e 	add.w	r1, r7, #14
 8001996:	230a      	movs	r3, #10
 8001998:	2201      	movs	r2, #1
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f001 ffe1 	bl	8003962 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, &rxByte, 1, ONEWIRE_UART_TIMEOUT);
 80019a0:	f107 010d 	add.w	r1, r7, #13
 80019a4:	230a      	movs	r3, #10
 80019a6:	2201      	movs	r2, #1
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f002 f86c 	bl	8003a86 <HAL_UART_Receive>
	OneWire_SetBaudrate(huart, ONEWIRE_BAUDRATE);
 80019ae:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff ff08 	bl	80017c8 <OneWire_SetBaudrate>
	if (rxByte == txByte)
 80019b8:	7b7a      	ldrb	r2, [r7, #13]
 80019ba:	7bbb      	ldrb	r3, [r7, #14]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d101      	bne.n	80019c4 <OneWire_Reset+0x58>
	{
		status = ONEWIRE_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
	...

080019dc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af04      	add	r7, sp, #16
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	9302      	str	r3, [sp, #8]
 80019ec:	2301      	movs	r3, #1
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	1dfb      	adds	r3, r7, #7
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2301      	movs	r3, #1
 80019f6:	2200      	movs	r2, #0
 80019f8:	2178      	movs	r1, #120	; 0x78
 80019fa:	4803      	ldr	r0, [pc, #12]	; (8001a08 <ssd1306_WriteCommand+0x2c>)
 80019fc:	f001 f82c 	bl	8002a58 <HAL_I2C_Mem_Write>
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	2000020c 	.word	0x2000020c

08001a0c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af04      	add	r7, sp, #16
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1e:	9202      	str	r2, [sp, #8]
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2301      	movs	r3, #1
 8001a28:	2240      	movs	r2, #64	; 0x40
 8001a2a:	2178      	movs	r1, #120	; 0x78
 8001a2c:	4803      	ldr	r0, [pc, #12]	; (8001a3c <ssd1306_WriteData+0x30>)
 8001a2e:	f001 f813 	bl	8002a58 <HAL_I2C_Mem_Write>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2000020c 	.word	0x2000020c

08001a40 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001a44:	f7ff ffc3 	bl	80019ce <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001a48:	2064      	movs	r0, #100	; 0x64
 8001a4a:	f000 fc1d 	bl	8002288 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 f9d6 	bl	8001e00 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001a54:	2020      	movs	r0, #32
 8001a56:	f7ff ffc1 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7ff ffbe 	bl	80019dc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a60:	20b0      	movs	r0, #176	; 0xb0
 8001a62:	f7ff ffbb 	bl	80019dc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001a66:	20c8      	movs	r0, #200	; 0xc8
 8001a68:	f7ff ffb8 	bl	80019dc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f7ff ffb5 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001a72:	2010      	movs	r0, #16
 8001a74:	f7ff ffb2 	bl	80019dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001a78:	2040      	movs	r0, #64	; 0x40
 8001a7a:	f7ff ffaf 	bl	80019dc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001a7e:	20ff      	movs	r0, #255	; 0xff
 8001a80:	f000 f9aa 	bl	8001dd8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001a84:	20a1      	movs	r0, #161	; 0xa1
 8001a86:	f7ff ffa9 	bl	80019dc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001a8a:	20a6      	movs	r0, #166	; 0xa6
 8001a8c:	f7ff ffa6 	bl	80019dc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001a90:	20a8      	movs	r0, #168	; 0xa8
 8001a92:	f7ff ffa3 	bl	80019dc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001a96:	201f      	movs	r0, #31
 8001a98:	f7ff ffa0 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a9c:	20a4      	movs	r0, #164	; 0xa4
 8001a9e:	f7ff ff9d 	bl	80019dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001aa2:	20d3      	movs	r0, #211	; 0xd3
 8001aa4:	f7ff ff9a 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7ff ff97 	bl	80019dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001aae:	20d5      	movs	r0, #213	; 0xd5
 8001ab0:	f7ff ff94 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001ab4:	20f0      	movs	r0, #240	; 0xf0
 8001ab6:	f7ff ff91 	bl	80019dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001aba:	20d9      	movs	r0, #217	; 0xd9
 8001abc:	f7ff ff8e 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001ac0:	2022      	movs	r0, #34	; 0x22
 8001ac2:	f7ff ff8b 	bl	80019dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001ac6:	20da      	movs	r0, #218	; 0xda
 8001ac8:	f7ff ff88 	bl	80019dc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8001acc:	2002      	movs	r0, #2
 8001ace:	f7ff ff85 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ad2:	20db      	movs	r0, #219	; 0xdb
 8001ad4:	f7ff ff82 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ad8:	2020      	movs	r0, #32
 8001ada:	f7ff ff7f 	bl	80019dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001ade:	208d      	movs	r0, #141	; 0x8d
 8001ae0:	f7ff ff7c 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001ae4:	2014      	movs	r0, #20
 8001ae6:	f7ff ff79 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001aea:	2001      	movs	r0, #1
 8001aec:	f000 f988 	bl	8001e00 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001af0:	2000      	movs	r0, #0
 8001af2:	f000 f80f 	bl	8001b14 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001af6:	f000 f82f 	bl	8001b58 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <ssd1306_Init+0xd0>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <ssd1306_Init+0xd0>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001b06:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <ssd1306_Init+0xd0>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	711a      	strb	r2, [r3, #4]
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	200004a4 	.word	0x200004a4

08001b14 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	e00d      	b.n	8001b40 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <ssd1306_Fill+0x1a>
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	e000      	b.n	8001b30 <ssd1306_Fill+0x1c>
 8001b2e:	21ff      	movs	r1, #255	; 0xff
 8001b30:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <ssd1306_Fill+0x40>)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4413      	add	r3, r2
 8001b36:	460a      	mov	r2, r1
 8001b38:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b46:	d3ed      	bcc.n	8001b24 <ssd1306_Fill+0x10>
    }
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	200002a4 	.word	0x200002a4

08001b58 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b5e:	2300      	movs	r3, #0
 8001b60:	71fb      	strb	r3, [r7, #7]
 8001b62:	e016      	b.n	8001b92 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	3b50      	subs	r3, #80	; 0x50
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff36 	bl	80019dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001b70:	2000      	movs	r0, #0
 8001b72:	f7ff ff33 	bl	80019dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001b76:	2010      	movs	r0, #16
 8001b78:	f7ff ff30 	bl	80019dc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	01db      	lsls	r3, r3, #7
 8001b80:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <ssd1306_UpdateScreen+0x4c>)
 8001b82:	4413      	add	r3, r2
 8001b84:	2180      	movs	r1, #128	; 0x80
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff40 	bl	8001a0c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	71fb      	strb	r3, [r7, #7]
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d9e5      	bls.n	8001b64 <ssd1306_UpdateScreen+0xc>
    }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200002a4 	.word	0x200002a4

08001ba8 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	71bb      	strb	r3, [r7, #6]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	db3d      	blt.n	8001c3e <ssd1306_DrawPixel+0x96>
 8001bc2:	79bb      	ldrb	r3, [r7, #6]
 8001bc4:	2b1f      	cmp	r3, #31
 8001bc6:	d83a      	bhi.n	8001c3e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001bc8:	797b      	ldrb	r3, [r7, #5]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d11a      	bne.n	8001c04 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001bce:	79fa      	ldrb	r2, [r7, #7]
 8001bd0:	79bb      	ldrb	r3, [r7, #6]
 8001bd2:	08db      	lsrs	r3, r3, #3
 8001bd4:	b2d8      	uxtb	r0, r3
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	01db      	lsls	r3, r3, #7
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a1a      	ldr	r2, [pc, #104]	; (8001c48 <ssd1306_DrawPixel+0xa0>)
 8001bde:	5cd3      	ldrb	r3, [r2, r3]
 8001be0:	b25a      	sxtb	r2, r3
 8001be2:	79bb      	ldrb	r3, [r7, #6]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	2101      	movs	r1, #1
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	b25b      	sxtb	r3, r3
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	b259      	sxtb	r1, r3
 8001bf4:	79fa      	ldrb	r2, [r7, #7]
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	01db      	lsls	r3, r3, #7
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b2c9      	uxtb	r1, r1
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <ssd1306_DrawPixel+0xa0>)
 8001c00:	54d1      	strb	r1, [r2, r3]
 8001c02:	e01d      	b.n	8001c40 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c04:	79fa      	ldrb	r2, [r7, #7]
 8001c06:	79bb      	ldrb	r3, [r7, #6]
 8001c08:	08db      	lsrs	r3, r3, #3
 8001c0a:	b2d8      	uxtb	r0, r3
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	01db      	lsls	r3, r3, #7
 8001c10:	4413      	add	r3, r2
 8001c12:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <ssd1306_DrawPixel+0xa0>)
 8001c14:	5cd3      	ldrb	r3, [r2, r3]
 8001c16:	b25a      	sxtb	r2, r3
 8001c18:	79bb      	ldrb	r3, [r7, #6]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	2101      	movs	r1, #1
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	b25b      	sxtb	r3, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	b25b      	sxtb	r3, r3
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	b259      	sxtb	r1, r3
 8001c2e:	79fa      	ldrb	r2, [r7, #7]
 8001c30:	4603      	mov	r3, r0
 8001c32:	01db      	lsls	r3, r3, #7
 8001c34:	4413      	add	r3, r2
 8001c36:	b2c9      	uxtb	r1, r1
 8001c38:	4a03      	ldr	r2, [pc, #12]	; (8001c48 <ssd1306_DrawPixel+0xa0>)
 8001c3a:	54d1      	strb	r1, [r2, r3]
 8001c3c:	e000      	b.n	8001c40 <ssd1306_DrawPixel+0x98>
        return;
 8001c3e:	bf00      	nop
    }
}
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	200002a4 	.word	0x200002a4

08001c4c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b089      	sub	sp, #36	; 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4604      	mov	r4, r0
 8001c54:	1d38      	adds	r0, r7, #4
 8001c56:	e880 0006 	stmia.w	r0, {r1, r2}
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4623      	mov	r3, r4
 8001c5e:	73fb      	strb	r3, [r7, #15]
 8001c60:	4613      	mov	r3, r2
 8001c62:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	2b1f      	cmp	r3, #31
 8001c68:	d902      	bls.n	8001c70 <ssd1306_WriteChar+0x24>
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	2b7e      	cmp	r3, #126	; 0x7e
 8001c6e:	d901      	bls.n	8001c74 <ssd1306_WriteChar+0x28>
        return 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	e06d      	b.n	8001d50 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c74:	4b38      	ldr	r3, [pc, #224]	; (8001d58 <ssd1306_WriteChar+0x10c>)
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	793b      	ldrb	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	2b80      	cmp	r3, #128	; 0x80
 8001c80:	dc06      	bgt.n	8001c90 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001c82:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <ssd1306_WriteChar+0x10c>)
 8001c84:	885b      	ldrh	r3, [r3, #2]
 8001c86:	461a      	mov	r2, r3
 8001c88:	797b      	ldrb	r3, [r7, #5]
 8001c8a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c8c:	2b20      	cmp	r3, #32
 8001c8e:	dd01      	ble.n	8001c94 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	e05d      	b.n	8001d50 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	e04c      	b.n	8001d34 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	3b20      	subs	r3, #32
 8001ca0:	7979      	ldrb	r1, [r7, #5]
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	440b      	add	r3, r1
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
 8001cb8:	e034      	b.n	8001d24 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d012      	beq.n	8001cf0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001cca:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <ssd1306_WriteChar+0x10c>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	b2d8      	uxtb	r0, r3
 8001cd8:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <ssd1306_WriteChar+0x10c>)
 8001cda:	885b      	ldrh	r3, [r3, #2]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	7bba      	ldrb	r2, [r7, #14]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f7ff ff5d 	bl	8001ba8 <ssd1306_DrawPixel>
 8001cee:	e016      	b.n	8001d1e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <ssd1306_WriteChar+0x10c>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b2d8      	uxtb	r0, r3
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <ssd1306_WriteChar+0x10c>)
 8001d00:	885b      	ldrh	r3, [r3, #2]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	4413      	add	r3, r2
 8001d0a:	b2d9      	uxtb	r1, r3
 8001d0c:	7bbb      	ldrb	r3, [r7, #14]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	bf0c      	ite	eq
 8001d12:	2301      	moveq	r3, #1
 8001d14:	2300      	movne	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f7ff ff45 	bl	8001ba8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	3301      	adds	r3, #1
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	793b      	ldrb	r3, [r7, #4]
 8001d26:	461a      	mov	r2, r3
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d3c5      	bcc.n	8001cba <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3301      	adds	r3, #1
 8001d32:	61fb      	str	r3, [r7, #28]
 8001d34:	797b      	ldrb	r3, [r7, #5]
 8001d36:	461a      	mov	r2, r3
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d3ad      	bcc.n	8001c9a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <ssd1306_WriteChar+0x10c>)
 8001d40:	881a      	ldrh	r2, [r3, #0]
 8001d42:	793b      	ldrb	r3, [r7, #4]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <ssd1306_WriteChar+0x10c>)
 8001d4c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3724      	adds	r7, #36	; 0x24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd90      	pop	{r4, r7, pc}
 8001d58:	200004a4 	.word	0x200004a4

08001d5c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	1d38      	adds	r0, r7, #4
 8001d66:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d6a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001d6c:	e012      	b.n	8001d94 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	7818      	ldrb	r0, [r3, #0]
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	1d3a      	adds	r2, r7, #4
 8001d76:	ca06      	ldmia	r2, {r1, r2}
 8001d78:	f7ff ff68 	bl	8001c4c <ssd1306_WriteChar>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d002      	beq.n	8001d8e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	e008      	b.n	8001da0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3301      	adds	r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1e8      	bne.n	8001d6e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	460a      	mov	r2, r1
 8001db2:	71fb      	strb	r3, [r7, #7]
 8001db4:	4613      	mov	r3, r2
 8001db6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <ssd1306_SetCursor+0x2c>)
 8001dbe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001dc0:	79bb      	ldrb	r3, [r7, #6]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <ssd1306_SetCursor+0x2c>)
 8001dc6:	805a      	strh	r2, [r3, #2]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	200004a4 	.word	0x200004a4

08001dd8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001de2:	2381      	movs	r3, #129	; 0x81
 8001de4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fdf7 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fdf3 	bl	80019dc <ssd1306_WriteCommand>
}
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001e10:	23af      	movs	r3, #175	; 0xaf
 8001e12:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <ssd1306_SetDisplayOn+0x38>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	715a      	strb	r2, [r3, #5]
 8001e1a:	e004      	b.n	8001e26 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001e1c:	23ae      	movs	r3, #174	; 0xae
 8001e1e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <ssd1306_SetDisplayOn+0x38>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fdd7 	bl	80019dc <ssd1306_WriteCommand>
}
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200004a4 	.word	0x200004a4

08001e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <HAL_MspInit+0x5c>)
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <HAL_MspInit+0x5c>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6193      	str	r3, [r2, #24]
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_MspInit+0x5c>)
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <HAL_MspInit+0x5c>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a0e      	ldr	r2, [pc, #56]	; (8001e98 <HAL_MspInit+0x5c>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e64:	61d3      	str	r3, [r2, #28]
 8001e66:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <HAL_MspInit+0x5c>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_MspInit+0x60>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <HAL_MspInit+0x60>)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010000 	.word	0x40010000

08001ea0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a15      	ldr	r2, [pc, #84]	; (8001f10 <HAL_I2C_MspInit+0x70>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d123      	bne.n	8001f08 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <HAL_I2C_MspInit+0x74>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <HAL_I2C_MspInit+0x74>)
 8001ec6:	f043 0308 	orr.w	r3, r3, #8
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <HAL_I2C_MspInit+0x74>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ed8:	23c0      	movs	r3, #192	; 0xc0
 8001eda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001edc:	2312      	movs	r3, #18
 8001ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee4:	f107 0310 	add.w	r3, r7, #16
 8001ee8:	4619      	mov	r1, r3
 8001eea:	480b      	ldr	r0, [pc, #44]	; (8001f18 <HAL_I2C_MspInit+0x78>)
 8001eec:	f000 fad4 	bl	8002498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_I2C_MspInit+0x74>)
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <HAL_I2C_MspInit+0x74>)
 8001ef6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001efa:	61d3      	str	r3, [r2, #28]
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_I2C_MspInit+0x74>)
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f08:	bf00      	nop
 8001f0a:	3720      	adds	r7, #32
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40005400 	.word	0x40005400
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40010c00 	.word	0x40010c00

08001f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a16      	ldr	r2, [pc, #88]	; (8001f90 <HAL_UART_MspInit+0x74>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d124      	bne.n	8001f86 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <HAL_UART_MspInit+0x78>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <HAL_UART_MspInit+0x78>)
 8001f42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_UART_MspInit+0x78>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f54:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <HAL_UART_MspInit+0x78>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a0e      	ldr	r2, [pc, #56]	; (8001f94 <HAL_UART_MspInit+0x78>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <HAL_UART_MspInit+0x78>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f72:	2312      	movs	r3, #18
 8001f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f76:	2303      	movs	r3, #3
 8001f78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7a:	f107 0310 	add.w	r3, r7, #16
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4805      	ldr	r0, [pc, #20]	; (8001f98 <HAL_UART_MspInit+0x7c>)
 8001f82:	f000 fa89 	bl	8002498 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f86:	bf00      	nop
 8001f88:	3720      	adds	r7, #32
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40013800 	.word	0x40013800
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40010800 	.word	0x40010800

08001f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <NMI_Handler+0x4>

08001fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa6:	e7fe      	b.n	8001fa6 <HardFault_Handler+0x4>

08001fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fac:	e7fe      	b.n	8001fac <MemManage_Handler+0x4>

08001fae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb2:	e7fe      	b.n	8001fb2 <BusFault_Handler+0x4>

08001fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <UsageFault_Handler+0x4>

08001fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr

08001fc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr

08001fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe2:	f000 f935 	bl	8002250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0
	return 1;
 8001fee:	2301      	movs	r3, #1
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <_kill>:

int _kill(int pid, int sig)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002002:	f001 febb 	bl	8003d7c <__errno>
 8002006:	4603      	mov	r3, r0
 8002008:	2216      	movs	r2, #22
 800200a:	601a      	str	r2, [r3, #0]
	return -1;
 800200c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <_exit>:

void _exit (int status)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002020:	f04f 31ff 	mov.w	r1, #4294967295
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ffe7 	bl	8001ff8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800202a:	e7fe      	b.n	800202a <_exit+0x12>

0800202c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	e00a      	b.n	8002054 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800203e:	f3af 8000 	nop.w
 8002042:	4601      	mov	r1, r0
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	60ba      	str	r2, [r7, #8]
 800204a:	b2ca      	uxtb	r2, r1
 800204c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3301      	adds	r3, #1
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	dbf0      	blt.n	800203e <_read+0x12>
	}

return len;
 800205c:	687b      	ldr	r3, [r7, #4]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	e009      	b.n	800208c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	60ba      	str	r2, [r7, #8]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	3301      	adds	r3, #1
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	dbf1      	blt.n	8002078 <_write+0x12>
	}
	return len;
 8002094:	687b      	ldr	r3, [r7, #4]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <_close>:

int _close(int file)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
	return -1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c4:	605a      	str	r2, [r3, #4]
	return 0;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <_isatty>:

int _isatty(int file)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
	return 1;
 80020da:	2301      	movs	r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
	return 0;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
	...

08002100 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002108:	4a14      	ldr	r2, [pc, #80]	; (800215c <_sbrk+0x5c>)
 800210a:	4b15      	ldr	r3, [pc, #84]	; (8002160 <_sbrk+0x60>)
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002114:	4b13      	ldr	r3, [pc, #76]	; (8002164 <_sbrk+0x64>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d102      	bne.n	8002122 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <_sbrk+0x64>)
 800211e:	4a12      	ldr	r2, [pc, #72]	; (8002168 <_sbrk+0x68>)
 8002120:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <_sbrk+0x64>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	429a      	cmp	r2, r3
 800212e:	d207      	bcs.n	8002140 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002130:	f001 fe24 	bl	8003d7c <__errno>
 8002134:	4603      	mov	r3, r0
 8002136:	220c      	movs	r2, #12
 8002138:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
 800213e:	e009      	b.n	8002154 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <_sbrk+0x64>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002146:	4b07      	ldr	r3, [pc, #28]	; (8002164 <_sbrk+0x64>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	4a05      	ldr	r2, [pc, #20]	; (8002164 <_sbrk+0x64>)
 8002150:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002152:	68fb      	ldr	r3, [r7, #12]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20005000 	.word	0x20005000
 8002160:	00000400 	.word	0x00000400
 8002164:	200004ac 	.word	0x200004ac
 8002168:	200004c8 	.word	0x200004c8

0800216c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002178:	480c      	ldr	r0, [pc, #48]	; (80021ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800217a:	490d      	ldr	r1, [pc, #52]	; (80021b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800217c:	4a0d      	ldr	r2, [pc, #52]	; (80021b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002180:	e002      	b.n	8002188 <LoopCopyDataInit>

08002182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002186:	3304      	adds	r3, #4

08002188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800218c:	d3f9      	bcc.n	8002182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002190:	4c0a      	ldr	r4, [pc, #40]	; (80021bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002194:	e001      	b.n	800219a <LoopFillZerobss>

08002196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002198:	3204      	adds	r2, #4

0800219a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800219c:	d3fb      	bcc.n	8002196 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800219e:	f7ff ffe5 	bl	800216c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021a2:	f001 fdf1 	bl	8003d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021a6:	f7ff f8f3 	bl	8001390 <main>
  bx lr
 80021aa:	4770      	bx	lr
  ldr r0, =_sdata
 80021ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80021b4:	0800778c 	.word	0x0800778c
  ldr r2, =_sbss
 80021b8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80021bc:	200004c4 	.word	0x200004c4

080021c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021c0:	e7fe      	b.n	80021c0 <ADC1_2_IRQHandler>
	...

080021c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_Init+0x28>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a07      	ldr	r2, [pc, #28]	; (80021ec <HAL_Init+0x28>)
 80021ce:	f043 0310 	orr.w	r3, r3, #16
 80021d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f000 f92b 	bl	8002430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021da:	200f      	movs	r0, #15
 80021dc:	f000 f808 	bl	80021f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e0:	f7ff fe2c 	bl	8001e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40022000 	.word	0x40022000

080021f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_InitTick+0x54>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_InitTick+0x58>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4619      	mov	r1, r3
 8002202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002206:	fbb3 f3f1 	udiv	r3, r3, r1
 800220a:	fbb2 f3f3 	udiv	r3, r2, r3
 800220e:	4618      	mov	r0, r3
 8002210:	f000 f935 	bl	800247e <HAL_SYSTICK_Config>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e00e      	b.n	800223c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b0f      	cmp	r3, #15
 8002222:	d80a      	bhi.n	800223a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002224:	2200      	movs	r2, #0
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f000 f90b 	bl	8002446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002230:	4a06      	ldr	r2, [pc, #24]	; (800224c <HAL_InitTick+0x5c>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	e000      	b.n	800223c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000014 	.word	0x20000014
 8002248:	2000001c 	.word	0x2000001c
 800224c:	20000018 	.word	0x20000018

08002250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_IncTick+0x1c>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_IncTick+0x20>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4413      	add	r3, r2
 8002260:	4a03      	ldr	r2, [pc, #12]	; (8002270 <HAL_IncTick+0x20>)
 8002262:	6013      	str	r3, [r2, #0]
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	2000001c 	.word	0x2000001c
 8002270:	200004b0 	.word	0x200004b0

08002274 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return uwTick;
 8002278:	4b02      	ldr	r3, [pc, #8]	; (8002284 <HAL_GetTick+0x10>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr
 8002284:	200004b0 	.word	0x200004b0

08002288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7ff fff0 	bl	8002274 <HAL_GetTick>
 8002294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a0:	d005      	beq.n	80022ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_Delay+0x44>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ae:	bf00      	nop
 80022b0:	f7ff ffe0 	bl	8002274 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d8f7      	bhi.n	80022b0 <HAL_Delay+0x28>
  {
  }
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2000001c 	.word	0x2000001c

080022d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e0:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022ec:	4013      	ands	r3, r2
 80022ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002302:	4a04      	ldr	r2, [pc, #16]	; (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	60d3      	str	r3, [r2, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <__NVIC_GetPriorityGrouping+0x18>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	f003 0307 	and.w	r3, r3, #7
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	2b00      	cmp	r3, #0
 8002346:	db0a      	blt.n	800235e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	490c      	ldr	r1, [pc, #48]	; (8002380 <__NVIC_SetPriority+0x4c>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	0112      	lsls	r2, r2, #4
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	440b      	add	r3, r1
 8002358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800235c:	e00a      	b.n	8002374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4908      	ldr	r1, [pc, #32]	; (8002384 <__NVIC_SetPriority+0x50>)
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3b04      	subs	r3, #4
 800236c:	0112      	lsls	r2, r2, #4
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	440b      	add	r3, r1
 8002372:	761a      	strb	r2, [r3, #24]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000e100 	.word	0xe000e100
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f1c3 0307 	rsb	r3, r3, #7
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	bf28      	it	cs
 80023a6:	2304      	movcs	r3, #4
 80023a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d902      	bls.n	80023b8 <NVIC_EncodePriority+0x30>
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3b03      	subs	r3, #3
 80023b6:	e000      	b.n	80023ba <NVIC_EncodePriority+0x32>
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43da      	mvns	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	401a      	ands	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	43d9      	mvns	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	4313      	orrs	r3, r2
         );
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3724      	adds	r7, #36	; 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023fc:	d301      	bcc.n	8002402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fe:	2301      	movs	r3, #1
 8002400:	e00f      	b.n	8002422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002402:	4a0a      	ldr	r2, [pc, #40]	; (800242c <SysTick_Config+0x40>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240a:	210f      	movs	r1, #15
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	f7ff ff90 	bl	8002334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <SysTick_Config+0x40>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241a:	4b04      	ldr	r3, [pc, #16]	; (800242c <SysTick_Config+0x40>)
 800241c:	2207      	movs	r2, #7
 800241e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	e000e010 	.word	0xe000e010

08002430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff49 	bl	80022d0 <__NVIC_SetPriorityGrouping>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	4603      	mov	r3, r0
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002458:	f7ff ff5e 	bl	8002318 <__NVIC_GetPriorityGrouping>
 800245c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	6978      	ldr	r0, [r7, #20]
 8002464:	f7ff ff90 	bl	8002388 <NVIC_EncodePriority>
 8002468:	4602      	mov	r2, r0
 800246a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff5f 	bl	8002334 <__NVIC_SetPriority>
}
 8002476:	bf00      	nop
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ffb0 	bl	80023ec <SysTick_Config>
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002498:	b480      	push	{r7}
 800249a:	b08b      	sub	sp, #44	; 0x2c
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024a2:	2300      	movs	r3, #0
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024aa:	e169      	b.n	8002780 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024ac:	2201      	movs	r2, #1
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	f040 8158 	bne.w	800277a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4a9a      	ldr	r2, [pc, #616]	; (8002738 <HAL_GPIO_Init+0x2a0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d05e      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
 80024d4:	4a98      	ldr	r2, [pc, #608]	; (8002738 <HAL_GPIO_Init+0x2a0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d875      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 80024da:	4a98      	ldr	r2, [pc, #608]	; (800273c <HAL_GPIO_Init+0x2a4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d058      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
 80024e0:	4a96      	ldr	r2, [pc, #600]	; (800273c <HAL_GPIO_Init+0x2a4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d86f      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 80024e6:	4a96      	ldr	r2, [pc, #600]	; (8002740 <HAL_GPIO_Init+0x2a8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d052      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
 80024ec:	4a94      	ldr	r2, [pc, #592]	; (8002740 <HAL_GPIO_Init+0x2a8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d869      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 80024f2:	4a94      	ldr	r2, [pc, #592]	; (8002744 <HAL_GPIO_Init+0x2ac>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d04c      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
 80024f8:	4a92      	ldr	r2, [pc, #584]	; (8002744 <HAL_GPIO_Init+0x2ac>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d863      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 80024fe:	4a92      	ldr	r2, [pc, #584]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d046      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
 8002504:	4a90      	ldr	r2, [pc, #576]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d85d      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 800250a:	2b12      	cmp	r3, #18
 800250c:	d82a      	bhi.n	8002564 <HAL_GPIO_Init+0xcc>
 800250e:	2b12      	cmp	r3, #18
 8002510:	d859      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 8002512:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <HAL_GPIO_Init+0x80>)
 8002514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002518:	08002593 	.word	0x08002593
 800251c:	0800256d 	.word	0x0800256d
 8002520:	0800257f 	.word	0x0800257f
 8002524:	080025c1 	.word	0x080025c1
 8002528:	080025c7 	.word	0x080025c7
 800252c:	080025c7 	.word	0x080025c7
 8002530:	080025c7 	.word	0x080025c7
 8002534:	080025c7 	.word	0x080025c7
 8002538:	080025c7 	.word	0x080025c7
 800253c:	080025c7 	.word	0x080025c7
 8002540:	080025c7 	.word	0x080025c7
 8002544:	080025c7 	.word	0x080025c7
 8002548:	080025c7 	.word	0x080025c7
 800254c:	080025c7 	.word	0x080025c7
 8002550:	080025c7 	.word	0x080025c7
 8002554:	080025c7 	.word	0x080025c7
 8002558:	080025c7 	.word	0x080025c7
 800255c:	08002575 	.word	0x08002575
 8002560:	08002589 	.word	0x08002589
 8002564:	4a79      	ldr	r2, [pc, #484]	; (800274c <HAL_GPIO_Init+0x2b4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800256a:	e02c      	b.n	80025c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	623b      	str	r3, [r7, #32]
          break;
 8002572:	e029      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	3304      	adds	r3, #4
 800257a:	623b      	str	r3, [r7, #32]
          break;
 800257c:	e024      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	3308      	adds	r3, #8
 8002584:	623b      	str	r3, [r7, #32]
          break;
 8002586:	e01f      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	330c      	adds	r3, #12
 800258e:	623b      	str	r3, [r7, #32]
          break;
 8002590:	e01a      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d102      	bne.n	80025a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800259a:	2304      	movs	r3, #4
 800259c:	623b      	str	r3, [r7, #32]
          break;
 800259e:	e013      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025a8:	2308      	movs	r3, #8
 80025aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	611a      	str	r2, [r3, #16]
          break;
 80025b2:	e009      	b.n	80025c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025b4:	2308      	movs	r3, #8
 80025b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	615a      	str	r2, [r3, #20]
          break;
 80025be:	e003      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025c0:	2300      	movs	r3, #0
 80025c2:	623b      	str	r3, [r7, #32]
          break;
 80025c4:	e000      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          break;
 80025c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2bff      	cmp	r3, #255	; 0xff
 80025cc:	d801      	bhi.n	80025d2 <HAL_GPIO_Init+0x13a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	e001      	b.n	80025d6 <HAL_GPIO_Init+0x13e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3304      	adds	r3, #4
 80025d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2bff      	cmp	r3, #255	; 0xff
 80025dc:	d802      	bhi.n	80025e4 <HAL_GPIO_Init+0x14c>
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	e002      	b.n	80025ea <HAL_GPIO_Init+0x152>
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	3b08      	subs	r3, #8
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	210f      	movs	r1, #15
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	fa01 f303 	lsl.w	r3, r1, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	401a      	ands	r2, r3
 80025fc:	6a39      	ldr	r1, [r7, #32]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	431a      	orrs	r2, r3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 80b1 	beq.w	800277a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002618:	4b4d      	ldr	r3, [pc, #308]	; (8002750 <HAL_GPIO_Init+0x2b8>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	4a4c      	ldr	r2, [pc, #304]	; (8002750 <HAL_GPIO_Init+0x2b8>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6193      	str	r3, [r2, #24]
 8002624:	4b4a      	ldr	r3, [pc, #296]	; (8002750 <HAL_GPIO_Init+0x2b8>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002630:	4a48      	ldr	r2, [pc, #288]	; (8002754 <HAL_GPIO_Init+0x2bc>)
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	3302      	adds	r3, #2
 8002638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	220f      	movs	r2, #15
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4013      	ands	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a40      	ldr	r2, [pc, #256]	; (8002758 <HAL_GPIO_Init+0x2c0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d013      	beq.n	8002684 <HAL_GPIO_Init+0x1ec>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a3f      	ldr	r2, [pc, #252]	; (800275c <HAL_GPIO_Init+0x2c4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00d      	beq.n	8002680 <HAL_GPIO_Init+0x1e8>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a3e      	ldr	r2, [pc, #248]	; (8002760 <HAL_GPIO_Init+0x2c8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d007      	beq.n	800267c <HAL_GPIO_Init+0x1e4>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a3d      	ldr	r2, [pc, #244]	; (8002764 <HAL_GPIO_Init+0x2cc>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d101      	bne.n	8002678 <HAL_GPIO_Init+0x1e0>
 8002674:	2303      	movs	r3, #3
 8002676:	e006      	b.n	8002686 <HAL_GPIO_Init+0x1ee>
 8002678:	2304      	movs	r3, #4
 800267a:	e004      	b.n	8002686 <HAL_GPIO_Init+0x1ee>
 800267c:	2302      	movs	r3, #2
 800267e:	e002      	b.n	8002686 <HAL_GPIO_Init+0x1ee>
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <HAL_GPIO_Init+0x1ee>
 8002684:	2300      	movs	r3, #0
 8002686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002688:	f002 0203 	and.w	r2, r2, #3
 800268c:	0092      	lsls	r2, r2, #2
 800268e:	4093      	lsls	r3, r2
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002696:	492f      	ldr	r1, [pc, #188]	; (8002754 <HAL_GPIO_Init+0x2bc>)
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	089b      	lsrs	r3, r3, #2
 800269c:	3302      	adds	r3, #2
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d006      	beq.n	80026be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026b0:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	492c      	ldr	r1, [pc, #176]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026be:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	4928      	ldr	r1, [pc, #160]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d006      	beq.n	80026e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026d8:	4b23      	ldr	r3, [pc, #140]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	4922      	ldr	r1, [pc, #136]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
 80026e4:	e006      	b.n	80026f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	491e      	ldr	r1, [pc, #120]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d006      	beq.n	800270e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	4918      	ldr	r1, [pc, #96]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	608b      	str	r3, [r1, #8]
 800270c:	e006      	b.n	800271c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800270e:	4b16      	ldr	r3, [pc, #88]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	43db      	mvns	r3, r3
 8002716:	4914      	ldr	r1, [pc, #80]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 8002718:	4013      	ands	r3, r2
 800271a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d021      	beq.n	800276c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	490e      	ldr	r1, [pc, #56]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	60cb      	str	r3, [r1, #12]
 8002734:	e021      	b.n	800277a <HAL_GPIO_Init+0x2e2>
 8002736:	bf00      	nop
 8002738:	10320000 	.word	0x10320000
 800273c:	10310000 	.word	0x10310000
 8002740:	10220000 	.word	0x10220000
 8002744:	10210000 	.word	0x10210000
 8002748:	10120000 	.word	0x10120000
 800274c:	10110000 	.word	0x10110000
 8002750:	40021000 	.word	0x40021000
 8002754:	40010000 	.word	0x40010000
 8002758:	40010800 	.word	0x40010800
 800275c:	40010c00 	.word	0x40010c00
 8002760:	40011000 	.word	0x40011000
 8002764:	40011400 	.word	0x40011400
 8002768:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_GPIO_Init+0x304>)
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	43db      	mvns	r3, r3
 8002774:	4909      	ldr	r1, [pc, #36]	; (800279c <HAL_GPIO_Init+0x304>)
 8002776:	4013      	ands	r3, r2
 8002778:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	3301      	adds	r3, #1
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	fa22 f303 	lsr.w	r3, r2, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	f47f ae8e 	bne.w	80024ac <HAL_GPIO_Init+0x14>
  }
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	372c      	adds	r7, #44	; 0x2c
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	40010400 	.word	0x40010400

080027a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]
 80027ac:	4613      	mov	r3, r2
 80027ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027b0:	787b      	ldrb	r3, [r7, #1]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027bc:	e003      	b.n	80027c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027be:	887b      	ldrh	r3, [r7, #2]
 80027c0:	041a      	lsls	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	611a      	str	r2, [r3, #16]
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e12b      	b.n	8002a3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff fb52 	bl	8001ea0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2224      	movs	r2, #36	; 0x24
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0201 	bic.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002822:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002832:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002834:	f000 fffa 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 8002838:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	4a81      	ldr	r2, [pc, #516]	; (8002a44 <HAL_I2C_Init+0x274>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d807      	bhi.n	8002854 <HAL_I2C_Init+0x84>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4a80      	ldr	r2, [pc, #512]	; (8002a48 <HAL_I2C_Init+0x278>)
 8002848:	4293      	cmp	r3, r2
 800284a:	bf94      	ite	ls
 800284c:	2301      	movls	r3, #1
 800284e:	2300      	movhi	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	e006      	b.n	8002862 <HAL_I2C_Init+0x92>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4a7d      	ldr	r2, [pc, #500]	; (8002a4c <HAL_I2C_Init+0x27c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	bf94      	ite	ls
 800285c:	2301      	movls	r3, #1
 800285e:	2300      	movhi	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e0e7      	b.n	8002a3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4a78      	ldr	r2, [pc, #480]	; (8002a50 <HAL_I2C_Init+0x280>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	0c9b      	lsrs	r3, r3, #18
 8002874:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	430a      	orrs	r2, r1
 8002888:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4a6a      	ldr	r2, [pc, #424]	; (8002a44 <HAL_I2C_Init+0x274>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d802      	bhi.n	80028a4 <HAL_I2C_Init+0xd4>
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	3301      	adds	r3, #1
 80028a2:	e009      	b.n	80028b8 <HAL_I2C_Init+0xe8>
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028aa:	fb02 f303 	mul.w	r3, r2, r3
 80028ae:	4a69      	ldr	r2, [pc, #420]	; (8002a54 <HAL_I2C_Init+0x284>)
 80028b0:	fba2 2303 	umull	r2, r3, r2, r3
 80028b4:	099b      	lsrs	r3, r3, #6
 80028b6:	3301      	adds	r3, #1
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	430b      	orrs	r3, r1
 80028be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	495c      	ldr	r1, [pc, #368]	; (8002a44 <HAL_I2C_Init+0x274>)
 80028d4:	428b      	cmp	r3, r1
 80028d6:	d819      	bhi.n	800290c <HAL_I2C_Init+0x13c>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1e59      	subs	r1, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e6:	1c59      	adds	r1, r3, #1
 80028e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028ec:	400b      	ands	r3, r1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <HAL_I2C_Init+0x138>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1e59      	subs	r1, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002900:	3301      	adds	r3, #1
 8002902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002906:	e051      	b.n	80029ac <HAL_I2C_Init+0x1dc>
 8002908:	2304      	movs	r3, #4
 800290a:	e04f      	b.n	80029ac <HAL_I2C_Init+0x1dc>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d111      	bne.n	8002938 <HAL_I2C_Init+0x168>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1e58      	subs	r0, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	440b      	add	r3, r1
 8002922:	fbb0 f3f3 	udiv	r3, r0, r3
 8002926:	3301      	adds	r3, #1
 8002928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	e012      	b.n	800295e <HAL_I2C_Init+0x18e>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1e58      	subs	r0, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	0099      	lsls	r1, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	fbb0 f3f3 	udiv	r3, r0, r3
 800294e:	3301      	adds	r3, #1
 8002950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002954:	2b00      	cmp	r3, #0
 8002956:	bf0c      	ite	eq
 8002958:	2301      	moveq	r3, #1
 800295a:	2300      	movne	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_I2C_Init+0x196>
 8002962:	2301      	movs	r3, #1
 8002964:	e022      	b.n	80029ac <HAL_I2C_Init+0x1dc>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10e      	bne.n	800298c <HAL_I2C_Init+0x1bc>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1e58      	subs	r0, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6859      	ldr	r1, [r3, #4]
 8002976:	460b      	mov	r3, r1
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	440b      	add	r3, r1
 800297c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002980:	3301      	adds	r3, #1
 8002982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800298a:	e00f      	b.n	80029ac <HAL_I2C_Init+0x1dc>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1e58      	subs	r0, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6859      	ldr	r1, [r3, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	0099      	lsls	r1, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a2:	3301      	adds	r3, #1
 80029a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	6809      	ldr	r1, [r1, #0]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69da      	ldr	r2, [r3, #28]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6911      	ldr	r1, [r2, #16]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68d2      	ldr	r2, [r2, #12]
 80029e6:	4311      	orrs	r1, r2
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	430b      	orrs	r3, r1
 80029ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	000186a0 	.word	0x000186a0
 8002a48:	001e847f 	.word	0x001e847f
 8002a4c:	003d08ff 	.word	0x003d08ff
 8002a50:	431bde83 	.word	0x431bde83
 8002a54:	10624dd3 	.word	0x10624dd3

08002a58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	4608      	mov	r0, r1
 8002a62:	4611      	mov	r1, r2
 8002a64:	461a      	mov	r2, r3
 8002a66:	4603      	mov	r3, r0
 8002a68:	817b      	strh	r3, [r7, #10]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	813b      	strh	r3, [r7, #8]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a72:	f7ff fbff 	bl	8002274 <HAL_GetTick>
 8002a76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	f040 80d9 	bne.w	8002c38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	2319      	movs	r3, #25
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	496d      	ldr	r1, [pc, #436]	; (8002c44 <HAL_I2C_Mem_Write+0x1ec>)
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f971 	bl	8002d78 <I2C_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e0cc      	b.n	8002c3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_I2C_Mem_Write+0x56>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e0c5      	b.n	8002c3a <HAL_I2C_Mem_Write+0x1e2>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d007      	beq.n	8002ad4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ae2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2221      	movs	r2, #33	; 0x21
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2240      	movs	r2, #64	; 0x40
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a3a      	ldr	r2, [r7, #32]
 8002afe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4a4d      	ldr	r2, [pc, #308]	; (8002c48 <HAL_I2C_Mem_Write+0x1f0>)
 8002b14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b16:	88f8      	ldrh	r0, [r7, #6]
 8002b18:	893a      	ldrh	r2, [r7, #8]
 8002b1a:	8979      	ldrh	r1, [r7, #10]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	9301      	str	r3, [sp, #4]
 8002b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	4603      	mov	r3, r0
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 f890 	bl	8002c4c <I2C_RequestMemoryWrite>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d052      	beq.n	8002bd8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e081      	b.n	8002c3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f9f2 	bl	8002f24 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d107      	bne.n	8002b5e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e06b      	b.n	8002c3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	781a      	ldrb	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d11b      	bne.n	8002bd8 <HAL_I2C_Mem_Write+0x180>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d017      	beq.n	8002bd8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	781a      	ldrb	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1aa      	bne.n	8002b36 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 f9de 	bl	8002fa6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00d      	beq.n	8002c0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d107      	bne.n	8002c08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e016      	b.n	8002c3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e000      	b.n	8002c3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c38:	2302      	movs	r3, #2
  }
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	00100002 	.word	0x00100002
 8002c48:	ffff0000 	.word	0xffff0000

08002c4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	4608      	mov	r0, r1
 8002c56:	4611      	mov	r1, r2
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	817b      	strh	r3, [r7, #10]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	813b      	strh	r3, [r7, #8]
 8002c62:	4613      	mov	r3, r2
 8002c64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f878 	bl	8002d78 <I2C_WaitOnFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00d      	beq.n	8002caa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c9c:	d103      	bne.n	8002ca6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e05f      	b.n	8002d6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002caa:	897b      	ldrh	r3, [r7, #10]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	6a3a      	ldr	r2, [r7, #32]
 8002cbe:	492d      	ldr	r1, [pc, #180]	; (8002d74 <I2C_RequestMemoryWrite+0x128>)
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f8b0 	bl	8002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e04c      	b.n	8002d6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce8:	6a39      	ldr	r1, [r7, #32]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f91a 	bl	8002f24 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00d      	beq.n	8002d12 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d107      	bne.n	8002d0e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e02b      	b.n	8002d6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d105      	bne.n	8002d24 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d18:	893b      	ldrh	r3, [r7, #8]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	611a      	str	r2, [r3, #16]
 8002d22:	e021      	b.n	8002d68 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d24:	893b      	ldrh	r3, [r7, #8]
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d34:	6a39      	ldr	r1, [r7, #32]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f8f4 	bl	8002f24 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00d      	beq.n	8002d5e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d107      	bne.n	8002d5a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e005      	b.n	8002d6a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d5e:	893b      	ldrh	r3, [r7, #8]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	00010002 	.word	0x00010002

08002d78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	4613      	mov	r3, r2
 8002d86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d88:	e025      	b.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d90:	d021      	beq.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d92:	f7ff fa6f 	bl	8002274 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d302      	bcc.n	8002da8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d116      	bne.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f043 0220 	orr.w	r2, r3, #32
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e023      	b.n	8002e1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	0c1b      	lsrs	r3, r3, #16
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d10d      	bne.n	8002dfc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	43da      	mvns	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4013      	ands	r3, r2
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	bf0c      	ite	eq
 8002df2:	2301      	moveq	r3, #1
 8002df4:	2300      	movne	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	e00c      	b.n	8002e16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	43da      	mvns	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4013      	ands	r3, r2
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	bf0c      	ite	eq
 8002e0e:	2301      	moveq	r3, #1
 8002e10:	2300      	movne	r3, #0
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d0b6      	beq.n	8002d8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e34:	e051      	b.n	8002eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e44:	d123      	bne.n	8002e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f043 0204 	orr.w	r2, r3, #4
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e046      	b.n	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d021      	beq.n	8002eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e96:	f7ff f9ed 	bl	8002274 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d302      	bcc.n	8002eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d116      	bne.n	8002eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f043 0220 	orr.w	r2, r3, #32
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e020      	b.n	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	0c1b      	lsrs	r3, r3, #16
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d10c      	bne.n	8002efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	43da      	mvns	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	bf14      	ite	ne
 8002ef6:	2301      	movne	r3, #1
 8002ef8:	2300      	moveq	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	e00b      	b.n	8002f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	43da      	mvns	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf14      	ite	ne
 8002f10:	2301      	movne	r3, #1
 8002f12:	2300      	moveq	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d18d      	bne.n	8002e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f30:	e02d      	b.n	8002f8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f878 	bl	8003028 <I2C_IsAcknowledgeFailed>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e02d      	b.n	8002f9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d021      	beq.n	8002f8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4a:	f7ff f993 	bl	8002274 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d302      	bcc.n	8002f60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d116      	bne.n	8002f8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f043 0220 	orr.w	r2, r3, #32
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e007      	b.n	8002f9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f98:	2b80      	cmp	r3, #128	; 0x80
 8002f9a:	d1ca      	bne.n	8002f32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fb2:	e02d      	b.n	8003010 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f837 	bl	8003028 <I2C_IsAcknowledgeFailed>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e02d      	b.n	8003020 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fca:	d021      	beq.n	8003010 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fcc:	f7ff f952 	bl	8002274 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d302      	bcc.n	8002fe2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d116      	bne.n	8003010 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	f043 0220 	orr.w	r2, r3, #32
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e007      	b.n	8003020 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b04      	cmp	r3, #4
 800301c:	d1ca      	bne.n	8002fb4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303e:	d11b      	bne.n	8003078 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003048:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f043 0204 	orr.w	r2, r3, #4
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e272      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 8087 	beq.w	80031b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030a4:	4b92      	ldr	r3, [pc, #584]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d00c      	beq.n	80030ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030b0:	4b8f      	ldr	r3, [pc, #572]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d112      	bne.n	80030e2 <HAL_RCC_OscConfig+0x5e>
 80030bc:	4b8c      	ldr	r3, [pc, #560]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c8:	d10b      	bne.n	80030e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ca:	4b89      	ldr	r3, [pc, #548]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d06c      	beq.n	80031b0 <HAL_RCC_OscConfig+0x12c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d168      	bne.n	80031b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e24c      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ea:	d106      	bne.n	80030fa <HAL_RCC_OscConfig+0x76>
 80030ec:	4b80      	ldr	r3, [pc, #512]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a7f      	ldr	r2, [pc, #508]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80030f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	e02e      	b.n	8003158 <HAL_RCC_OscConfig+0xd4>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0x98>
 8003102:	4b7b      	ldr	r3, [pc, #492]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a7a      	ldr	r2, [pc, #488]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	4b78      	ldr	r3, [pc, #480]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a77      	ldr	r2, [pc, #476]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e01d      	b.n	8003158 <HAL_RCC_OscConfig+0xd4>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003124:	d10c      	bne.n	8003140 <HAL_RCC_OscConfig+0xbc>
 8003126:	4b72      	ldr	r3, [pc, #456]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a71      	ldr	r2, [pc, #452]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 800312c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	4b6f      	ldr	r3, [pc, #444]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a6e      	ldr	r2, [pc, #440]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e00b      	b.n	8003158 <HAL_RCC_OscConfig+0xd4>
 8003140:	4b6b      	ldr	r3, [pc, #428]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a6a      	ldr	r2, [pc, #424]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	4b68      	ldr	r3, [pc, #416]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a67      	ldr	r2, [pc, #412]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003156:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d013      	beq.n	8003188 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7ff f888 	bl	8002274 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003168:	f7ff f884 	bl	8002274 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	; 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e200      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	4b5d      	ldr	r3, [pc, #372]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0xe4>
 8003186:	e014      	b.n	80031b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7ff f874 	bl	8002274 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003190:	f7ff f870 	bl	8002274 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	; 0x64
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e1ec      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a2:	4b53      	ldr	r3, [pc, #332]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x10c>
 80031ae:	e000      	b.n	80031b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d063      	beq.n	8003286 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031be:	4b4c      	ldr	r3, [pc, #304]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00b      	beq.n	80031e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031ca:	4b49      	ldr	r3, [pc, #292]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d11c      	bne.n	8003210 <HAL_RCC_OscConfig+0x18c>
 80031d6:	4b46      	ldr	r3, [pc, #280]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d116      	bne.n	8003210 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e2:	4b43      	ldr	r3, [pc, #268]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d005      	beq.n	80031fa <HAL_RCC_OscConfig+0x176>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d001      	beq.n	80031fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e1c0      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fa:	4b3d      	ldr	r3, [pc, #244]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4939      	ldr	r1, [pc, #228]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 800320a:	4313      	orrs	r3, r2
 800320c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320e:	e03a      	b.n	8003286 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d020      	beq.n	800325a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003218:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <HAL_RCC_OscConfig+0x270>)
 800321a:	2201      	movs	r2, #1
 800321c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321e:	f7ff f829 	bl	8002274 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003226:	f7ff f825 	bl	8002274 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e1a1      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003238:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0f0      	beq.n	8003226 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003244:	4b2a      	ldr	r3, [pc, #168]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4927      	ldr	r1, [pc, #156]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003254:	4313      	orrs	r3, r2
 8003256:	600b      	str	r3, [r1, #0]
 8003258:	e015      	b.n	8003286 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800325a:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <HAL_RCC_OscConfig+0x270>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7ff f808 	bl	8002274 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003268:	f7ff f804 	bl	8002274 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e180      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800327a:	4b1d      	ldr	r3, [pc, #116]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d03a      	beq.n	8003308 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d019      	beq.n	80032ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800329a:	4b17      	ldr	r3, [pc, #92]	; (80032f8 <HAL_RCC_OscConfig+0x274>)
 800329c:	2201      	movs	r2, #1
 800329e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a0:	f7fe ffe8 	bl	8002274 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a8:	f7fe ffe4 	bl	8002274 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e160      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ba:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032c6:	2001      	movs	r0, #1
 80032c8:	f000 fad8 	bl	800387c <RCC_Delay>
 80032cc:	e01c      	b.n	8003308 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ce:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <HAL_RCC_OscConfig+0x274>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d4:	f7fe ffce 	bl	8002274 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032da:	e00f      	b.n	80032fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032dc:	f7fe ffca 	bl	8002274 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d908      	bls.n	80032fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e146      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
 80032ee:	bf00      	nop
 80032f0:	40021000 	.word	0x40021000
 80032f4:	42420000 	.word	0x42420000
 80032f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032fc:	4b92      	ldr	r3, [pc, #584]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e9      	bne.n	80032dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80a6 	beq.w	8003462 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003316:	2300      	movs	r3, #0
 8003318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331a:	4b8b      	ldr	r3, [pc, #556]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10d      	bne.n	8003342 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	4b88      	ldr	r3, [pc, #544]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	4a87      	ldr	r2, [pc, #540]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003330:	61d3      	str	r3, [r2, #28]
 8003332:	4b85      	ldr	r3, [pc, #532]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800333e:	2301      	movs	r3, #1
 8003340:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003342:	4b82      	ldr	r3, [pc, #520]	; (800354c <HAL_RCC_OscConfig+0x4c8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d118      	bne.n	8003380 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800334e:	4b7f      	ldr	r3, [pc, #508]	; (800354c <HAL_RCC_OscConfig+0x4c8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a7e      	ldr	r2, [pc, #504]	; (800354c <HAL_RCC_OscConfig+0x4c8>)
 8003354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800335a:	f7fe ff8b 	bl	8002274 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003362:	f7fe ff87 	bl	8002274 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b64      	cmp	r3, #100	; 0x64
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e103      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003374:	4b75      	ldr	r3, [pc, #468]	; (800354c <HAL_RCC_OscConfig+0x4c8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f0      	beq.n	8003362 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d106      	bne.n	8003396 <HAL_RCC_OscConfig+0x312>
 8003388:	4b6f      	ldr	r3, [pc, #444]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4a6e      	ldr	r2, [pc, #440]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6213      	str	r3, [r2, #32]
 8003394:	e02d      	b.n	80033f2 <HAL_RCC_OscConfig+0x36e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x334>
 800339e:	4b6a      	ldr	r3, [pc, #424]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	4a69      	ldr	r2, [pc, #420]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	f023 0301 	bic.w	r3, r3, #1
 80033a8:	6213      	str	r3, [r2, #32]
 80033aa:	4b67      	ldr	r3, [pc, #412]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	4a66      	ldr	r2, [pc, #408]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	f023 0304 	bic.w	r3, r3, #4
 80033b4:	6213      	str	r3, [r2, #32]
 80033b6:	e01c      	b.n	80033f2 <HAL_RCC_OscConfig+0x36e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2b05      	cmp	r3, #5
 80033be:	d10c      	bne.n	80033da <HAL_RCC_OscConfig+0x356>
 80033c0:	4b61      	ldr	r3, [pc, #388]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	4a60      	ldr	r2, [pc, #384]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033c6:	f043 0304 	orr.w	r3, r3, #4
 80033ca:	6213      	str	r3, [r2, #32]
 80033cc:	4b5e      	ldr	r3, [pc, #376]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	4a5d      	ldr	r2, [pc, #372]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	6213      	str	r3, [r2, #32]
 80033d8:	e00b      	b.n	80033f2 <HAL_RCC_OscConfig+0x36e>
 80033da:	4b5b      	ldr	r3, [pc, #364]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	4a5a      	ldr	r2, [pc, #360]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	6213      	str	r3, [r2, #32]
 80033e6:	4b58      	ldr	r3, [pc, #352]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4a57      	ldr	r2, [pc, #348]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	f023 0304 	bic.w	r3, r3, #4
 80033f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d015      	beq.n	8003426 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fa:	f7fe ff3b 	bl	8002274 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003400:	e00a      	b.n	8003418 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fe ff37 	bl	8002274 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e0b1      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003418:	4b4b      	ldr	r3, [pc, #300]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0ee      	beq.n	8003402 <HAL_RCC_OscConfig+0x37e>
 8003424:	e014      	b.n	8003450 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003426:	f7fe ff25 	bl	8002274 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342c:	e00a      	b.n	8003444 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342e:	f7fe ff21 	bl	8002274 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f241 3288 	movw	r2, #5000	; 0x1388
 800343c:	4293      	cmp	r3, r2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e09b      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003444:	4b40      	ldr	r3, [pc, #256]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1ee      	bne.n	800342e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003450:	7dfb      	ldrb	r3, [r7, #23]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d105      	bne.n	8003462 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003456:	4b3c      	ldr	r3, [pc, #240]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	4a3b      	ldr	r2, [pc, #236]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 800345c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003460:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8087 	beq.w	800357a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800346c:	4b36      	ldr	r3, [pc, #216]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 030c 	and.w	r3, r3, #12
 8003474:	2b08      	cmp	r3, #8
 8003476:	d061      	beq.n	800353c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d146      	bne.n	800350e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003480:	4b33      	ldr	r3, [pc, #204]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003486:	f7fe fef5 	bl	8002274 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348e:	f7fe fef1 	bl	8002274 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e06d      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a0:	4b29      	ldr	r3, [pc, #164]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f0      	bne.n	800348e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b4:	d108      	bne.n	80034c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034b6:	4b24      	ldr	r3, [pc, #144]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	4921      	ldr	r1, [pc, #132]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c8:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a19      	ldr	r1, [r3, #32]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	430b      	orrs	r3, r1
 80034da:	491b      	ldr	r1, [pc, #108]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e0:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7fe fec5 	bl	8002274 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ee:	f7fe fec1 	bl	8002274 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e03d      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003500:	4b11      	ldr	r3, [pc, #68]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x46a>
 800350c:	e035      	b.n	800357a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fe feae 	bl	8002274 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351c:	f7fe feaa 	bl	8002274 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e026      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x498>
 800353a:	e01e      	b.n	800357a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d107      	bne.n	8003554 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e019      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
 8003548:	40021000 	.word	0x40021000
 800354c:	40007000 	.word	0x40007000
 8003550:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_RCC_OscConfig+0x500>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	429a      	cmp	r2, r3
 8003566:	d106      	bne.n	8003576 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003572:	429a      	cmp	r2, r3
 8003574:	d001      	beq.n	800357a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40021000 	.word	0x40021000

08003588 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0d0      	b.n	800373e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800359c:	4b6a      	ldr	r3, [pc, #424]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d910      	bls.n	80035cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b67      	ldr	r3, [pc, #412]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f023 0207 	bic.w	r2, r3, #7
 80035b2:	4965      	ldr	r1, [pc, #404]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b63      	ldr	r3, [pc, #396]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0b8      	b.n	800373e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d020      	beq.n	800361a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e4:	4b59      	ldr	r3, [pc, #356]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	4a58      	ldr	r2, [pc, #352]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 80035ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035fc:	4b53      	ldr	r3, [pc, #332]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	4a52      	ldr	r2, [pc, #328]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003602:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003606:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003608:	4b50      	ldr	r3, [pc, #320]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	494d      	ldr	r1, [pc, #308]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003616:	4313      	orrs	r3, r2
 8003618:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d040      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d107      	bne.n	800363e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	4b47      	ldr	r3, [pc, #284]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d115      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e07f      	b.n	800373e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003646:	4b41      	ldr	r3, [pc, #260]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e073      	b.n	800373e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003656:	4b3d      	ldr	r3, [pc, #244]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e06b      	b.n	800373e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003666:	4b39      	ldr	r3, [pc, #228]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f023 0203 	bic.w	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	4936      	ldr	r1, [pc, #216]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	4313      	orrs	r3, r2
 8003676:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003678:	f7fe fdfc 	bl	8002274 <HAL_GetTick>
 800367c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	e00a      	b.n	8003696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003680:	f7fe fdf8 	bl	8002274 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f241 3288 	movw	r2, #5000	; 0x1388
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e053      	b.n	800373e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	4b2d      	ldr	r3, [pc, #180]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 020c 	and.w	r2, r3, #12
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d1eb      	bne.n	8003680 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036a8:	4b27      	ldr	r3, [pc, #156]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d210      	bcs.n	80036d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	4b24      	ldr	r3, [pc, #144]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 0207 	bic.w	r2, r3, #7
 80036be:	4922      	ldr	r1, [pc, #136]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c6:	4b20      	ldr	r3, [pc, #128]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e032      	b.n	800373e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e4:	4b19      	ldr	r3, [pc, #100]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4916      	ldr	r1, [pc, #88]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003702:	4b12      	ldr	r3, [pc, #72]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	490e      	ldr	r1, [pc, #56]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	4313      	orrs	r3, r2
 8003714:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003716:	f000 f821 	bl	800375c <HAL_RCC_GetSysClockFreq>
 800371a:	4602      	mov	r2, r0
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	490a      	ldr	r1, [pc, #40]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 8003728:	5ccb      	ldrb	r3, [r1, r3]
 800372a:	fa22 f303 	lsr.w	r3, r2, r3
 800372e:	4a09      	ldr	r2, [pc, #36]	; (8003754 <HAL_RCC_ClockConfig+0x1cc>)
 8003730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003732:	4b09      	ldr	r3, [pc, #36]	; (8003758 <HAL_RCC_ClockConfig+0x1d0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fe fd5a 	bl	80021f0 <HAL_InitTick>

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40022000 	.word	0x40022000
 800374c:	40021000 	.word	0x40021000
 8003750:	08007394 	.word	0x08007394
 8003754:	20000014 	.word	0x20000014
 8003758:	20000018 	.word	0x20000018

0800375c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800375c:	b490      	push	{r4, r7}
 800375e:	b08a      	sub	sp, #40	; 0x28
 8003760:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003762:	4b29      	ldr	r3, [pc, #164]	; (8003808 <HAL_RCC_GetSysClockFreq+0xac>)
 8003764:	1d3c      	adds	r4, r7, #4
 8003766:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003768:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800376c:	f240 2301 	movw	r3, #513	; 0x201
 8003770:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	2300      	movs	r3, #0
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003786:	4b21      	ldr	r3, [pc, #132]	; (800380c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b04      	cmp	r3, #4
 8003794:	d002      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0x40>
 8003796:	2b08      	cmp	r3, #8
 8003798:	d003      	beq.n	80037a2 <HAL_RCC_GetSysClockFreq+0x46>
 800379a:	e02b      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800379c:	4b1c      	ldr	r3, [pc, #112]	; (8003810 <HAL_RCC_GetSysClockFreq+0xb4>)
 800379e:	623b      	str	r3, [r7, #32]
      break;
 80037a0:	e02b      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	0c9b      	lsrs	r3, r3, #18
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	3328      	adds	r3, #40	; 0x28
 80037ac:	443b      	add	r3, r7
 80037ae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037b2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d012      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037be:	4b13      	ldr	r3, [pc, #76]	; (800380c <HAL_RCC_GetSysClockFreq+0xb0>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	0c5b      	lsrs	r3, r3, #17
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	3328      	adds	r3, #40	; 0x28
 80037ca:	443b      	add	r3, r7
 80037cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	4a0e      	ldr	r2, [pc, #56]	; (8003810 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037d6:	fb03 f202 	mul.w	r2, r3, r2
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
 80037e2:	e004      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	4a0b      	ldr	r2, [pc, #44]	; (8003814 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037e8:	fb02 f303 	mul.w	r3, r2, r3
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	623b      	str	r3, [r7, #32]
      break;
 80037f2:	e002      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037f6:	623b      	str	r3, [r7, #32]
      break;
 80037f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037fa:	6a3b      	ldr	r3, [r7, #32]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3728      	adds	r7, #40	; 0x28
 8003800:	46bd      	mov	sp, r7
 8003802:	bc90      	pop	{r4, r7}
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	08006c18 	.word	0x08006c18
 800380c:	40021000 	.word	0x40021000
 8003810:	007a1200 	.word	0x007a1200
 8003814:	003d0900 	.word	0x003d0900

08003818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800381c:	4b02      	ldr	r3, [pc, #8]	; (8003828 <HAL_RCC_GetHCLKFreq+0x10>)
 800381e:	681b      	ldr	r3, [r3, #0]
}
 8003820:	4618      	mov	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	20000014 	.word	0x20000014

0800382c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003830:	f7ff fff2 	bl	8003818 <HAL_RCC_GetHCLKFreq>
 8003834:	4602      	mov	r2, r0
 8003836:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	0a1b      	lsrs	r3, r3, #8
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	4903      	ldr	r1, [pc, #12]	; (8003850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003842:	5ccb      	ldrb	r3, [r1, r3]
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40021000 	.word	0x40021000
 8003850:	080073a4 	.word	0x080073a4

08003854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003858:	f7ff ffde 	bl	8003818 <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b05      	ldr	r3, [pc, #20]	; (8003874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	0adb      	lsrs	r3, r3, #11
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4903      	ldr	r1, [pc, #12]	; (8003878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003870:	4618      	mov	r0, r3
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000
 8003878:	080073a4 	.word	0x080073a4

0800387c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003884:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <RCC_Delay+0x34>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a0a      	ldr	r2, [pc, #40]	; (80038b4 <RCC_Delay+0x38>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	0a5b      	lsrs	r3, r3, #9
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	fb02 f303 	mul.w	r3, r2, r3
 8003896:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003898:	bf00      	nop
  }
  while (Delay --);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1e5a      	subs	r2, r3, #1
 800389e:	60fa      	str	r2, [r7, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1f9      	bne.n	8003898 <RCC_Delay+0x1c>
}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr
 80038b0:	20000014 	.word	0x20000014
 80038b4:	10624dd3 	.word	0x10624dd3

080038b8 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e047      	b.n	800395a <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fe fb1c 	bl	8001f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2224      	movs	r2, #36	; 0x24
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f9af 	bl	8003c60 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003910:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695a      	ldr	r2, [r3, #20]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003920:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695a      	ldr	r2, [r3, #20]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0208 	orr.w	r2, r2, #8
 8003930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b08a      	sub	sp, #40	; 0x28
 8003966:	af02      	add	r7, sp, #8
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	603b      	str	r3, [r7, #0]
 800396e:	4613      	mov	r3, r2
 8003970:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b20      	cmp	r3, #32
 8003980:	d17c      	bne.n	8003a7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <HAL_UART_Transmit+0x2c>
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e075      	b.n	8003a7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_UART_Transmit+0x3e>
 800399c:	2302      	movs	r3, #2
 800399e:	e06e      	b.n	8003a7e <HAL_UART_Transmit+0x11c>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2221      	movs	r2, #33	; 0x21
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039b6:	f7fe fc5d 	bl	8002274 <HAL_GetTick>
 80039ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	88fa      	ldrh	r2, [r7, #6]
 80039c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	88fa      	ldrh	r2, [r7, #6]
 80039c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d0:	d108      	bne.n	80039e4 <HAL_UART_Transmit+0x82>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d104      	bne.n	80039e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	e003      	b.n	80039ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80039f4:	e02a      	b.n	8003a4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2200      	movs	r2, #0
 80039fe:	2180      	movs	r1, #128	; 0x80
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f8e2 	bl	8003bca <UART_WaitOnFlagUntilTimeout>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e036      	b.n	8003a7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10b      	bne.n	8003a2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	3302      	adds	r3, #2
 8003a2a:	61bb      	str	r3, [r7, #24]
 8003a2c:	e007      	b.n	8003a3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	781a      	ldrb	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1cf      	bne.n	80039f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2140      	movs	r1, #64	; 0x40
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 f8b2 	bl	8003bca <UART_WaitOnFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e006      	b.n	8003a7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e000      	b.n	8003a7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a7c:	2302      	movs	r3, #2
  }
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3720      	adds	r7, #32
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b08a      	sub	sp, #40	; 0x28
 8003a8a:	af02      	add	r7, sp, #8
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	603b      	str	r3, [r7, #0]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	f040 808c 	bne.w	8003bc0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_UART_Receive+0x2e>
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e084      	b.n	8003bc2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_UART_Receive+0x40>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e07d      	b.n	8003bc2 <HAL_UART_Receive+0x13c>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2222      	movs	r2, #34	; 0x22
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ae2:	f7fe fbc7 	bl	8002274 <HAL_GetTick>
 8003ae6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	88fa      	ldrh	r2, [r7, #6]
 8003aec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	88fa      	ldrh	r2, [r7, #6]
 8003af2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afc:	d108      	bne.n	8003b10 <HAL_UART_Receive+0x8a>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d104      	bne.n	8003b10 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	e003      	b.n	8003b18 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003b20:	e043      	b.n	8003baa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2120      	movs	r1, #32
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f84c 	bl	8003bca <UART_WaitOnFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e042      	b.n	8003bc2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10c      	bne.n	8003b5c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	3302      	adds	r3, #2
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	e01f      	b.n	8003b9c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b64:	d007      	beq.n	8003b76 <HAL_UART_Receive+0xf0>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10a      	bne.n	8003b84 <HAL_UART_Receive+0xfe>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	e008      	b.n	8003b96 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1b6      	bne.n	8003b22 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	e000      	b.n	8003bc2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003bc0:	2302      	movs	r3, #2
  }
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3720      	adds	r7, #32
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	603b      	str	r3, [r7, #0]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bda:	e02c      	b.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be2:	d028      	beq.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d007      	beq.n	8003bfa <UART_WaitOnFlagUntilTimeout+0x30>
 8003bea:	f7fe fb43 	bl	8002274 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d21d      	bcs.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c08:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e00f      	b.n	8003c56 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	bf0c      	ite	eq
 8003c46:	2301      	moveq	r3, #1
 8003c48:	2300      	movne	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d0c3      	beq.n	8003bdc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c9a:	f023 030c 	bic.w	r3, r3, #12
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a2c      	ldr	r2, [pc, #176]	; (8003d74 <UART_SetConfig+0x114>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d103      	bne.n	8003cd0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003cc8:	f7ff fdc4 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	e002      	b.n	8003cd6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cd0:	f7ff fdac 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 8003cd4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	009a      	lsls	r2, r3, #2
 8003ce0:	441a      	add	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cec:	4a22      	ldr	r2, [pc, #136]	; (8003d78 <UART_SetConfig+0x118>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	0119      	lsls	r1, r3, #4
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009a      	lsls	r2, r3, #2
 8003d00:	441a      	add	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d0c:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <UART_SetConfig+0x118>)
 8003d0e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	2064      	movs	r0, #100	; 0x64
 8003d16:	fb00 f303 	mul.w	r3, r0, r3
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	3332      	adds	r3, #50	; 0x32
 8003d20:	4a15      	ldr	r2, [pc, #84]	; (8003d78 <UART_SetConfig+0x118>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d2c:	4419      	add	r1, r3
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	009a      	lsls	r2, r3, #2
 8003d38:	441a      	add	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d44:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <UART_SetConfig+0x118>)
 8003d46:	fba3 0302 	umull	r0, r3, r3, r2
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	2064      	movs	r0, #100	; 0x64
 8003d4e:	fb00 f303 	mul.w	r3, r0, r3
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	3332      	adds	r3, #50	; 0x32
 8003d58:	4a07      	ldr	r2, [pc, #28]	; (8003d78 <UART_SetConfig+0x118>)
 8003d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	f003 020f 	and.w	r2, r3, #15
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	440a      	add	r2, r1
 8003d6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d6c:	bf00      	nop
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40013800 	.word	0x40013800
 8003d78:	51eb851f 	.word	0x51eb851f

08003d7c <__errno>:
 8003d7c:	4b01      	ldr	r3, [pc, #4]	; (8003d84 <__errno+0x8>)
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	20000020 	.word	0x20000020

08003d88 <__libc_init_array>:
 8003d88:	b570      	push	{r4, r5, r6, lr}
 8003d8a:	2600      	movs	r6, #0
 8003d8c:	4d0c      	ldr	r5, [pc, #48]	; (8003dc0 <__libc_init_array+0x38>)
 8003d8e:	4c0d      	ldr	r4, [pc, #52]	; (8003dc4 <__libc_init_array+0x3c>)
 8003d90:	1b64      	subs	r4, r4, r5
 8003d92:	10a4      	asrs	r4, r4, #2
 8003d94:	42a6      	cmp	r6, r4
 8003d96:	d109      	bne.n	8003dac <__libc_init_array+0x24>
 8003d98:	f002 fefa 	bl	8006b90 <_init>
 8003d9c:	2600      	movs	r6, #0
 8003d9e:	4d0a      	ldr	r5, [pc, #40]	; (8003dc8 <__libc_init_array+0x40>)
 8003da0:	4c0a      	ldr	r4, [pc, #40]	; (8003dcc <__libc_init_array+0x44>)
 8003da2:	1b64      	subs	r4, r4, r5
 8003da4:	10a4      	asrs	r4, r4, #2
 8003da6:	42a6      	cmp	r6, r4
 8003da8:	d105      	bne.n	8003db6 <__libc_init_array+0x2e>
 8003daa:	bd70      	pop	{r4, r5, r6, pc}
 8003dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003db0:	4798      	blx	r3
 8003db2:	3601      	adds	r6, #1
 8003db4:	e7ee      	b.n	8003d94 <__libc_init_array+0xc>
 8003db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dba:	4798      	blx	r3
 8003dbc:	3601      	adds	r6, #1
 8003dbe:	e7f2      	b.n	8003da6 <__libc_init_array+0x1e>
 8003dc0:	08007784 	.word	0x08007784
 8003dc4:	08007784 	.word	0x08007784
 8003dc8:	08007784 	.word	0x08007784
 8003dcc:	08007788 	.word	0x08007788

08003dd0 <memcpy>:
 8003dd0:	440a      	add	r2, r1
 8003dd2:	4291      	cmp	r1, r2
 8003dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003dd8:	d100      	bne.n	8003ddc <memcpy+0xc>
 8003dda:	4770      	bx	lr
 8003ddc:	b510      	push	{r4, lr}
 8003dde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003de2:	4291      	cmp	r1, r2
 8003de4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003de8:	d1f9      	bne.n	8003dde <memcpy+0xe>
 8003dea:	bd10      	pop	{r4, pc}

08003dec <memmove>:
 8003dec:	4288      	cmp	r0, r1
 8003dee:	b510      	push	{r4, lr}
 8003df0:	eb01 0402 	add.w	r4, r1, r2
 8003df4:	d902      	bls.n	8003dfc <memmove+0x10>
 8003df6:	4284      	cmp	r4, r0
 8003df8:	4623      	mov	r3, r4
 8003dfa:	d807      	bhi.n	8003e0c <memmove+0x20>
 8003dfc:	1e43      	subs	r3, r0, #1
 8003dfe:	42a1      	cmp	r1, r4
 8003e00:	d008      	beq.n	8003e14 <memmove+0x28>
 8003e02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e0a:	e7f8      	b.n	8003dfe <memmove+0x12>
 8003e0c:	4601      	mov	r1, r0
 8003e0e:	4402      	add	r2, r0
 8003e10:	428a      	cmp	r2, r1
 8003e12:	d100      	bne.n	8003e16 <memmove+0x2a>
 8003e14:	bd10      	pop	{r4, pc}
 8003e16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e1e:	e7f7      	b.n	8003e10 <memmove+0x24>

08003e20 <memset>:
 8003e20:	4603      	mov	r3, r0
 8003e22:	4402      	add	r2, r0
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d100      	bne.n	8003e2a <memset+0xa>
 8003e28:	4770      	bx	lr
 8003e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e2e:	e7f9      	b.n	8003e24 <memset+0x4>

08003e30 <__cvt>:
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e36:	461f      	mov	r7, r3
 8003e38:	bfbb      	ittet	lt
 8003e3a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003e3e:	461f      	movlt	r7, r3
 8003e40:	2300      	movge	r3, #0
 8003e42:	232d      	movlt	r3, #45	; 0x2d
 8003e44:	b088      	sub	sp, #32
 8003e46:	4614      	mov	r4, r2
 8003e48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003e4a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003e4c:	7013      	strb	r3, [r2, #0]
 8003e4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003e50:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003e54:	f023 0820 	bic.w	r8, r3, #32
 8003e58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e5c:	d005      	beq.n	8003e6a <__cvt+0x3a>
 8003e5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003e62:	d100      	bne.n	8003e66 <__cvt+0x36>
 8003e64:	3501      	adds	r5, #1
 8003e66:	2302      	movs	r3, #2
 8003e68:	e000      	b.n	8003e6c <__cvt+0x3c>
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	aa07      	add	r2, sp, #28
 8003e6e:	9204      	str	r2, [sp, #16]
 8003e70:	aa06      	add	r2, sp, #24
 8003e72:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003e76:	e9cd 3500 	strd	r3, r5, [sp]
 8003e7a:	4622      	mov	r2, r4
 8003e7c:	463b      	mov	r3, r7
 8003e7e:	f000 fce3 	bl	8004848 <_dtoa_r>
 8003e82:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003e86:	4606      	mov	r6, r0
 8003e88:	d102      	bne.n	8003e90 <__cvt+0x60>
 8003e8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e8c:	07db      	lsls	r3, r3, #31
 8003e8e:	d522      	bpl.n	8003ed6 <__cvt+0xa6>
 8003e90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e94:	eb06 0905 	add.w	r9, r6, r5
 8003e98:	d110      	bne.n	8003ebc <__cvt+0x8c>
 8003e9a:	7833      	ldrb	r3, [r6, #0]
 8003e9c:	2b30      	cmp	r3, #48	; 0x30
 8003e9e:	d10a      	bne.n	8003eb6 <__cvt+0x86>
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	4639      	mov	r1, r7
 8003ea8:	f7fc fd7e 	bl	80009a8 <__aeabi_dcmpeq>
 8003eac:	b918      	cbnz	r0, 8003eb6 <__cvt+0x86>
 8003eae:	f1c5 0501 	rsb	r5, r5, #1
 8003eb2:	f8ca 5000 	str.w	r5, [sl]
 8003eb6:	f8da 3000 	ldr.w	r3, [sl]
 8003eba:	4499      	add	r9, r3
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	4639      	mov	r1, r7
 8003ec4:	f7fc fd70 	bl	80009a8 <__aeabi_dcmpeq>
 8003ec8:	b108      	cbz	r0, 8003ece <__cvt+0x9e>
 8003eca:	f8cd 901c 	str.w	r9, [sp, #28]
 8003ece:	2230      	movs	r2, #48	; 0x30
 8003ed0:	9b07      	ldr	r3, [sp, #28]
 8003ed2:	454b      	cmp	r3, r9
 8003ed4:	d307      	bcc.n	8003ee6 <__cvt+0xb6>
 8003ed6:	4630      	mov	r0, r6
 8003ed8:	9b07      	ldr	r3, [sp, #28]
 8003eda:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003edc:	1b9b      	subs	r3, r3, r6
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	b008      	add	sp, #32
 8003ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee6:	1c59      	adds	r1, r3, #1
 8003ee8:	9107      	str	r1, [sp, #28]
 8003eea:	701a      	strb	r2, [r3, #0]
 8003eec:	e7f0      	b.n	8003ed0 <__cvt+0xa0>

08003eee <__exponent>:
 8003eee:	4603      	mov	r3, r0
 8003ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ef2:	2900      	cmp	r1, #0
 8003ef4:	f803 2b02 	strb.w	r2, [r3], #2
 8003ef8:	bfb6      	itet	lt
 8003efa:	222d      	movlt	r2, #45	; 0x2d
 8003efc:	222b      	movge	r2, #43	; 0x2b
 8003efe:	4249      	neglt	r1, r1
 8003f00:	2909      	cmp	r1, #9
 8003f02:	7042      	strb	r2, [r0, #1]
 8003f04:	dd2b      	ble.n	8003f5e <__exponent+0x70>
 8003f06:	f10d 0407 	add.w	r4, sp, #7
 8003f0a:	46a4      	mov	ip, r4
 8003f0c:	270a      	movs	r7, #10
 8003f0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003f12:	460a      	mov	r2, r1
 8003f14:	46a6      	mov	lr, r4
 8003f16:	fb07 1516 	mls	r5, r7, r6, r1
 8003f1a:	2a63      	cmp	r2, #99	; 0x63
 8003f1c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003f20:	4631      	mov	r1, r6
 8003f22:	f104 34ff 	add.w	r4, r4, #4294967295
 8003f26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003f2a:	dcf0      	bgt.n	8003f0e <__exponent+0x20>
 8003f2c:	3130      	adds	r1, #48	; 0x30
 8003f2e:	f1ae 0502 	sub.w	r5, lr, #2
 8003f32:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003f36:	4629      	mov	r1, r5
 8003f38:	1c44      	adds	r4, r0, #1
 8003f3a:	4561      	cmp	r1, ip
 8003f3c:	d30a      	bcc.n	8003f54 <__exponent+0x66>
 8003f3e:	f10d 0209 	add.w	r2, sp, #9
 8003f42:	eba2 020e 	sub.w	r2, r2, lr
 8003f46:	4565      	cmp	r5, ip
 8003f48:	bf88      	it	hi
 8003f4a:	2200      	movhi	r2, #0
 8003f4c:	4413      	add	r3, r2
 8003f4e:	1a18      	subs	r0, r3, r0
 8003f50:	b003      	add	sp, #12
 8003f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f58:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003f5c:	e7ed      	b.n	8003f3a <__exponent+0x4c>
 8003f5e:	2330      	movs	r3, #48	; 0x30
 8003f60:	3130      	adds	r1, #48	; 0x30
 8003f62:	7083      	strb	r3, [r0, #2]
 8003f64:	70c1      	strb	r1, [r0, #3]
 8003f66:	1d03      	adds	r3, r0, #4
 8003f68:	e7f1      	b.n	8003f4e <__exponent+0x60>
	...

08003f6c <_printf_float>:
 8003f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f70:	b091      	sub	sp, #68	; 0x44
 8003f72:	460c      	mov	r4, r1
 8003f74:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003f78:	4616      	mov	r6, r2
 8003f7a:	461f      	mov	r7, r3
 8003f7c:	4605      	mov	r5, r0
 8003f7e:	f001 fa51 	bl	8005424 <_localeconv_r>
 8003f82:	6803      	ldr	r3, [r0, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	9309      	str	r3, [sp, #36]	; 0x24
 8003f88:	f7fc f8e2 	bl	8000150 <strlen>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	930e      	str	r3, [sp, #56]	; 0x38
 8003f90:	f8d8 3000 	ldr.w	r3, [r8]
 8003f94:	900a      	str	r0, [sp, #40]	; 0x28
 8003f96:	3307      	adds	r3, #7
 8003f98:	f023 0307 	bic.w	r3, r3, #7
 8003f9c:	f103 0208 	add.w	r2, r3, #8
 8003fa0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003fa4:	f8d4 b000 	ldr.w	fp, [r4]
 8003fa8:	f8c8 2000 	str.w	r2, [r8]
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003fb4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003fb8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003fbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc2:	4640      	mov	r0, r8
 8003fc4:	4b9c      	ldr	r3, [pc, #624]	; (8004238 <_printf_float+0x2cc>)
 8003fc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003fc8:	f7fc fd20 	bl	8000a0c <__aeabi_dcmpun>
 8003fcc:	bb70      	cbnz	r0, 800402c <_printf_float+0xc0>
 8003fce:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd2:	4640      	mov	r0, r8
 8003fd4:	4b98      	ldr	r3, [pc, #608]	; (8004238 <_printf_float+0x2cc>)
 8003fd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003fd8:	f7fc fcfa 	bl	80009d0 <__aeabi_dcmple>
 8003fdc:	bb30      	cbnz	r0, 800402c <_printf_float+0xc0>
 8003fde:	2200      	movs	r2, #0
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	4640      	mov	r0, r8
 8003fe4:	4651      	mov	r1, sl
 8003fe6:	f7fc fce9 	bl	80009bc <__aeabi_dcmplt>
 8003fea:	b110      	cbz	r0, 8003ff2 <_printf_float+0x86>
 8003fec:	232d      	movs	r3, #45	; 0x2d
 8003fee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ff2:	4b92      	ldr	r3, [pc, #584]	; (800423c <_printf_float+0x2d0>)
 8003ff4:	4892      	ldr	r0, [pc, #584]	; (8004240 <_printf_float+0x2d4>)
 8003ff6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003ffa:	bf94      	ite	ls
 8003ffc:	4698      	movls	r8, r3
 8003ffe:	4680      	movhi	r8, r0
 8004000:	2303      	movs	r3, #3
 8004002:	f04f 0a00 	mov.w	sl, #0
 8004006:	6123      	str	r3, [r4, #16]
 8004008:	f02b 0304 	bic.w	r3, fp, #4
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	4633      	mov	r3, r6
 8004010:	4621      	mov	r1, r4
 8004012:	4628      	mov	r0, r5
 8004014:	9700      	str	r7, [sp, #0]
 8004016:	aa0f      	add	r2, sp, #60	; 0x3c
 8004018:	f000 f9d4 	bl	80043c4 <_printf_common>
 800401c:	3001      	adds	r0, #1
 800401e:	f040 8090 	bne.w	8004142 <_printf_float+0x1d6>
 8004022:	f04f 30ff 	mov.w	r0, #4294967295
 8004026:	b011      	add	sp, #68	; 0x44
 8004028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800402c:	4642      	mov	r2, r8
 800402e:	4653      	mov	r3, sl
 8004030:	4640      	mov	r0, r8
 8004032:	4651      	mov	r1, sl
 8004034:	f7fc fcea 	bl	8000a0c <__aeabi_dcmpun>
 8004038:	b148      	cbz	r0, 800404e <_printf_float+0xe2>
 800403a:	f1ba 0f00 	cmp.w	sl, #0
 800403e:	bfb8      	it	lt
 8004040:	232d      	movlt	r3, #45	; 0x2d
 8004042:	4880      	ldr	r0, [pc, #512]	; (8004244 <_printf_float+0x2d8>)
 8004044:	bfb8      	it	lt
 8004046:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800404a:	4b7f      	ldr	r3, [pc, #508]	; (8004248 <_printf_float+0x2dc>)
 800404c:	e7d3      	b.n	8003ff6 <_printf_float+0x8a>
 800404e:	6863      	ldr	r3, [r4, #4]
 8004050:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	d142      	bne.n	80040de <_printf_float+0x172>
 8004058:	2306      	movs	r3, #6
 800405a:	6063      	str	r3, [r4, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	9206      	str	r2, [sp, #24]
 8004060:	aa0e      	add	r2, sp, #56	; 0x38
 8004062:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004066:	aa0d      	add	r2, sp, #52	; 0x34
 8004068:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800406c:	9203      	str	r2, [sp, #12]
 800406e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004072:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004076:	6023      	str	r3, [r4, #0]
 8004078:	6863      	ldr	r3, [r4, #4]
 800407a:	4642      	mov	r2, r8
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	4628      	mov	r0, r5
 8004080:	4653      	mov	r3, sl
 8004082:	910b      	str	r1, [sp, #44]	; 0x2c
 8004084:	f7ff fed4 	bl	8003e30 <__cvt>
 8004088:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800408a:	4680      	mov	r8, r0
 800408c:	2947      	cmp	r1, #71	; 0x47
 800408e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004090:	d108      	bne.n	80040a4 <_printf_float+0x138>
 8004092:	1cc8      	adds	r0, r1, #3
 8004094:	db02      	blt.n	800409c <_printf_float+0x130>
 8004096:	6863      	ldr	r3, [r4, #4]
 8004098:	4299      	cmp	r1, r3
 800409a:	dd40      	ble.n	800411e <_printf_float+0x1b2>
 800409c:	f1a9 0902 	sub.w	r9, r9, #2
 80040a0:	fa5f f989 	uxtb.w	r9, r9
 80040a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80040a8:	d81f      	bhi.n	80040ea <_printf_float+0x17e>
 80040aa:	464a      	mov	r2, r9
 80040ac:	3901      	subs	r1, #1
 80040ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80040b2:	910d      	str	r1, [sp, #52]	; 0x34
 80040b4:	f7ff ff1b 	bl	8003eee <__exponent>
 80040b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040ba:	4682      	mov	sl, r0
 80040bc:	1813      	adds	r3, r2, r0
 80040be:	2a01      	cmp	r2, #1
 80040c0:	6123      	str	r3, [r4, #16]
 80040c2:	dc02      	bgt.n	80040ca <_printf_float+0x15e>
 80040c4:	6822      	ldr	r2, [r4, #0]
 80040c6:	07d2      	lsls	r2, r2, #31
 80040c8:	d501      	bpl.n	80040ce <_printf_float+0x162>
 80040ca:	3301      	adds	r3, #1
 80040cc:	6123      	str	r3, [r4, #16]
 80040ce:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d09b      	beq.n	800400e <_printf_float+0xa2>
 80040d6:	232d      	movs	r3, #45	; 0x2d
 80040d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040dc:	e797      	b.n	800400e <_printf_float+0xa2>
 80040de:	2947      	cmp	r1, #71	; 0x47
 80040e0:	d1bc      	bne.n	800405c <_printf_float+0xf0>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1ba      	bne.n	800405c <_printf_float+0xf0>
 80040e6:	2301      	movs	r3, #1
 80040e8:	e7b7      	b.n	800405a <_printf_float+0xee>
 80040ea:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80040ee:	d118      	bne.n	8004122 <_printf_float+0x1b6>
 80040f0:	2900      	cmp	r1, #0
 80040f2:	6863      	ldr	r3, [r4, #4]
 80040f4:	dd0b      	ble.n	800410e <_printf_float+0x1a2>
 80040f6:	6121      	str	r1, [r4, #16]
 80040f8:	b913      	cbnz	r3, 8004100 <_printf_float+0x194>
 80040fa:	6822      	ldr	r2, [r4, #0]
 80040fc:	07d0      	lsls	r0, r2, #31
 80040fe:	d502      	bpl.n	8004106 <_printf_float+0x19a>
 8004100:	3301      	adds	r3, #1
 8004102:	440b      	add	r3, r1
 8004104:	6123      	str	r3, [r4, #16]
 8004106:	f04f 0a00 	mov.w	sl, #0
 800410a:	65a1      	str	r1, [r4, #88]	; 0x58
 800410c:	e7df      	b.n	80040ce <_printf_float+0x162>
 800410e:	b913      	cbnz	r3, 8004116 <_printf_float+0x1aa>
 8004110:	6822      	ldr	r2, [r4, #0]
 8004112:	07d2      	lsls	r2, r2, #31
 8004114:	d501      	bpl.n	800411a <_printf_float+0x1ae>
 8004116:	3302      	adds	r3, #2
 8004118:	e7f4      	b.n	8004104 <_printf_float+0x198>
 800411a:	2301      	movs	r3, #1
 800411c:	e7f2      	b.n	8004104 <_printf_float+0x198>
 800411e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004124:	4299      	cmp	r1, r3
 8004126:	db05      	blt.n	8004134 <_printf_float+0x1c8>
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	6121      	str	r1, [r4, #16]
 800412c:	07d8      	lsls	r0, r3, #31
 800412e:	d5ea      	bpl.n	8004106 <_printf_float+0x19a>
 8004130:	1c4b      	adds	r3, r1, #1
 8004132:	e7e7      	b.n	8004104 <_printf_float+0x198>
 8004134:	2900      	cmp	r1, #0
 8004136:	bfcc      	ite	gt
 8004138:	2201      	movgt	r2, #1
 800413a:	f1c1 0202 	rsble	r2, r1, #2
 800413e:	4413      	add	r3, r2
 8004140:	e7e0      	b.n	8004104 <_printf_float+0x198>
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	055a      	lsls	r2, r3, #21
 8004146:	d407      	bmi.n	8004158 <_printf_float+0x1ec>
 8004148:	6923      	ldr	r3, [r4, #16]
 800414a:	4642      	mov	r2, r8
 800414c:	4631      	mov	r1, r6
 800414e:	4628      	mov	r0, r5
 8004150:	47b8      	blx	r7
 8004152:	3001      	adds	r0, #1
 8004154:	d12b      	bne.n	80041ae <_printf_float+0x242>
 8004156:	e764      	b.n	8004022 <_printf_float+0xb6>
 8004158:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800415c:	f240 80dd 	bls.w	800431a <_printf_float+0x3ae>
 8004160:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004164:	2200      	movs	r2, #0
 8004166:	2300      	movs	r3, #0
 8004168:	f7fc fc1e 	bl	80009a8 <__aeabi_dcmpeq>
 800416c:	2800      	cmp	r0, #0
 800416e:	d033      	beq.n	80041d8 <_printf_float+0x26c>
 8004170:	2301      	movs	r3, #1
 8004172:	4631      	mov	r1, r6
 8004174:	4628      	mov	r0, r5
 8004176:	4a35      	ldr	r2, [pc, #212]	; (800424c <_printf_float+0x2e0>)
 8004178:	47b8      	blx	r7
 800417a:	3001      	adds	r0, #1
 800417c:	f43f af51 	beq.w	8004022 <_printf_float+0xb6>
 8004180:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004184:	429a      	cmp	r2, r3
 8004186:	db02      	blt.n	800418e <_printf_float+0x222>
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	07d8      	lsls	r0, r3, #31
 800418c:	d50f      	bpl.n	80041ae <_printf_float+0x242>
 800418e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004192:	4631      	mov	r1, r6
 8004194:	4628      	mov	r0, r5
 8004196:	47b8      	blx	r7
 8004198:	3001      	adds	r0, #1
 800419a:	f43f af42 	beq.w	8004022 <_printf_float+0xb6>
 800419e:	f04f 0800 	mov.w	r8, #0
 80041a2:	f104 091a 	add.w	r9, r4, #26
 80041a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041a8:	3b01      	subs	r3, #1
 80041aa:	4543      	cmp	r3, r8
 80041ac:	dc09      	bgt.n	80041c2 <_printf_float+0x256>
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	079b      	lsls	r3, r3, #30
 80041b2:	f100 8102 	bmi.w	80043ba <_printf_float+0x44e>
 80041b6:	68e0      	ldr	r0, [r4, #12]
 80041b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041ba:	4298      	cmp	r0, r3
 80041bc:	bfb8      	it	lt
 80041be:	4618      	movlt	r0, r3
 80041c0:	e731      	b.n	8004026 <_printf_float+0xba>
 80041c2:	2301      	movs	r3, #1
 80041c4:	464a      	mov	r2, r9
 80041c6:	4631      	mov	r1, r6
 80041c8:	4628      	mov	r0, r5
 80041ca:	47b8      	blx	r7
 80041cc:	3001      	adds	r0, #1
 80041ce:	f43f af28 	beq.w	8004022 <_printf_float+0xb6>
 80041d2:	f108 0801 	add.w	r8, r8, #1
 80041d6:	e7e6      	b.n	80041a6 <_printf_float+0x23a>
 80041d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041da:	2b00      	cmp	r3, #0
 80041dc:	dc38      	bgt.n	8004250 <_printf_float+0x2e4>
 80041de:	2301      	movs	r3, #1
 80041e0:	4631      	mov	r1, r6
 80041e2:	4628      	mov	r0, r5
 80041e4:	4a19      	ldr	r2, [pc, #100]	; (800424c <_printf_float+0x2e0>)
 80041e6:	47b8      	blx	r7
 80041e8:	3001      	adds	r0, #1
 80041ea:	f43f af1a 	beq.w	8004022 <_printf_float+0xb6>
 80041ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80041f2:	4313      	orrs	r3, r2
 80041f4:	d102      	bne.n	80041fc <_printf_float+0x290>
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	07d9      	lsls	r1, r3, #31
 80041fa:	d5d8      	bpl.n	80041ae <_printf_float+0x242>
 80041fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004200:	4631      	mov	r1, r6
 8004202:	4628      	mov	r0, r5
 8004204:	47b8      	blx	r7
 8004206:	3001      	adds	r0, #1
 8004208:	f43f af0b 	beq.w	8004022 <_printf_float+0xb6>
 800420c:	f04f 0900 	mov.w	r9, #0
 8004210:	f104 0a1a 	add.w	sl, r4, #26
 8004214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004216:	425b      	negs	r3, r3
 8004218:	454b      	cmp	r3, r9
 800421a:	dc01      	bgt.n	8004220 <_printf_float+0x2b4>
 800421c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800421e:	e794      	b.n	800414a <_printf_float+0x1de>
 8004220:	2301      	movs	r3, #1
 8004222:	4652      	mov	r2, sl
 8004224:	4631      	mov	r1, r6
 8004226:	4628      	mov	r0, r5
 8004228:	47b8      	blx	r7
 800422a:	3001      	adds	r0, #1
 800422c:	f43f aef9 	beq.w	8004022 <_printf_float+0xb6>
 8004230:	f109 0901 	add.w	r9, r9, #1
 8004234:	e7ee      	b.n	8004214 <_printf_float+0x2a8>
 8004236:	bf00      	nop
 8004238:	7fefffff 	.word	0x7fefffff
 800423c:	080073b0 	.word	0x080073b0
 8004240:	080073b4 	.word	0x080073b4
 8004244:	080073bc 	.word	0x080073bc
 8004248:	080073b8 	.word	0x080073b8
 800424c:	080073c0 	.word	0x080073c0
 8004250:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004252:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004254:	429a      	cmp	r2, r3
 8004256:	bfa8      	it	ge
 8004258:	461a      	movge	r2, r3
 800425a:	2a00      	cmp	r2, #0
 800425c:	4691      	mov	r9, r2
 800425e:	dc37      	bgt.n	80042d0 <_printf_float+0x364>
 8004260:	f04f 0b00 	mov.w	fp, #0
 8004264:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004268:	f104 021a 	add.w	r2, r4, #26
 800426c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004270:	ebaa 0309 	sub.w	r3, sl, r9
 8004274:	455b      	cmp	r3, fp
 8004276:	dc33      	bgt.n	80042e0 <_printf_float+0x374>
 8004278:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800427c:	429a      	cmp	r2, r3
 800427e:	db3b      	blt.n	80042f8 <_printf_float+0x38c>
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	07da      	lsls	r2, r3, #31
 8004284:	d438      	bmi.n	80042f8 <_printf_float+0x38c>
 8004286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004288:	990d      	ldr	r1, [sp, #52]	; 0x34
 800428a:	eba3 020a 	sub.w	r2, r3, sl
 800428e:	eba3 0901 	sub.w	r9, r3, r1
 8004292:	4591      	cmp	r9, r2
 8004294:	bfa8      	it	ge
 8004296:	4691      	movge	r9, r2
 8004298:	f1b9 0f00 	cmp.w	r9, #0
 800429c:	dc34      	bgt.n	8004308 <_printf_float+0x39c>
 800429e:	f04f 0800 	mov.w	r8, #0
 80042a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042a6:	f104 0a1a 	add.w	sl, r4, #26
 80042aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042ae:	1a9b      	subs	r3, r3, r2
 80042b0:	eba3 0309 	sub.w	r3, r3, r9
 80042b4:	4543      	cmp	r3, r8
 80042b6:	f77f af7a 	ble.w	80041ae <_printf_float+0x242>
 80042ba:	2301      	movs	r3, #1
 80042bc:	4652      	mov	r2, sl
 80042be:	4631      	mov	r1, r6
 80042c0:	4628      	mov	r0, r5
 80042c2:	47b8      	blx	r7
 80042c4:	3001      	adds	r0, #1
 80042c6:	f43f aeac 	beq.w	8004022 <_printf_float+0xb6>
 80042ca:	f108 0801 	add.w	r8, r8, #1
 80042ce:	e7ec      	b.n	80042aa <_printf_float+0x33e>
 80042d0:	4613      	mov	r3, r2
 80042d2:	4631      	mov	r1, r6
 80042d4:	4642      	mov	r2, r8
 80042d6:	4628      	mov	r0, r5
 80042d8:	47b8      	blx	r7
 80042da:	3001      	adds	r0, #1
 80042dc:	d1c0      	bne.n	8004260 <_printf_float+0x2f4>
 80042de:	e6a0      	b.n	8004022 <_printf_float+0xb6>
 80042e0:	2301      	movs	r3, #1
 80042e2:	4631      	mov	r1, r6
 80042e4:	4628      	mov	r0, r5
 80042e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80042e8:	47b8      	blx	r7
 80042ea:	3001      	adds	r0, #1
 80042ec:	f43f ae99 	beq.w	8004022 <_printf_float+0xb6>
 80042f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042f2:	f10b 0b01 	add.w	fp, fp, #1
 80042f6:	e7b9      	b.n	800426c <_printf_float+0x300>
 80042f8:	4631      	mov	r1, r6
 80042fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042fe:	4628      	mov	r0, r5
 8004300:	47b8      	blx	r7
 8004302:	3001      	adds	r0, #1
 8004304:	d1bf      	bne.n	8004286 <_printf_float+0x31a>
 8004306:	e68c      	b.n	8004022 <_printf_float+0xb6>
 8004308:	464b      	mov	r3, r9
 800430a:	4631      	mov	r1, r6
 800430c:	4628      	mov	r0, r5
 800430e:	eb08 020a 	add.w	r2, r8, sl
 8004312:	47b8      	blx	r7
 8004314:	3001      	adds	r0, #1
 8004316:	d1c2      	bne.n	800429e <_printf_float+0x332>
 8004318:	e683      	b.n	8004022 <_printf_float+0xb6>
 800431a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800431c:	2a01      	cmp	r2, #1
 800431e:	dc01      	bgt.n	8004324 <_printf_float+0x3b8>
 8004320:	07db      	lsls	r3, r3, #31
 8004322:	d537      	bpl.n	8004394 <_printf_float+0x428>
 8004324:	2301      	movs	r3, #1
 8004326:	4642      	mov	r2, r8
 8004328:	4631      	mov	r1, r6
 800432a:	4628      	mov	r0, r5
 800432c:	47b8      	blx	r7
 800432e:	3001      	adds	r0, #1
 8004330:	f43f ae77 	beq.w	8004022 <_printf_float+0xb6>
 8004334:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004338:	4631      	mov	r1, r6
 800433a:	4628      	mov	r0, r5
 800433c:	47b8      	blx	r7
 800433e:	3001      	adds	r0, #1
 8004340:	f43f ae6f 	beq.w	8004022 <_printf_float+0xb6>
 8004344:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004348:	2200      	movs	r2, #0
 800434a:	2300      	movs	r3, #0
 800434c:	f7fc fb2c 	bl	80009a8 <__aeabi_dcmpeq>
 8004350:	b9d8      	cbnz	r0, 800438a <_printf_float+0x41e>
 8004352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004354:	f108 0201 	add.w	r2, r8, #1
 8004358:	3b01      	subs	r3, #1
 800435a:	4631      	mov	r1, r6
 800435c:	4628      	mov	r0, r5
 800435e:	47b8      	blx	r7
 8004360:	3001      	adds	r0, #1
 8004362:	d10e      	bne.n	8004382 <_printf_float+0x416>
 8004364:	e65d      	b.n	8004022 <_printf_float+0xb6>
 8004366:	2301      	movs	r3, #1
 8004368:	464a      	mov	r2, r9
 800436a:	4631      	mov	r1, r6
 800436c:	4628      	mov	r0, r5
 800436e:	47b8      	blx	r7
 8004370:	3001      	adds	r0, #1
 8004372:	f43f ae56 	beq.w	8004022 <_printf_float+0xb6>
 8004376:	f108 0801 	add.w	r8, r8, #1
 800437a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800437c:	3b01      	subs	r3, #1
 800437e:	4543      	cmp	r3, r8
 8004380:	dcf1      	bgt.n	8004366 <_printf_float+0x3fa>
 8004382:	4653      	mov	r3, sl
 8004384:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004388:	e6e0      	b.n	800414c <_printf_float+0x1e0>
 800438a:	f04f 0800 	mov.w	r8, #0
 800438e:	f104 091a 	add.w	r9, r4, #26
 8004392:	e7f2      	b.n	800437a <_printf_float+0x40e>
 8004394:	2301      	movs	r3, #1
 8004396:	4642      	mov	r2, r8
 8004398:	e7df      	b.n	800435a <_printf_float+0x3ee>
 800439a:	2301      	movs	r3, #1
 800439c:	464a      	mov	r2, r9
 800439e:	4631      	mov	r1, r6
 80043a0:	4628      	mov	r0, r5
 80043a2:	47b8      	blx	r7
 80043a4:	3001      	adds	r0, #1
 80043a6:	f43f ae3c 	beq.w	8004022 <_printf_float+0xb6>
 80043aa:	f108 0801 	add.w	r8, r8, #1
 80043ae:	68e3      	ldr	r3, [r4, #12]
 80043b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80043b2:	1a5b      	subs	r3, r3, r1
 80043b4:	4543      	cmp	r3, r8
 80043b6:	dcf0      	bgt.n	800439a <_printf_float+0x42e>
 80043b8:	e6fd      	b.n	80041b6 <_printf_float+0x24a>
 80043ba:	f04f 0800 	mov.w	r8, #0
 80043be:	f104 0919 	add.w	r9, r4, #25
 80043c2:	e7f4      	b.n	80043ae <_printf_float+0x442>

080043c4 <_printf_common>:
 80043c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c8:	4616      	mov	r6, r2
 80043ca:	4699      	mov	r9, r3
 80043cc:	688a      	ldr	r2, [r1, #8]
 80043ce:	690b      	ldr	r3, [r1, #16]
 80043d0:	4607      	mov	r7, r0
 80043d2:	4293      	cmp	r3, r2
 80043d4:	bfb8      	it	lt
 80043d6:	4613      	movlt	r3, r2
 80043d8:	6033      	str	r3, [r6, #0]
 80043da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043de:	460c      	mov	r4, r1
 80043e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043e4:	b10a      	cbz	r2, 80043ea <_printf_common+0x26>
 80043e6:	3301      	adds	r3, #1
 80043e8:	6033      	str	r3, [r6, #0]
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	0699      	lsls	r1, r3, #26
 80043ee:	bf42      	ittt	mi
 80043f0:	6833      	ldrmi	r3, [r6, #0]
 80043f2:	3302      	addmi	r3, #2
 80043f4:	6033      	strmi	r3, [r6, #0]
 80043f6:	6825      	ldr	r5, [r4, #0]
 80043f8:	f015 0506 	ands.w	r5, r5, #6
 80043fc:	d106      	bne.n	800440c <_printf_common+0x48>
 80043fe:	f104 0a19 	add.w	sl, r4, #25
 8004402:	68e3      	ldr	r3, [r4, #12]
 8004404:	6832      	ldr	r2, [r6, #0]
 8004406:	1a9b      	subs	r3, r3, r2
 8004408:	42ab      	cmp	r3, r5
 800440a:	dc28      	bgt.n	800445e <_printf_common+0x9a>
 800440c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004410:	1e13      	subs	r3, r2, #0
 8004412:	6822      	ldr	r2, [r4, #0]
 8004414:	bf18      	it	ne
 8004416:	2301      	movne	r3, #1
 8004418:	0692      	lsls	r2, r2, #26
 800441a:	d42d      	bmi.n	8004478 <_printf_common+0xb4>
 800441c:	4649      	mov	r1, r9
 800441e:	4638      	mov	r0, r7
 8004420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004424:	47c0      	blx	r8
 8004426:	3001      	adds	r0, #1
 8004428:	d020      	beq.n	800446c <_printf_common+0xa8>
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	68e5      	ldr	r5, [r4, #12]
 800442e:	f003 0306 	and.w	r3, r3, #6
 8004432:	2b04      	cmp	r3, #4
 8004434:	bf18      	it	ne
 8004436:	2500      	movne	r5, #0
 8004438:	6832      	ldr	r2, [r6, #0]
 800443a:	f04f 0600 	mov.w	r6, #0
 800443e:	68a3      	ldr	r3, [r4, #8]
 8004440:	bf08      	it	eq
 8004442:	1aad      	subeq	r5, r5, r2
 8004444:	6922      	ldr	r2, [r4, #16]
 8004446:	bf08      	it	eq
 8004448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800444c:	4293      	cmp	r3, r2
 800444e:	bfc4      	itt	gt
 8004450:	1a9b      	subgt	r3, r3, r2
 8004452:	18ed      	addgt	r5, r5, r3
 8004454:	341a      	adds	r4, #26
 8004456:	42b5      	cmp	r5, r6
 8004458:	d11a      	bne.n	8004490 <_printf_common+0xcc>
 800445a:	2000      	movs	r0, #0
 800445c:	e008      	b.n	8004470 <_printf_common+0xac>
 800445e:	2301      	movs	r3, #1
 8004460:	4652      	mov	r2, sl
 8004462:	4649      	mov	r1, r9
 8004464:	4638      	mov	r0, r7
 8004466:	47c0      	blx	r8
 8004468:	3001      	adds	r0, #1
 800446a:	d103      	bne.n	8004474 <_printf_common+0xb0>
 800446c:	f04f 30ff 	mov.w	r0, #4294967295
 8004470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004474:	3501      	adds	r5, #1
 8004476:	e7c4      	b.n	8004402 <_printf_common+0x3e>
 8004478:	2030      	movs	r0, #48	; 0x30
 800447a:	18e1      	adds	r1, r4, r3
 800447c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004486:	4422      	add	r2, r4
 8004488:	3302      	adds	r3, #2
 800448a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800448e:	e7c5      	b.n	800441c <_printf_common+0x58>
 8004490:	2301      	movs	r3, #1
 8004492:	4622      	mov	r2, r4
 8004494:	4649      	mov	r1, r9
 8004496:	4638      	mov	r0, r7
 8004498:	47c0      	blx	r8
 800449a:	3001      	adds	r0, #1
 800449c:	d0e6      	beq.n	800446c <_printf_common+0xa8>
 800449e:	3601      	adds	r6, #1
 80044a0:	e7d9      	b.n	8004456 <_printf_common+0x92>
	...

080044a4 <_printf_i>:
 80044a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044a8:	7e0f      	ldrb	r7, [r1, #24]
 80044aa:	4691      	mov	r9, r2
 80044ac:	2f78      	cmp	r7, #120	; 0x78
 80044ae:	4680      	mov	r8, r0
 80044b0:	460c      	mov	r4, r1
 80044b2:	469a      	mov	sl, r3
 80044b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044ba:	d807      	bhi.n	80044cc <_printf_i+0x28>
 80044bc:	2f62      	cmp	r7, #98	; 0x62
 80044be:	d80a      	bhi.n	80044d6 <_printf_i+0x32>
 80044c0:	2f00      	cmp	r7, #0
 80044c2:	f000 80d9 	beq.w	8004678 <_printf_i+0x1d4>
 80044c6:	2f58      	cmp	r7, #88	; 0x58
 80044c8:	f000 80a4 	beq.w	8004614 <_printf_i+0x170>
 80044cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044d4:	e03a      	b.n	800454c <_printf_i+0xa8>
 80044d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044da:	2b15      	cmp	r3, #21
 80044dc:	d8f6      	bhi.n	80044cc <_printf_i+0x28>
 80044de:	a101      	add	r1, pc, #4	; (adr r1, 80044e4 <_printf_i+0x40>)
 80044e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044e4:	0800453d 	.word	0x0800453d
 80044e8:	08004551 	.word	0x08004551
 80044ec:	080044cd 	.word	0x080044cd
 80044f0:	080044cd 	.word	0x080044cd
 80044f4:	080044cd 	.word	0x080044cd
 80044f8:	080044cd 	.word	0x080044cd
 80044fc:	08004551 	.word	0x08004551
 8004500:	080044cd 	.word	0x080044cd
 8004504:	080044cd 	.word	0x080044cd
 8004508:	080044cd 	.word	0x080044cd
 800450c:	080044cd 	.word	0x080044cd
 8004510:	0800465f 	.word	0x0800465f
 8004514:	08004581 	.word	0x08004581
 8004518:	08004641 	.word	0x08004641
 800451c:	080044cd 	.word	0x080044cd
 8004520:	080044cd 	.word	0x080044cd
 8004524:	08004681 	.word	0x08004681
 8004528:	080044cd 	.word	0x080044cd
 800452c:	08004581 	.word	0x08004581
 8004530:	080044cd 	.word	0x080044cd
 8004534:	080044cd 	.word	0x080044cd
 8004538:	08004649 	.word	0x08004649
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	1d1a      	adds	r2, r3, #4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	602a      	str	r2, [r5, #0]
 8004544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800454c:	2301      	movs	r3, #1
 800454e:	e0a4      	b.n	800469a <_printf_i+0x1f6>
 8004550:	6820      	ldr	r0, [r4, #0]
 8004552:	6829      	ldr	r1, [r5, #0]
 8004554:	0606      	lsls	r6, r0, #24
 8004556:	f101 0304 	add.w	r3, r1, #4
 800455a:	d50a      	bpl.n	8004572 <_printf_i+0xce>
 800455c:	680e      	ldr	r6, [r1, #0]
 800455e:	602b      	str	r3, [r5, #0]
 8004560:	2e00      	cmp	r6, #0
 8004562:	da03      	bge.n	800456c <_printf_i+0xc8>
 8004564:	232d      	movs	r3, #45	; 0x2d
 8004566:	4276      	negs	r6, r6
 8004568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800456c:	230a      	movs	r3, #10
 800456e:	485e      	ldr	r0, [pc, #376]	; (80046e8 <_printf_i+0x244>)
 8004570:	e019      	b.n	80045a6 <_printf_i+0x102>
 8004572:	680e      	ldr	r6, [r1, #0]
 8004574:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004578:	602b      	str	r3, [r5, #0]
 800457a:	bf18      	it	ne
 800457c:	b236      	sxthne	r6, r6
 800457e:	e7ef      	b.n	8004560 <_printf_i+0xbc>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	6820      	ldr	r0, [r4, #0]
 8004584:	1d19      	adds	r1, r3, #4
 8004586:	6029      	str	r1, [r5, #0]
 8004588:	0601      	lsls	r1, r0, #24
 800458a:	d501      	bpl.n	8004590 <_printf_i+0xec>
 800458c:	681e      	ldr	r6, [r3, #0]
 800458e:	e002      	b.n	8004596 <_printf_i+0xf2>
 8004590:	0646      	lsls	r6, r0, #25
 8004592:	d5fb      	bpl.n	800458c <_printf_i+0xe8>
 8004594:	881e      	ldrh	r6, [r3, #0]
 8004596:	2f6f      	cmp	r7, #111	; 0x6f
 8004598:	bf0c      	ite	eq
 800459a:	2308      	moveq	r3, #8
 800459c:	230a      	movne	r3, #10
 800459e:	4852      	ldr	r0, [pc, #328]	; (80046e8 <_printf_i+0x244>)
 80045a0:	2100      	movs	r1, #0
 80045a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045a6:	6865      	ldr	r5, [r4, #4]
 80045a8:	2d00      	cmp	r5, #0
 80045aa:	bfa8      	it	ge
 80045ac:	6821      	ldrge	r1, [r4, #0]
 80045ae:	60a5      	str	r5, [r4, #8]
 80045b0:	bfa4      	itt	ge
 80045b2:	f021 0104 	bicge.w	r1, r1, #4
 80045b6:	6021      	strge	r1, [r4, #0]
 80045b8:	b90e      	cbnz	r6, 80045be <_printf_i+0x11a>
 80045ba:	2d00      	cmp	r5, #0
 80045bc:	d04d      	beq.n	800465a <_printf_i+0x1b6>
 80045be:	4615      	mov	r5, r2
 80045c0:	fbb6 f1f3 	udiv	r1, r6, r3
 80045c4:	fb03 6711 	mls	r7, r3, r1, r6
 80045c8:	5dc7      	ldrb	r7, [r0, r7]
 80045ca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045ce:	4637      	mov	r7, r6
 80045d0:	42bb      	cmp	r3, r7
 80045d2:	460e      	mov	r6, r1
 80045d4:	d9f4      	bls.n	80045c0 <_printf_i+0x11c>
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d10b      	bne.n	80045f2 <_printf_i+0x14e>
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	07de      	lsls	r6, r3, #31
 80045de:	d508      	bpl.n	80045f2 <_printf_i+0x14e>
 80045e0:	6923      	ldr	r3, [r4, #16]
 80045e2:	6861      	ldr	r1, [r4, #4]
 80045e4:	4299      	cmp	r1, r3
 80045e6:	bfde      	ittt	le
 80045e8:	2330      	movle	r3, #48	; 0x30
 80045ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045f2:	1b52      	subs	r2, r2, r5
 80045f4:	6122      	str	r2, [r4, #16]
 80045f6:	464b      	mov	r3, r9
 80045f8:	4621      	mov	r1, r4
 80045fa:	4640      	mov	r0, r8
 80045fc:	f8cd a000 	str.w	sl, [sp]
 8004600:	aa03      	add	r2, sp, #12
 8004602:	f7ff fedf 	bl	80043c4 <_printf_common>
 8004606:	3001      	adds	r0, #1
 8004608:	d14c      	bne.n	80046a4 <_printf_i+0x200>
 800460a:	f04f 30ff 	mov.w	r0, #4294967295
 800460e:	b004      	add	sp, #16
 8004610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004614:	4834      	ldr	r0, [pc, #208]	; (80046e8 <_printf_i+0x244>)
 8004616:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800461a:	6829      	ldr	r1, [r5, #0]
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004622:	6029      	str	r1, [r5, #0]
 8004624:	061d      	lsls	r5, r3, #24
 8004626:	d514      	bpl.n	8004652 <_printf_i+0x1ae>
 8004628:	07df      	lsls	r7, r3, #31
 800462a:	bf44      	itt	mi
 800462c:	f043 0320 	orrmi.w	r3, r3, #32
 8004630:	6023      	strmi	r3, [r4, #0]
 8004632:	b91e      	cbnz	r6, 800463c <_printf_i+0x198>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	f023 0320 	bic.w	r3, r3, #32
 800463a:	6023      	str	r3, [r4, #0]
 800463c:	2310      	movs	r3, #16
 800463e:	e7af      	b.n	80045a0 <_printf_i+0xfc>
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	f043 0320 	orr.w	r3, r3, #32
 8004646:	6023      	str	r3, [r4, #0]
 8004648:	2378      	movs	r3, #120	; 0x78
 800464a:	4828      	ldr	r0, [pc, #160]	; (80046ec <_printf_i+0x248>)
 800464c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004650:	e7e3      	b.n	800461a <_printf_i+0x176>
 8004652:	0659      	lsls	r1, r3, #25
 8004654:	bf48      	it	mi
 8004656:	b2b6      	uxthmi	r6, r6
 8004658:	e7e6      	b.n	8004628 <_printf_i+0x184>
 800465a:	4615      	mov	r5, r2
 800465c:	e7bb      	b.n	80045d6 <_printf_i+0x132>
 800465e:	682b      	ldr	r3, [r5, #0]
 8004660:	6826      	ldr	r6, [r4, #0]
 8004662:	1d18      	adds	r0, r3, #4
 8004664:	6961      	ldr	r1, [r4, #20]
 8004666:	6028      	str	r0, [r5, #0]
 8004668:	0635      	lsls	r5, r6, #24
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	d501      	bpl.n	8004672 <_printf_i+0x1ce>
 800466e:	6019      	str	r1, [r3, #0]
 8004670:	e002      	b.n	8004678 <_printf_i+0x1d4>
 8004672:	0670      	lsls	r0, r6, #25
 8004674:	d5fb      	bpl.n	800466e <_printf_i+0x1ca>
 8004676:	8019      	strh	r1, [r3, #0]
 8004678:	2300      	movs	r3, #0
 800467a:	4615      	mov	r5, r2
 800467c:	6123      	str	r3, [r4, #16]
 800467e:	e7ba      	b.n	80045f6 <_printf_i+0x152>
 8004680:	682b      	ldr	r3, [r5, #0]
 8004682:	2100      	movs	r1, #0
 8004684:	1d1a      	adds	r2, r3, #4
 8004686:	602a      	str	r2, [r5, #0]
 8004688:	681d      	ldr	r5, [r3, #0]
 800468a:	6862      	ldr	r2, [r4, #4]
 800468c:	4628      	mov	r0, r5
 800468e:	f000 fed5 	bl	800543c <memchr>
 8004692:	b108      	cbz	r0, 8004698 <_printf_i+0x1f4>
 8004694:	1b40      	subs	r0, r0, r5
 8004696:	6060      	str	r0, [r4, #4]
 8004698:	6863      	ldr	r3, [r4, #4]
 800469a:	6123      	str	r3, [r4, #16]
 800469c:	2300      	movs	r3, #0
 800469e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046a2:	e7a8      	b.n	80045f6 <_printf_i+0x152>
 80046a4:	462a      	mov	r2, r5
 80046a6:	4649      	mov	r1, r9
 80046a8:	4640      	mov	r0, r8
 80046aa:	6923      	ldr	r3, [r4, #16]
 80046ac:	47d0      	blx	sl
 80046ae:	3001      	adds	r0, #1
 80046b0:	d0ab      	beq.n	800460a <_printf_i+0x166>
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	079b      	lsls	r3, r3, #30
 80046b6:	d413      	bmi.n	80046e0 <_printf_i+0x23c>
 80046b8:	68e0      	ldr	r0, [r4, #12]
 80046ba:	9b03      	ldr	r3, [sp, #12]
 80046bc:	4298      	cmp	r0, r3
 80046be:	bfb8      	it	lt
 80046c0:	4618      	movlt	r0, r3
 80046c2:	e7a4      	b.n	800460e <_printf_i+0x16a>
 80046c4:	2301      	movs	r3, #1
 80046c6:	4632      	mov	r2, r6
 80046c8:	4649      	mov	r1, r9
 80046ca:	4640      	mov	r0, r8
 80046cc:	47d0      	blx	sl
 80046ce:	3001      	adds	r0, #1
 80046d0:	d09b      	beq.n	800460a <_printf_i+0x166>
 80046d2:	3501      	adds	r5, #1
 80046d4:	68e3      	ldr	r3, [r4, #12]
 80046d6:	9903      	ldr	r1, [sp, #12]
 80046d8:	1a5b      	subs	r3, r3, r1
 80046da:	42ab      	cmp	r3, r5
 80046dc:	dcf2      	bgt.n	80046c4 <_printf_i+0x220>
 80046de:	e7eb      	b.n	80046b8 <_printf_i+0x214>
 80046e0:	2500      	movs	r5, #0
 80046e2:	f104 0619 	add.w	r6, r4, #25
 80046e6:	e7f5      	b.n	80046d4 <_printf_i+0x230>
 80046e8:	080073c2 	.word	0x080073c2
 80046ec:	080073d3 	.word	0x080073d3

080046f0 <siprintf>:
 80046f0:	b40e      	push	{r1, r2, r3}
 80046f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046f6:	b500      	push	{lr}
 80046f8:	b09c      	sub	sp, #112	; 0x70
 80046fa:	ab1d      	add	r3, sp, #116	; 0x74
 80046fc:	9002      	str	r0, [sp, #8]
 80046fe:	9006      	str	r0, [sp, #24]
 8004700:	9107      	str	r1, [sp, #28]
 8004702:	9104      	str	r1, [sp, #16]
 8004704:	4808      	ldr	r0, [pc, #32]	; (8004728 <siprintf+0x38>)
 8004706:	4909      	ldr	r1, [pc, #36]	; (800472c <siprintf+0x3c>)
 8004708:	f853 2b04 	ldr.w	r2, [r3], #4
 800470c:	9105      	str	r1, [sp, #20]
 800470e:	6800      	ldr	r0, [r0, #0]
 8004710:	a902      	add	r1, sp, #8
 8004712:	9301      	str	r3, [sp, #4]
 8004714:	f001 fb6e 	bl	8005df4 <_svfiprintf_r>
 8004718:	2200      	movs	r2, #0
 800471a:	9b02      	ldr	r3, [sp, #8]
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	b01c      	add	sp, #112	; 0x70
 8004720:	f85d eb04 	ldr.w	lr, [sp], #4
 8004724:	b003      	add	sp, #12
 8004726:	4770      	bx	lr
 8004728:	20000020 	.word	0x20000020
 800472c:	ffff0208 	.word	0xffff0208

08004730 <quorem>:
 8004730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004734:	6903      	ldr	r3, [r0, #16]
 8004736:	690c      	ldr	r4, [r1, #16]
 8004738:	4607      	mov	r7, r0
 800473a:	42a3      	cmp	r3, r4
 800473c:	f2c0 8082 	blt.w	8004844 <quorem+0x114>
 8004740:	3c01      	subs	r4, #1
 8004742:	f100 0514 	add.w	r5, r0, #20
 8004746:	f101 0814 	add.w	r8, r1, #20
 800474a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800474e:	9301      	str	r3, [sp, #4]
 8004750:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004754:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004758:	3301      	adds	r3, #1
 800475a:	429a      	cmp	r2, r3
 800475c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004760:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004764:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004768:	d331      	bcc.n	80047ce <quorem+0x9e>
 800476a:	f04f 0e00 	mov.w	lr, #0
 800476e:	4640      	mov	r0, r8
 8004770:	46ac      	mov	ip, r5
 8004772:	46f2      	mov	sl, lr
 8004774:	f850 2b04 	ldr.w	r2, [r0], #4
 8004778:	b293      	uxth	r3, r2
 800477a:	fb06 e303 	mla	r3, r6, r3, lr
 800477e:	0c12      	lsrs	r2, r2, #16
 8004780:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004784:	b29b      	uxth	r3, r3
 8004786:	fb06 e202 	mla	r2, r6, r2, lr
 800478a:	ebaa 0303 	sub.w	r3, sl, r3
 800478e:	f8dc a000 	ldr.w	sl, [ip]
 8004792:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004796:	fa1f fa8a 	uxth.w	sl, sl
 800479a:	4453      	add	r3, sl
 800479c:	f8dc a000 	ldr.w	sl, [ip]
 80047a0:	b292      	uxth	r2, r2
 80047a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80047a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047b0:	4581      	cmp	r9, r0
 80047b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80047b6:	f84c 3b04 	str.w	r3, [ip], #4
 80047ba:	d2db      	bcs.n	8004774 <quorem+0x44>
 80047bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80047c0:	b92b      	cbnz	r3, 80047ce <quorem+0x9e>
 80047c2:	9b01      	ldr	r3, [sp, #4]
 80047c4:	3b04      	subs	r3, #4
 80047c6:	429d      	cmp	r5, r3
 80047c8:	461a      	mov	r2, r3
 80047ca:	d32f      	bcc.n	800482c <quorem+0xfc>
 80047cc:	613c      	str	r4, [r7, #16]
 80047ce:	4638      	mov	r0, r7
 80047d0:	f001 f8c0 	bl	8005954 <__mcmp>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	db25      	blt.n	8004824 <quorem+0xf4>
 80047d8:	4628      	mov	r0, r5
 80047da:	f04f 0c00 	mov.w	ip, #0
 80047de:	3601      	adds	r6, #1
 80047e0:	f858 1b04 	ldr.w	r1, [r8], #4
 80047e4:	f8d0 e000 	ldr.w	lr, [r0]
 80047e8:	b28b      	uxth	r3, r1
 80047ea:	ebac 0303 	sub.w	r3, ip, r3
 80047ee:	fa1f f28e 	uxth.w	r2, lr
 80047f2:	4413      	add	r3, r2
 80047f4:	0c0a      	lsrs	r2, r1, #16
 80047f6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80047fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047fe:	b29b      	uxth	r3, r3
 8004800:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004804:	45c1      	cmp	r9, r8
 8004806:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800480a:	f840 3b04 	str.w	r3, [r0], #4
 800480e:	d2e7      	bcs.n	80047e0 <quorem+0xb0>
 8004810:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004814:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004818:	b922      	cbnz	r2, 8004824 <quorem+0xf4>
 800481a:	3b04      	subs	r3, #4
 800481c:	429d      	cmp	r5, r3
 800481e:	461a      	mov	r2, r3
 8004820:	d30a      	bcc.n	8004838 <quorem+0x108>
 8004822:	613c      	str	r4, [r7, #16]
 8004824:	4630      	mov	r0, r6
 8004826:	b003      	add	sp, #12
 8004828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	3b04      	subs	r3, #4
 8004830:	2a00      	cmp	r2, #0
 8004832:	d1cb      	bne.n	80047cc <quorem+0x9c>
 8004834:	3c01      	subs	r4, #1
 8004836:	e7c6      	b.n	80047c6 <quorem+0x96>
 8004838:	6812      	ldr	r2, [r2, #0]
 800483a:	3b04      	subs	r3, #4
 800483c:	2a00      	cmp	r2, #0
 800483e:	d1f0      	bne.n	8004822 <quorem+0xf2>
 8004840:	3c01      	subs	r4, #1
 8004842:	e7eb      	b.n	800481c <quorem+0xec>
 8004844:	2000      	movs	r0, #0
 8004846:	e7ee      	b.n	8004826 <quorem+0xf6>

08004848 <_dtoa_r>:
 8004848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800484c:	4616      	mov	r6, r2
 800484e:	461f      	mov	r7, r3
 8004850:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004852:	b099      	sub	sp, #100	; 0x64
 8004854:	4605      	mov	r5, r0
 8004856:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800485a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800485e:	b974      	cbnz	r4, 800487e <_dtoa_r+0x36>
 8004860:	2010      	movs	r0, #16
 8004862:	f000 fde3 	bl	800542c <malloc>
 8004866:	4602      	mov	r2, r0
 8004868:	6268      	str	r0, [r5, #36]	; 0x24
 800486a:	b920      	cbnz	r0, 8004876 <_dtoa_r+0x2e>
 800486c:	21ea      	movs	r1, #234	; 0xea
 800486e:	4ba8      	ldr	r3, [pc, #672]	; (8004b10 <_dtoa_r+0x2c8>)
 8004870:	48a8      	ldr	r0, [pc, #672]	; (8004b14 <_dtoa_r+0x2cc>)
 8004872:	f001 fbcf 	bl	8006014 <__assert_func>
 8004876:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800487a:	6004      	str	r4, [r0, #0]
 800487c:	60c4      	str	r4, [r0, #12]
 800487e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004880:	6819      	ldr	r1, [r3, #0]
 8004882:	b151      	cbz	r1, 800489a <_dtoa_r+0x52>
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	2301      	movs	r3, #1
 8004888:	4093      	lsls	r3, r2
 800488a:	604a      	str	r2, [r1, #4]
 800488c:	608b      	str	r3, [r1, #8]
 800488e:	4628      	mov	r0, r5
 8004890:	f000 fe22 	bl	80054d8 <_Bfree>
 8004894:	2200      	movs	r2, #0
 8004896:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	1e3b      	subs	r3, r7, #0
 800489c:	bfaf      	iteee	ge
 800489e:	2300      	movge	r3, #0
 80048a0:	2201      	movlt	r2, #1
 80048a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80048a6:	9305      	strlt	r3, [sp, #20]
 80048a8:	bfa8      	it	ge
 80048aa:	f8c8 3000 	strge.w	r3, [r8]
 80048ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80048b2:	4b99      	ldr	r3, [pc, #612]	; (8004b18 <_dtoa_r+0x2d0>)
 80048b4:	bfb8      	it	lt
 80048b6:	f8c8 2000 	strlt.w	r2, [r8]
 80048ba:	ea33 0309 	bics.w	r3, r3, r9
 80048be:	d119      	bne.n	80048f4 <_dtoa_r+0xac>
 80048c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80048c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80048c6:	6013      	str	r3, [r2, #0]
 80048c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80048cc:	4333      	orrs	r3, r6
 80048ce:	f000 857f 	beq.w	80053d0 <_dtoa_r+0xb88>
 80048d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80048d4:	b953      	cbnz	r3, 80048ec <_dtoa_r+0xa4>
 80048d6:	4b91      	ldr	r3, [pc, #580]	; (8004b1c <_dtoa_r+0x2d4>)
 80048d8:	e022      	b.n	8004920 <_dtoa_r+0xd8>
 80048da:	4b91      	ldr	r3, [pc, #580]	; (8004b20 <_dtoa_r+0x2d8>)
 80048dc:	9303      	str	r3, [sp, #12]
 80048de:	3308      	adds	r3, #8
 80048e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	9803      	ldr	r0, [sp, #12]
 80048e6:	b019      	add	sp, #100	; 0x64
 80048e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ec:	4b8b      	ldr	r3, [pc, #556]	; (8004b1c <_dtoa_r+0x2d4>)
 80048ee:	9303      	str	r3, [sp, #12]
 80048f0:	3303      	adds	r3, #3
 80048f2:	e7f5      	b.n	80048e0 <_dtoa_r+0x98>
 80048f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80048f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80048fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004900:	2200      	movs	r2, #0
 8004902:	2300      	movs	r3, #0
 8004904:	f7fc f850 	bl	80009a8 <__aeabi_dcmpeq>
 8004908:	4680      	mov	r8, r0
 800490a:	b158      	cbz	r0, 8004924 <_dtoa_r+0xdc>
 800490c:	2301      	movs	r3, #1
 800490e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 8558 	beq.w	80053ca <_dtoa_r+0xb82>
 800491a:	4882      	ldr	r0, [pc, #520]	; (8004b24 <_dtoa_r+0x2dc>)
 800491c:	6018      	str	r0, [r3, #0]
 800491e:	1e43      	subs	r3, r0, #1
 8004920:	9303      	str	r3, [sp, #12]
 8004922:	e7df      	b.n	80048e4 <_dtoa_r+0x9c>
 8004924:	ab16      	add	r3, sp, #88	; 0x58
 8004926:	9301      	str	r3, [sp, #4]
 8004928:	ab17      	add	r3, sp, #92	; 0x5c
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	4628      	mov	r0, r5
 800492e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004932:	f001 f8b7 	bl	8005aa4 <__d2b>
 8004936:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800493a:	4683      	mov	fp, r0
 800493c:	2c00      	cmp	r4, #0
 800493e:	d07f      	beq.n	8004a40 <_dtoa_r+0x1f8>
 8004940:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004946:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800494a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800494e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004952:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004956:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800495a:	2200      	movs	r2, #0
 800495c:	4b72      	ldr	r3, [pc, #456]	; (8004b28 <_dtoa_r+0x2e0>)
 800495e:	f7fb fc03 	bl	8000168 <__aeabi_dsub>
 8004962:	a365      	add	r3, pc, #404	; (adr r3, 8004af8 <_dtoa_r+0x2b0>)
 8004964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004968:	f7fb fdb6 	bl	80004d8 <__aeabi_dmul>
 800496c:	a364      	add	r3, pc, #400	; (adr r3, 8004b00 <_dtoa_r+0x2b8>)
 800496e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004972:	f7fb fbfb 	bl	800016c <__adddf3>
 8004976:	4606      	mov	r6, r0
 8004978:	4620      	mov	r0, r4
 800497a:	460f      	mov	r7, r1
 800497c:	f7fb fd42 	bl	8000404 <__aeabi_i2d>
 8004980:	a361      	add	r3, pc, #388	; (adr r3, 8004b08 <_dtoa_r+0x2c0>)
 8004982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004986:	f7fb fda7 	bl	80004d8 <__aeabi_dmul>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4630      	mov	r0, r6
 8004990:	4639      	mov	r1, r7
 8004992:	f7fb fbeb 	bl	800016c <__adddf3>
 8004996:	4606      	mov	r6, r0
 8004998:	460f      	mov	r7, r1
 800499a:	f7fc f84d 	bl	8000a38 <__aeabi_d2iz>
 800499e:	2200      	movs	r2, #0
 80049a0:	4682      	mov	sl, r0
 80049a2:	2300      	movs	r3, #0
 80049a4:	4630      	mov	r0, r6
 80049a6:	4639      	mov	r1, r7
 80049a8:	f7fc f808 	bl	80009bc <__aeabi_dcmplt>
 80049ac:	b148      	cbz	r0, 80049c2 <_dtoa_r+0x17a>
 80049ae:	4650      	mov	r0, sl
 80049b0:	f7fb fd28 	bl	8000404 <__aeabi_i2d>
 80049b4:	4632      	mov	r2, r6
 80049b6:	463b      	mov	r3, r7
 80049b8:	f7fb fff6 	bl	80009a8 <__aeabi_dcmpeq>
 80049bc:	b908      	cbnz	r0, 80049c2 <_dtoa_r+0x17a>
 80049be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049c2:	f1ba 0f16 	cmp.w	sl, #22
 80049c6:	d858      	bhi.n	8004a7a <_dtoa_r+0x232>
 80049c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80049cc:	4b57      	ldr	r3, [pc, #348]	; (8004b2c <_dtoa_r+0x2e4>)
 80049ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80049d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d6:	f7fb fff1 	bl	80009bc <__aeabi_dcmplt>
 80049da:	2800      	cmp	r0, #0
 80049dc:	d04f      	beq.n	8004a7e <_dtoa_r+0x236>
 80049de:	2300      	movs	r3, #0
 80049e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80049e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80049e8:	1b1c      	subs	r4, r3, r4
 80049ea:	1e63      	subs	r3, r4, #1
 80049ec:	9309      	str	r3, [sp, #36]	; 0x24
 80049ee:	bf49      	itett	mi
 80049f0:	f1c4 0301 	rsbmi	r3, r4, #1
 80049f4:	2300      	movpl	r3, #0
 80049f6:	9306      	strmi	r3, [sp, #24]
 80049f8:	2300      	movmi	r3, #0
 80049fa:	bf54      	ite	pl
 80049fc:	9306      	strpl	r3, [sp, #24]
 80049fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004a00:	f1ba 0f00 	cmp.w	sl, #0
 8004a04:	db3d      	blt.n	8004a82 <_dtoa_r+0x23a>
 8004a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a08:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004a0c:	4453      	add	r3, sl
 8004a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a10:	2300      	movs	r3, #0
 8004a12:	930a      	str	r3, [sp, #40]	; 0x28
 8004a14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a16:	2b09      	cmp	r3, #9
 8004a18:	f200 808c 	bhi.w	8004b34 <_dtoa_r+0x2ec>
 8004a1c:	2b05      	cmp	r3, #5
 8004a1e:	bfc4      	itt	gt
 8004a20:	3b04      	subgt	r3, #4
 8004a22:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004a24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a26:	bfc8      	it	gt
 8004a28:	2400      	movgt	r4, #0
 8004a2a:	f1a3 0302 	sub.w	r3, r3, #2
 8004a2e:	bfd8      	it	le
 8004a30:	2401      	movle	r4, #1
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	f200 808a 	bhi.w	8004b4c <_dtoa_r+0x304>
 8004a38:	e8df f003 	tbb	[pc, r3]
 8004a3c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004a40:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004a44:	441c      	add	r4, r3
 8004a46:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	bfc3      	ittte	gt
 8004a4e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004a52:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004a56:	fa09 f303 	lslgt.w	r3, r9, r3
 8004a5a:	f1c3 0320 	rsble	r3, r3, #32
 8004a5e:	bfc6      	itte	gt
 8004a60:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004a64:	4318      	orrgt	r0, r3
 8004a66:	fa06 f003 	lslle.w	r0, r6, r3
 8004a6a:	f7fb fcbb 	bl	80003e4 <__aeabi_ui2d>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004a74:	3c01      	subs	r4, #1
 8004a76:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a78:	e76f      	b.n	800495a <_dtoa_r+0x112>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e7b2      	b.n	80049e4 <_dtoa_r+0x19c>
 8004a7e:	900f      	str	r0, [sp, #60]	; 0x3c
 8004a80:	e7b1      	b.n	80049e6 <_dtoa_r+0x19e>
 8004a82:	9b06      	ldr	r3, [sp, #24]
 8004a84:	eba3 030a 	sub.w	r3, r3, sl
 8004a88:	9306      	str	r3, [sp, #24]
 8004a8a:	f1ca 0300 	rsb	r3, sl, #0
 8004a8e:	930a      	str	r3, [sp, #40]	; 0x28
 8004a90:	2300      	movs	r3, #0
 8004a92:	930e      	str	r3, [sp, #56]	; 0x38
 8004a94:	e7be      	b.n	8004a14 <_dtoa_r+0x1cc>
 8004a96:	2300      	movs	r3, #0
 8004a98:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	dc58      	bgt.n	8004b52 <_dtoa_r+0x30a>
 8004aa0:	f04f 0901 	mov.w	r9, #1
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	f8cd 9020 	str.w	r9, [sp, #32]
 8004aaa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004aae:	2200      	movs	r2, #0
 8004ab0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004ab2:	6042      	str	r2, [r0, #4]
 8004ab4:	2204      	movs	r2, #4
 8004ab6:	f102 0614 	add.w	r6, r2, #20
 8004aba:	429e      	cmp	r6, r3
 8004abc:	6841      	ldr	r1, [r0, #4]
 8004abe:	d94e      	bls.n	8004b5e <_dtoa_r+0x316>
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	f000 fcc9 	bl	8005458 <_Balloc>
 8004ac6:	9003      	str	r0, [sp, #12]
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d14c      	bne.n	8004b66 <_dtoa_r+0x31e>
 8004acc:	4602      	mov	r2, r0
 8004ace:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004ad2:	4b17      	ldr	r3, [pc, #92]	; (8004b30 <_dtoa_r+0x2e8>)
 8004ad4:	e6cc      	b.n	8004870 <_dtoa_r+0x28>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e7de      	b.n	8004a98 <_dtoa_r+0x250>
 8004ada:	2300      	movs	r3, #0
 8004adc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ade:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ae0:	eb0a 0903 	add.w	r9, sl, r3
 8004ae4:	f109 0301 	add.w	r3, r9, #1
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	9308      	str	r3, [sp, #32]
 8004aec:	bfb8      	it	lt
 8004aee:	2301      	movlt	r3, #1
 8004af0:	e7dd      	b.n	8004aae <_dtoa_r+0x266>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e7f2      	b.n	8004adc <_dtoa_r+0x294>
 8004af6:	bf00      	nop
 8004af8:	636f4361 	.word	0x636f4361
 8004afc:	3fd287a7 	.word	0x3fd287a7
 8004b00:	8b60c8b3 	.word	0x8b60c8b3
 8004b04:	3fc68a28 	.word	0x3fc68a28
 8004b08:	509f79fb 	.word	0x509f79fb
 8004b0c:	3fd34413 	.word	0x3fd34413
 8004b10:	080073f1 	.word	0x080073f1
 8004b14:	08007408 	.word	0x08007408
 8004b18:	7ff00000 	.word	0x7ff00000
 8004b1c:	080073ed 	.word	0x080073ed
 8004b20:	080073e4 	.word	0x080073e4
 8004b24:	080073c1 	.word	0x080073c1
 8004b28:	3ff80000 	.word	0x3ff80000
 8004b2c:	080074f8 	.word	0x080074f8
 8004b30:	08007463 	.word	0x08007463
 8004b34:	2401      	movs	r4, #1
 8004b36:	2300      	movs	r3, #0
 8004b38:	940b      	str	r4, [sp, #44]	; 0x2c
 8004b3a:	9322      	str	r3, [sp, #136]	; 0x88
 8004b3c:	f04f 39ff 	mov.w	r9, #4294967295
 8004b40:	2200      	movs	r2, #0
 8004b42:	2312      	movs	r3, #18
 8004b44:	f8cd 9020 	str.w	r9, [sp, #32]
 8004b48:	9223      	str	r2, [sp, #140]	; 0x8c
 8004b4a:	e7b0      	b.n	8004aae <_dtoa_r+0x266>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b50:	e7f4      	b.n	8004b3c <_dtoa_r+0x2f4>
 8004b52:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004b56:	464b      	mov	r3, r9
 8004b58:	f8cd 9020 	str.w	r9, [sp, #32]
 8004b5c:	e7a7      	b.n	8004aae <_dtoa_r+0x266>
 8004b5e:	3101      	adds	r1, #1
 8004b60:	6041      	str	r1, [r0, #4]
 8004b62:	0052      	lsls	r2, r2, #1
 8004b64:	e7a7      	b.n	8004ab6 <_dtoa_r+0x26e>
 8004b66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004b68:	9a03      	ldr	r2, [sp, #12]
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	9b08      	ldr	r3, [sp, #32]
 8004b6e:	2b0e      	cmp	r3, #14
 8004b70:	f200 80a8 	bhi.w	8004cc4 <_dtoa_r+0x47c>
 8004b74:	2c00      	cmp	r4, #0
 8004b76:	f000 80a5 	beq.w	8004cc4 <_dtoa_r+0x47c>
 8004b7a:	f1ba 0f00 	cmp.w	sl, #0
 8004b7e:	dd34      	ble.n	8004bea <_dtoa_r+0x3a2>
 8004b80:	4a9a      	ldr	r2, [pc, #616]	; (8004dec <_dtoa_r+0x5a4>)
 8004b82:	f00a 030f 	and.w	r3, sl, #15
 8004b86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004b8a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004b8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004b96:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004b9a:	d016      	beq.n	8004bca <_dtoa_r+0x382>
 8004b9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ba0:	4b93      	ldr	r3, [pc, #588]	; (8004df0 <_dtoa_r+0x5a8>)
 8004ba2:	2703      	movs	r7, #3
 8004ba4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ba8:	f7fb fdc0 	bl	800072c <__aeabi_ddiv>
 8004bac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bb0:	f004 040f 	and.w	r4, r4, #15
 8004bb4:	4e8e      	ldr	r6, [pc, #568]	; (8004df0 <_dtoa_r+0x5a8>)
 8004bb6:	b954      	cbnz	r4, 8004bce <_dtoa_r+0x386>
 8004bb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004bbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bc0:	f7fb fdb4 	bl	800072c <__aeabi_ddiv>
 8004bc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bc8:	e029      	b.n	8004c1e <_dtoa_r+0x3d6>
 8004bca:	2702      	movs	r7, #2
 8004bcc:	e7f2      	b.n	8004bb4 <_dtoa_r+0x36c>
 8004bce:	07e1      	lsls	r1, r4, #31
 8004bd0:	d508      	bpl.n	8004be4 <_dtoa_r+0x39c>
 8004bd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004bd6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004bda:	f7fb fc7d 	bl	80004d8 <__aeabi_dmul>
 8004bde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004be2:	3701      	adds	r7, #1
 8004be4:	1064      	asrs	r4, r4, #1
 8004be6:	3608      	adds	r6, #8
 8004be8:	e7e5      	b.n	8004bb6 <_dtoa_r+0x36e>
 8004bea:	f000 80a5 	beq.w	8004d38 <_dtoa_r+0x4f0>
 8004bee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004bf2:	f1ca 0400 	rsb	r4, sl, #0
 8004bf6:	4b7d      	ldr	r3, [pc, #500]	; (8004dec <_dtoa_r+0x5a4>)
 8004bf8:	f004 020f 	and.w	r2, r4, #15
 8004bfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f7fb fc68 	bl	80004d8 <__aeabi_dmul>
 8004c08:	2702      	movs	r7, #2
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c10:	4e77      	ldr	r6, [pc, #476]	; (8004df0 <_dtoa_r+0x5a8>)
 8004c12:	1124      	asrs	r4, r4, #4
 8004c14:	2c00      	cmp	r4, #0
 8004c16:	f040 8084 	bne.w	8004d22 <_dtoa_r+0x4da>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1d2      	bne.n	8004bc4 <_dtoa_r+0x37c>
 8004c1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 808b 	beq.w	8004d3c <_dtoa_r+0x4f4>
 8004c26:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004c2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004c2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c32:	2200      	movs	r2, #0
 8004c34:	4b6f      	ldr	r3, [pc, #444]	; (8004df4 <_dtoa_r+0x5ac>)
 8004c36:	f7fb fec1 	bl	80009bc <__aeabi_dcmplt>
 8004c3a:	2800      	cmp	r0, #0
 8004c3c:	d07e      	beq.n	8004d3c <_dtoa_r+0x4f4>
 8004c3e:	9b08      	ldr	r3, [sp, #32]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d07b      	beq.n	8004d3c <_dtoa_r+0x4f4>
 8004c44:	f1b9 0f00 	cmp.w	r9, #0
 8004c48:	dd38      	ble.n	8004cbc <_dtoa_r+0x474>
 8004c4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c4e:	2200      	movs	r2, #0
 8004c50:	4b69      	ldr	r3, [pc, #420]	; (8004df8 <_dtoa_r+0x5b0>)
 8004c52:	f7fb fc41 	bl	80004d8 <__aeabi_dmul>
 8004c56:	464c      	mov	r4, r9
 8004c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c5c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004c60:	3701      	adds	r7, #1
 8004c62:	4638      	mov	r0, r7
 8004c64:	f7fb fbce 	bl	8000404 <__aeabi_i2d>
 8004c68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c6c:	f7fb fc34 	bl	80004d8 <__aeabi_dmul>
 8004c70:	2200      	movs	r2, #0
 8004c72:	4b62      	ldr	r3, [pc, #392]	; (8004dfc <_dtoa_r+0x5b4>)
 8004c74:	f7fb fa7a 	bl	800016c <__adddf3>
 8004c78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004c7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c80:	9611      	str	r6, [sp, #68]	; 0x44
 8004c82:	2c00      	cmp	r4, #0
 8004c84:	d15d      	bne.n	8004d42 <_dtoa_r+0x4fa>
 8004c86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	4b5c      	ldr	r3, [pc, #368]	; (8004e00 <_dtoa_r+0x5b8>)
 8004c8e:	f7fb fa6b 	bl	8000168 <__aeabi_dsub>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c9a:	4633      	mov	r3, r6
 8004c9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c9e:	f7fb feab 	bl	80009f8 <__aeabi_dcmpgt>
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	f040 829c 	bne.w	80051e0 <_dtoa_r+0x998>
 8004ca8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004cae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004cb2:	f7fb fe83 	bl	80009bc <__aeabi_dcmplt>
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	f040 8290 	bne.w	80051dc <_dtoa_r+0x994>
 8004cbc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004cc0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004cc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f2c0 8152 	blt.w	8004f70 <_dtoa_r+0x728>
 8004ccc:	f1ba 0f0e 	cmp.w	sl, #14
 8004cd0:	f300 814e 	bgt.w	8004f70 <_dtoa_r+0x728>
 8004cd4:	4b45      	ldr	r3, [pc, #276]	; (8004dec <_dtoa_r+0x5a4>)
 8004cd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004cda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004cde:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004ce2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f280 80db 	bge.w	8004ea0 <_dtoa_r+0x658>
 8004cea:	9b08      	ldr	r3, [sp, #32]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f300 80d7 	bgt.w	8004ea0 <_dtoa_r+0x658>
 8004cf2:	f040 8272 	bne.w	80051da <_dtoa_r+0x992>
 8004cf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	4b40      	ldr	r3, [pc, #256]	; (8004e00 <_dtoa_r+0x5b8>)
 8004cfe:	f7fb fbeb 	bl	80004d8 <__aeabi_dmul>
 8004d02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d06:	f7fb fe6d 	bl	80009e4 <__aeabi_dcmpge>
 8004d0a:	9c08      	ldr	r4, [sp, #32]
 8004d0c:	4626      	mov	r6, r4
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	f040 8248 	bne.w	80051a4 <_dtoa_r+0x95c>
 8004d14:	2331      	movs	r3, #49	; 0x31
 8004d16:	9f03      	ldr	r7, [sp, #12]
 8004d18:	f10a 0a01 	add.w	sl, sl, #1
 8004d1c:	f807 3b01 	strb.w	r3, [r7], #1
 8004d20:	e244      	b.n	80051ac <_dtoa_r+0x964>
 8004d22:	07e2      	lsls	r2, r4, #31
 8004d24:	d505      	bpl.n	8004d32 <_dtoa_r+0x4ea>
 8004d26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d2a:	f7fb fbd5 	bl	80004d8 <__aeabi_dmul>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	3701      	adds	r7, #1
 8004d32:	1064      	asrs	r4, r4, #1
 8004d34:	3608      	adds	r6, #8
 8004d36:	e76d      	b.n	8004c14 <_dtoa_r+0x3cc>
 8004d38:	2702      	movs	r7, #2
 8004d3a:	e770      	b.n	8004c1e <_dtoa_r+0x3d6>
 8004d3c:	46d0      	mov	r8, sl
 8004d3e:	9c08      	ldr	r4, [sp, #32]
 8004d40:	e78f      	b.n	8004c62 <_dtoa_r+0x41a>
 8004d42:	9903      	ldr	r1, [sp, #12]
 8004d44:	4b29      	ldr	r3, [pc, #164]	; (8004dec <_dtoa_r+0x5a4>)
 8004d46:	4421      	add	r1, r4
 8004d48:	9112      	str	r1, [sp, #72]	; 0x48
 8004d4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d50:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004d54:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d58:	2900      	cmp	r1, #0
 8004d5a:	d055      	beq.n	8004e08 <_dtoa_r+0x5c0>
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	4929      	ldr	r1, [pc, #164]	; (8004e04 <_dtoa_r+0x5bc>)
 8004d60:	f7fb fce4 	bl	800072c <__aeabi_ddiv>
 8004d64:	463b      	mov	r3, r7
 8004d66:	4632      	mov	r2, r6
 8004d68:	f7fb f9fe 	bl	8000168 <__aeabi_dsub>
 8004d6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d70:	9f03      	ldr	r7, [sp, #12]
 8004d72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d76:	f7fb fe5f 	bl	8000a38 <__aeabi_d2iz>
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	f7fb fb42 	bl	8000404 <__aeabi_i2d>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d88:	f7fb f9ee 	bl	8000168 <__aeabi_dsub>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	3430      	adds	r4, #48	; 0x30
 8004d92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d9a:	f807 4b01 	strb.w	r4, [r7], #1
 8004d9e:	f7fb fe0d 	bl	80009bc <__aeabi_dcmplt>
 8004da2:	2800      	cmp	r0, #0
 8004da4:	d174      	bne.n	8004e90 <_dtoa_r+0x648>
 8004da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004daa:	2000      	movs	r0, #0
 8004dac:	4911      	ldr	r1, [pc, #68]	; (8004df4 <_dtoa_r+0x5ac>)
 8004dae:	f7fb f9db 	bl	8000168 <__aeabi_dsub>
 8004db2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004db6:	f7fb fe01 	bl	80009bc <__aeabi_dcmplt>
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	f040 80b7 	bne.w	8004f2e <_dtoa_r+0x6e6>
 8004dc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004dc2:	429f      	cmp	r7, r3
 8004dc4:	f43f af7a 	beq.w	8004cbc <_dtoa_r+0x474>
 8004dc8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dcc:	2200      	movs	r2, #0
 8004dce:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <_dtoa_r+0x5b0>)
 8004dd0:	f7fb fb82 	bl	80004d8 <__aeabi_dmul>
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004dda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dde:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <_dtoa_r+0x5b0>)
 8004de0:	f7fb fb7a 	bl	80004d8 <__aeabi_dmul>
 8004de4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004de8:	e7c3      	b.n	8004d72 <_dtoa_r+0x52a>
 8004dea:	bf00      	nop
 8004dec:	080074f8 	.word	0x080074f8
 8004df0:	080074d0 	.word	0x080074d0
 8004df4:	3ff00000 	.word	0x3ff00000
 8004df8:	40240000 	.word	0x40240000
 8004dfc:	401c0000 	.word	0x401c0000
 8004e00:	40140000 	.word	0x40140000
 8004e04:	3fe00000 	.word	0x3fe00000
 8004e08:	4630      	mov	r0, r6
 8004e0a:	4639      	mov	r1, r7
 8004e0c:	f7fb fb64 	bl	80004d8 <__aeabi_dmul>
 8004e10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e12:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e16:	9c03      	ldr	r4, [sp, #12]
 8004e18:	9314      	str	r3, [sp, #80]	; 0x50
 8004e1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e1e:	f7fb fe0b 	bl	8000a38 <__aeabi_d2iz>
 8004e22:	9015      	str	r0, [sp, #84]	; 0x54
 8004e24:	f7fb faee 	bl	8000404 <__aeabi_i2d>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e30:	f7fb f99a 	bl	8000168 <__aeabi_dsub>
 8004e34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e36:	4606      	mov	r6, r0
 8004e38:	3330      	adds	r3, #48	; 0x30
 8004e3a:	f804 3b01 	strb.w	r3, [r4], #1
 8004e3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e40:	460f      	mov	r7, r1
 8004e42:	429c      	cmp	r4, r3
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	d124      	bne.n	8004e94 <_dtoa_r+0x64c>
 8004e4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e4e:	4bb0      	ldr	r3, [pc, #704]	; (8005110 <_dtoa_r+0x8c8>)
 8004e50:	f7fb f98c 	bl	800016c <__adddf3>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4630      	mov	r0, r6
 8004e5a:	4639      	mov	r1, r7
 8004e5c:	f7fb fdcc 	bl	80009f8 <__aeabi_dcmpgt>
 8004e60:	2800      	cmp	r0, #0
 8004e62:	d163      	bne.n	8004f2c <_dtoa_r+0x6e4>
 8004e64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e68:	2000      	movs	r0, #0
 8004e6a:	49a9      	ldr	r1, [pc, #676]	; (8005110 <_dtoa_r+0x8c8>)
 8004e6c:	f7fb f97c 	bl	8000168 <__aeabi_dsub>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4630      	mov	r0, r6
 8004e76:	4639      	mov	r1, r7
 8004e78:	f7fb fda0 	bl	80009bc <__aeabi_dcmplt>
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	f43f af1d 	beq.w	8004cbc <_dtoa_r+0x474>
 8004e82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004e84:	1e7b      	subs	r3, r7, #1
 8004e86:	9314      	str	r3, [sp, #80]	; 0x50
 8004e88:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004e8c:	2b30      	cmp	r3, #48	; 0x30
 8004e8e:	d0f8      	beq.n	8004e82 <_dtoa_r+0x63a>
 8004e90:	46c2      	mov	sl, r8
 8004e92:	e03b      	b.n	8004f0c <_dtoa_r+0x6c4>
 8004e94:	4b9f      	ldr	r3, [pc, #636]	; (8005114 <_dtoa_r+0x8cc>)
 8004e96:	f7fb fb1f 	bl	80004d8 <__aeabi_dmul>
 8004e9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e9e:	e7bc      	b.n	8004e1a <_dtoa_r+0x5d2>
 8004ea0:	9f03      	ldr	r7, [sp, #12]
 8004ea2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004ea6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004eaa:	4640      	mov	r0, r8
 8004eac:	4649      	mov	r1, r9
 8004eae:	f7fb fc3d 	bl	800072c <__aeabi_ddiv>
 8004eb2:	f7fb fdc1 	bl	8000a38 <__aeabi_d2iz>
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	f7fb faa4 	bl	8000404 <__aeabi_i2d>
 8004ebc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ec0:	f7fb fb0a 	bl	80004d8 <__aeabi_dmul>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4640      	mov	r0, r8
 8004eca:	4649      	mov	r1, r9
 8004ecc:	f7fb f94c 	bl	8000168 <__aeabi_dsub>
 8004ed0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004ed4:	f807 6b01 	strb.w	r6, [r7], #1
 8004ed8:	9e03      	ldr	r6, [sp, #12]
 8004eda:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004ede:	1bbe      	subs	r6, r7, r6
 8004ee0:	45b4      	cmp	ip, r6
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	d136      	bne.n	8004f56 <_dtoa_r+0x70e>
 8004ee8:	f7fb f940 	bl	800016c <__adddf3>
 8004eec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ef0:	4680      	mov	r8, r0
 8004ef2:	4689      	mov	r9, r1
 8004ef4:	f7fb fd80 	bl	80009f8 <__aeabi_dcmpgt>
 8004ef8:	bb58      	cbnz	r0, 8004f52 <_dtoa_r+0x70a>
 8004efa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004efe:	4640      	mov	r0, r8
 8004f00:	4649      	mov	r1, r9
 8004f02:	f7fb fd51 	bl	80009a8 <__aeabi_dcmpeq>
 8004f06:	b108      	cbz	r0, 8004f0c <_dtoa_r+0x6c4>
 8004f08:	07e1      	lsls	r1, r4, #31
 8004f0a:	d422      	bmi.n	8004f52 <_dtoa_r+0x70a>
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	4659      	mov	r1, fp
 8004f10:	f000 fae2 	bl	80054d8 <_Bfree>
 8004f14:	2300      	movs	r3, #0
 8004f16:	703b      	strb	r3, [r7, #0]
 8004f18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004f1a:	f10a 0001 	add.w	r0, sl, #1
 8004f1e:	6018      	str	r0, [r3, #0]
 8004f20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f43f acde 	beq.w	80048e4 <_dtoa_r+0x9c>
 8004f28:	601f      	str	r7, [r3, #0]
 8004f2a:	e4db      	b.n	80048e4 <_dtoa_r+0x9c>
 8004f2c:	4627      	mov	r7, r4
 8004f2e:	463b      	mov	r3, r7
 8004f30:	461f      	mov	r7, r3
 8004f32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f36:	2a39      	cmp	r2, #57	; 0x39
 8004f38:	d107      	bne.n	8004f4a <_dtoa_r+0x702>
 8004f3a:	9a03      	ldr	r2, [sp, #12]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d1f7      	bne.n	8004f30 <_dtoa_r+0x6e8>
 8004f40:	2230      	movs	r2, #48	; 0x30
 8004f42:	9903      	ldr	r1, [sp, #12]
 8004f44:	f108 0801 	add.w	r8, r8, #1
 8004f48:	700a      	strb	r2, [r1, #0]
 8004f4a:	781a      	ldrb	r2, [r3, #0]
 8004f4c:	3201      	adds	r2, #1
 8004f4e:	701a      	strb	r2, [r3, #0]
 8004f50:	e79e      	b.n	8004e90 <_dtoa_r+0x648>
 8004f52:	46d0      	mov	r8, sl
 8004f54:	e7eb      	b.n	8004f2e <_dtoa_r+0x6e6>
 8004f56:	2200      	movs	r2, #0
 8004f58:	4b6e      	ldr	r3, [pc, #440]	; (8005114 <_dtoa_r+0x8cc>)
 8004f5a:	f7fb fabd 	bl	80004d8 <__aeabi_dmul>
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2300      	movs	r3, #0
 8004f62:	4680      	mov	r8, r0
 8004f64:	4689      	mov	r9, r1
 8004f66:	f7fb fd1f 	bl	80009a8 <__aeabi_dcmpeq>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	d09b      	beq.n	8004ea6 <_dtoa_r+0x65e>
 8004f6e:	e7cd      	b.n	8004f0c <_dtoa_r+0x6c4>
 8004f70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f72:	2a00      	cmp	r2, #0
 8004f74:	f000 80d0 	beq.w	8005118 <_dtoa_r+0x8d0>
 8004f78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004f7a:	2a01      	cmp	r2, #1
 8004f7c:	f300 80ae 	bgt.w	80050dc <_dtoa_r+0x894>
 8004f80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004f82:	2a00      	cmp	r2, #0
 8004f84:	f000 80a6 	beq.w	80050d4 <_dtoa_r+0x88c>
 8004f88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004f8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004f8e:	9f06      	ldr	r7, [sp, #24]
 8004f90:	9a06      	ldr	r2, [sp, #24]
 8004f92:	2101      	movs	r1, #1
 8004f94:	441a      	add	r2, r3
 8004f96:	9206      	str	r2, [sp, #24]
 8004f98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	441a      	add	r2, r3
 8004f9e:	9209      	str	r2, [sp, #36]	; 0x24
 8004fa0:	f000 fb50 	bl	8005644 <__i2b>
 8004fa4:	4606      	mov	r6, r0
 8004fa6:	2f00      	cmp	r7, #0
 8004fa8:	dd0c      	ble.n	8004fc4 <_dtoa_r+0x77c>
 8004faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	dd09      	ble.n	8004fc4 <_dtoa_r+0x77c>
 8004fb0:	42bb      	cmp	r3, r7
 8004fb2:	bfa8      	it	ge
 8004fb4:	463b      	movge	r3, r7
 8004fb6:	9a06      	ldr	r2, [sp, #24]
 8004fb8:	1aff      	subs	r7, r7, r3
 8004fba:	1ad2      	subs	r2, r2, r3
 8004fbc:	9206      	str	r2, [sp, #24]
 8004fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8004fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fc6:	b1f3      	cbz	r3, 8005006 <_dtoa_r+0x7be>
 8004fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 80a8 	beq.w	8005120 <_dtoa_r+0x8d8>
 8004fd0:	2c00      	cmp	r4, #0
 8004fd2:	dd10      	ble.n	8004ff6 <_dtoa_r+0x7ae>
 8004fd4:	4631      	mov	r1, r6
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	4628      	mov	r0, r5
 8004fda:	f000 fbf1 	bl	80057c0 <__pow5mult>
 8004fde:	465a      	mov	r2, fp
 8004fe0:	4601      	mov	r1, r0
 8004fe2:	4606      	mov	r6, r0
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	f000 fb43 	bl	8005670 <__multiply>
 8004fea:	4680      	mov	r8, r0
 8004fec:	4659      	mov	r1, fp
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f000 fa72 	bl	80054d8 <_Bfree>
 8004ff4:	46c3      	mov	fp, r8
 8004ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ff8:	1b1a      	subs	r2, r3, r4
 8004ffa:	d004      	beq.n	8005006 <_dtoa_r+0x7be>
 8004ffc:	4659      	mov	r1, fp
 8004ffe:	4628      	mov	r0, r5
 8005000:	f000 fbde 	bl	80057c0 <__pow5mult>
 8005004:	4683      	mov	fp, r0
 8005006:	2101      	movs	r1, #1
 8005008:	4628      	mov	r0, r5
 800500a:	f000 fb1b 	bl	8005644 <__i2b>
 800500e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005010:	4604      	mov	r4, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	f340 8086 	ble.w	8005124 <_dtoa_r+0x8dc>
 8005018:	461a      	mov	r2, r3
 800501a:	4601      	mov	r1, r0
 800501c:	4628      	mov	r0, r5
 800501e:	f000 fbcf 	bl	80057c0 <__pow5mult>
 8005022:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005024:	4604      	mov	r4, r0
 8005026:	2b01      	cmp	r3, #1
 8005028:	dd7f      	ble.n	800512a <_dtoa_r+0x8e2>
 800502a:	f04f 0800 	mov.w	r8, #0
 800502e:	6923      	ldr	r3, [r4, #16]
 8005030:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005034:	6918      	ldr	r0, [r3, #16]
 8005036:	f000 fab7 	bl	80055a8 <__hi0bits>
 800503a:	f1c0 0020 	rsb	r0, r0, #32
 800503e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005040:	4418      	add	r0, r3
 8005042:	f010 001f 	ands.w	r0, r0, #31
 8005046:	f000 8092 	beq.w	800516e <_dtoa_r+0x926>
 800504a:	f1c0 0320 	rsb	r3, r0, #32
 800504e:	2b04      	cmp	r3, #4
 8005050:	f340 808a 	ble.w	8005168 <_dtoa_r+0x920>
 8005054:	f1c0 001c 	rsb	r0, r0, #28
 8005058:	9b06      	ldr	r3, [sp, #24]
 800505a:	4407      	add	r7, r0
 800505c:	4403      	add	r3, r0
 800505e:	9306      	str	r3, [sp, #24]
 8005060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005062:	4403      	add	r3, r0
 8005064:	9309      	str	r3, [sp, #36]	; 0x24
 8005066:	9b06      	ldr	r3, [sp, #24]
 8005068:	2b00      	cmp	r3, #0
 800506a:	dd05      	ble.n	8005078 <_dtoa_r+0x830>
 800506c:	4659      	mov	r1, fp
 800506e:	461a      	mov	r2, r3
 8005070:	4628      	mov	r0, r5
 8005072:	f000 fbff 	bl	8005874 <__lshift>
 8005076:	4683      	mov	fp, r0
 8005078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800507a:	2b00      	cmp	r3, #0
 800507c:	dd05      	ble.n	800508a <_dtoa_r+0x842>
 800507e:	4621      	mov	r1, r4
 8005080:	461a      	mov	r2, r3
 8005082:	4628      	mov	r0, r5
 8005084:	f000 fbf6 	bl	8005874 <__lshift>
 8005088:	4604      	mov	r4, r0
 800508a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800508c:	2b00      	cmp	r3, #0
 800508e:	d070      	beq.n	8005172 <_dtoa_r+0x92a>
 8005090:	4621      	mov	r1, r4
 8005092:	4658      	mov	r0, fp
 8005094:	f000 fc5e 	bl	8005954 <__mcmp>
 8005098:	2800      	cmp	r0, #0
 800509a:	da6a      	bge.n	8005172 <_dtoa_r+0x92a>
 800509c:	2300      	movs	r3, #0
 800509e:	4659      	mov	r1, fp
 80050a0:	220a      	movs	r2, #10
 80050a2:	4628      	mov	r0, r5
 80050a4:	f000 fa3a 	bl	800551c <__multadd>
 80050a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050aa:	4683      	mov	fp, r0
 80050ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 8194 	beq.w	80053de <_dtoa_r+0xb96>
 80050b6:	4631      	mov	r1, r6
 80050b8:	2300      	movs	r3, #0
 80050ba:	220a      	movs	r2, #10
 80050bc:	4628      	mov	r0, r5
 80050be:	f000 fa2d 	bl	800551c <__multadd>
 80050c2:	f1b9 0f00 	cmp.w	r9, #0
 80050c6:	4606      	mov	r6, r0
 80050c8:	f300 8093 	bgt.w	80051f2 <_dtoa_r+0x9aa>
 80050cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	dc57      	bgt.n	8005182 <_dtoa_r+0x93a>
 80050d2:	e08e      	b.n	80051f2 <_dtoa_r+0x9aa>
 80050d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80050d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80050da:	e757      	b.n	8004f8c <_dtoa_r+0x744>
 80050dc:	9b08      	ldr	r3, [sp, #32]
 80050de:	1e5c      	subs	r4, r3, #1
 80050e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050e2:	42a3      	cmp	r3, r4
 80050e4:	bfb7      	itett	lt
 80050e6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80050e8:	1b1c      	subge	r4, r3, r4
 80050ea:	1ae2      	sublt	r2, r4, r3
 80050ec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80050ee:	bfbe      	ittt	lt
 80050f0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80050f2:	189b      	addlt	r3, r3, r2
 80050f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80050f6:	9b08      	ldr	r3, [sp, #32]
 80050f8:	bfb8      	it	lt
 80050fa:	2400      	movlt	r4, #0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	bfbb      	ittet	lt
 8005100:	9b06      	ldrlt	r3, [sp, #24]
 8005102:	9a08      	ldrlt	r2, [sp, #32]
 8005104:	9f06      	ldrge	r7, [sp, #24]
 8005106:	1a9f      	sublt	r7, r3, r2
 8005108:	bfac      	ite	ge
 800510a:	9b08      	ldrge	r3, [sp, #32]
 800510c:	2300      	movlt	r3, #0
 800510e:	e73f      	b.n	8004f90 <_dtoa_r+0x748>
 8005110:	3fe00000 	.word	0x3fe00000
 8005114:	40240000 	.word	0x40240000
 8005118:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800511a:	9f06      	ldr	r7, [sp, #24]
 800511c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800511e:	e742      	b.n	8004fa6 <_dtoa_r+0x75e>
 8005120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005122:	e76b      	b.n	8004ffc <_dtoa_r+0x7b4>
 8005124:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005126:	2b01      	cmp	r3, #1
 8005128:	dc19      	bgt.n	800515e <_dtoa_r+0x916>
 800512a:	9b04      	ldr	r3, [sp, #16]
 800512c:	b9bb      	cbnz	r3, 800515e <_dtoa_r+0x916>
 800512e:	9b05      	ldr	r3, [sp, #20]
 8005130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005134:	b99b      	cbnz	r3, 800515e <_dtoa_r+0x916>
 8005136:	9b05      	ldr	r3, [sp, #20]
 8005138:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800513c:	0d1b      	lsrs	r3, r3, #20
 800513e:	051b      	lsls	r3, r3, #20
 8005140:	b183      	cbz	r3, 8005164 <_dtoa_r+0x91c>
 8005142:	f04f 0801 	mov.w	r8, #1
 8005146:	9b06      	ldr	r3, [sp, #24]
 8005148:	3301      	adds	r3, #1
 800514a:	9306      	str	r3, [sp, #24]
 800514c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800514e:	3301      	adds	r3, #1
 8005150:	9309      	str	r3, [sp, #36]	; 0x24
 8005152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005154:	2b00      	cmp	r3, #0
 8005156:	f47f af6a 	bne.w	800502e <_dtoa_r+0x7e6>
 800515a:	2001      	movs	r0, #1
 800515c:	e76f      	b.n	800503e <_dtoa_r+0x7f6>
 800515e:	f04f 0800 	mov.w	r8, #0
 8005162:	e7f6      	b.n	8005152 <_dtoa_r+0x90a>
 8005164:	4698      	mov	r8, r3
 8005166:	e7f4      	b.n	8005152 <_dtoa_r+0x90a>
 8005168:	f43f af7d 	beq.w	8005066 <_dtoa_r+0x81e>
 800516c:	4618      	mov	r0, r3
 800516e:	301c      	adds	r0, #28
 8005170:	e772      	b.n	8005058 <_dtoa_r+0x810>
 8005172:	9b08      	ldr	r3, [sp, #32]
 8005174:	2b00      	cmp	r3, #0
 8005176:	dc36      	bgt.n	80051e6 <_dtoa_r+0x99e>
 8005178:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800517a:	2b02      	cmp	r3, #2
 800517c:	dd33      	ble.n	80051e6 <_dtoa_r+0x99e>
 800517e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005182:	f1b9 0f00 	cmp.w	r9, #0
 8005186:	d10d      	bne.n	80051a4 <_dtoa_r+0x95c>
 8005188:	4621      	mov	r1, r4
 800518a:	464b      	mov	r3, r9
 800518c:	2205      	movs	r2, #5
 800518e:	4628      	mov	r0, r5
 8005190:	f000 f9c4 	bl	800551c <__multadd>
 8005194:	4601      	mov	r1, r0
 8005196:	4604      	mov	r4, r0
 8005198:	4658      	mov	r0, fp
 800519a:	f000 fbdb 	bl	8005954 <__mcmp>
 800519e:	2800      	cmp	r0, #0
 80051a0:	f73f adb8 	bgt.w	8004d14 <_dtoa_r+0x4cc>
 80051a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051a6:	9f03      	ldr	r7, [sp, #12]
 80051a8:	ea6f 0a03 	mvn.w	sl, r3
 80051ac:	f04f 0800 	mov.w	r8, #0
 80051b0:	4621      	mov	r1, r4
 80051b2:	4628      	mov	r0, r5
 80051b4:	f000 f990 	bl	80054d8 <_Bfree>
 80051b8:	2e00      	cmp	r6, #0
 80051ba:	f43f aea7 	beq.w	8004f0c <_dtoa_r+0x6c4>
 80051be:	f1b8 0f00 	cmp.w	r8, #0
 80051c2:	d005      	beq.n	80051d0 <_dtoa_r+0x988>
 80051c4:	45b0      	cmp	r8, r6
 80051c6:	d003      	beq.n	80051d0 <_dtoa_r+0x988>
 80051c8:	4641      	mov	r1, r8
 80051ca:	4628      	mov	r0, r5
 80051cc:	f000 f984 	bl	80054d8 <_Bfree>
 80051d0:	4631      	mov	r1, r6
 80051d2:	4628      	mov	r0, r5
 80051d4:	f000 f980 	bl	80054d8 <_Bfree>
 80051d8:	e698      	b.n	8004f0c <_dtoa_r+0x6c4>
 80051da:	2400      	movs	r4, #0
 80051dc:	4626      	mov	r6, r4
 80051de:	e7e1      	b.n	80051a4 <_dtoa_r+0x95c>
 80051e0:	46c2      	mov	sl, r8
 80051e2:	4626      	mov	r6, r4
 80051e4:	e596      	b.n	8004d14 <_dtoa_r+0x4cc>
 80051e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80fd 	beq.w	80053ec <_dtoa_r+0xba4>
 80051f2:	2f00      	cmp	r7, #0
 80051f4:	dd05      	ble.n	8005202 <_dtoa_r+0x9ba>
 80051f6:	4631      	mov	r1, r6
 80051f8:	463a      	mov	r2, r7
 80051fa:	4628      	mov	r0, r5
 80051fc:	f000 fb3a 	bl	8005874 <__lshift>
 8005200:	4606      	mov	r6, r0
 8005202:	f1b8 0f00 	cmp.w	r8, #0
 8005206:	d05c      	beq.n	80052c2 <_dtoa_r+0xa7a>
 8005208:	4628      	mov	r0, r5
 800520a:	6871      	ldr	r1, [r6, #4]
 800520c:	f000 f924 	bl	8005458 <_Balloc>
 8005210:	4607      	mov	r7, r0
 8005212:	b928      	cbnz	r0, 8005220 <_dtoa_r+0x9d8>
 8005214:	4602      	mov	r2, r0
 8005216:	f240 21ea 	movw	r1, #746	; 0x2ea
 800521a:	4b7f      	ldr	r3, [pc, #508]	; (8005418 <_dtoa_r+0xbd0>)
 800521c:	f7ff bb28 	b.w	8004870 <_dtoa_r+0x28>
 8005220:	6932      	ldr	r2, [r6, #16]
 8005222:	f106 010c 	add.w	r1, r6, #12
 8005226:	3202      	adds	r2, #2
 8005228:	0092      	lsls	r2, r2, #2
 800522a:	300c      	adds	r0, #12
 800522c:	f7fe fdd0 	bl	8003dd0 <memcpy>
 8005230:	2201      	movs	r2, #1
 8005232:	4639      	mov	r1, r7
 8005234:	4628      	mov	r0, r5
 8005236:	f000 fb1d 	bl	8005874 <__lshift>
 800523a:	46b0      	mov	r8, r6
 800523c:	4606      	mov	r6, r0
 800523e:	9b03      	ldr	r3, [sp, #12]
 8005240:	3301      	adds	r3, #1
 8005242:	9308      	str	r3, [sp, #32]
 8005244:	9b03      	ldr	r3, [sp, #12]
 8005246:	444b      	add	r3, r9
 8005248:	930a      	str	r3, [sp, #40]	; 0x28
 800524a:	9b04      	ldr	r3, [sp, #16]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	9309      	str	r3, [sp, #36]	; 0x24
 8005252:	9b08      	ldr	r3, [sp, #32]
 8005254:	4621      	mov	r1, r4
 8005256:	3b01      	subs	r3, #1
 8005258:	4658      	mov	r0, fp
 800525a:	9304      	str	r3, [sp, #16]
 800525c:	f7ff fa68 	bl	8004730 <quorem>
 8005260:	4603      	mov	r3, r0
 8005262:	4641      	mov	r1, r8
 8005264:	3330      	adds	r3, #48	; 0x30
 8005266:	9006      	str	r0, [sp, #24]
 8005268:	4658      	mov	r0, fp
 800526a:	930b      	str	r3, [sp, #44]	; 0x2c
 800526c:	f000 fb72 	bl	8005954 <__mcmp>
 8005270:	4632      	mov	r2, r6
 8005272:	4681      	mov	r9, r0
 8005274:	4621      	mov	r1, r4
 8005276:	4628      	mov	r0, r5
 8005278:	f000 fb88 	bl	800598c <__mdiff>
 800527c:	68c2      	ldr	r2, [r0, #12]
 800527e:	4607      	mov	r7, r0
 8005280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005282:	bb02      	cbnz	r2, 80052c6 <_dtoa_r+0xa7e>
 8005284:	4601      	mov	r1, r0
 8005286:	4658      	mov	r0, fp
 8005288:	f000 fb64 	bl	8005954 <__mcmp>
 800528c:	4602      	mov	r2, r0
 800528e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005290:	4639      	mov	r1, r7
 8005292:	4628      	mov	r0, r5
 8005294:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005298:	f000 f91e 	bl	80054d8 <_Bfree>
 800529c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800529e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052a0:	9f08      	ldr	r7, [sp, #32]
 80052a2:	ea43 0102 	orr.w	r1, r3, r2
 80052a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052a8:	430b      	orrs	r3, r1
 80052aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052ac:	d10d      	bne.n	80052ca <_dtoa_r+0xa82>
 80052ae:	2b39      	cmp	r3, #57	; 0x39
 80052b0:	d029      	beq.n	8005306 <_dtoa_r+0xabe>
 80052b2:	f1b9 0f00 	cmp.w	r9, #0
 80052b6:	dd01      	ble.n	80052bc <_dtoa_r+0xa74>
 80052b8:	9b06      	ldr	r3, [sp, #24]
 80052ba:	3331      	adds	r3, #49	; 0x31
 80052bc:	9a04      	ldr	r2, [sp, #16]
 80052be:	7013      	strb	r3, [r2, #0]
 80052c0:	e776      	b.n	80051b0 <_dtoa_r+0x968>
 80052c2:	4630      	mov	r0, r6
 80052c4:	e7b9      	b.n	800523a <_dtoa_r+0x9f2>
 80052c6:	2201      	movs	r2, #1
 80052c8:	e7e2      	b.n	8005290 <_dtoa_r+0xa48>
 80052ca:	f1b9 0f00 	cmp.w	r9, #0
 80052ce:	db06      	blt.n	80052de <_dtoa_r+0xa96>
 80052d0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80052d2:	ea41 0909 	orr.w	r9, r1, r9
 80052d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052d8:	ea59 0101 	orrs.w	r1, r9, r1
 80052dc:	d120      	bne.n	8005320 <_dtoa_r+0xad8>
 80052de:	2a00      	cmp	r2, #0
 80052e0:	ddec      	ble.n	80052bc <_dtoa_r+0xa74>
 80052e2:	4659      	mov	r1, fp
 80052e4:	2201      	movs	r2, #1
 80052e6:	4628      	mov	r0, r5
 80052e8:	9308      	str	r3, [sp, #32]
 80052ea:	f000 fac3 	bl	8005874 <__lshift>
 80052ee:	4621      	mov	r1, r4
 80052f0:	4683      	mov	fp, r0
 80052f2:	f000 fb2f 	bl	8005954 <__mcmp>
 80052f6:	2800      	cmp	r0, #0
 80052f8:	9b08      	ldr	r3, [sp, #32]
 80052fa:	dc02      	bgt.n	8005302 <_dtoa_r+0xaba>
 80052fc:	d1de      	bne.n	80052bc <_dtoa_r+0xa74>
 80052fe:	07da      	lsls	r2, r3, #31
 8005300:	d5dc      	bpl.n	80052bc <_dtoa_r+0xa74>
 8005302:	2b39      	cmp	r3, #57	; 0x39
 8005304:	d1d8      	bne.n	80052b8 <_dtoa_r+0xa70>
 8005306:	2339      	movs	r3, #57	; 0x39
 8005308:	9a04      	ldr	r2, [sp, #16]
 800530a:	7013      	strb	r3, [r2, #0]
 800530c:	463b      	mov	r3, r7
 800530e:	461f      	mov	r7, r3
 8005310:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005314:	3b01      	subs	r3, #1
 8005316:	2a39      	cmp	r2, #57	; 0x39
 8005318:	d050      	beq.n	80053bc <_dtoa_r+0xb74>
 800531a:	3201      	adds	r2, #1
 800531c:	701a      	strb	r2, [r3, #0]
 800531e:	e747      	b.n	80051b0 <_dtoa_r+0x968>
 8005320:	2a00      	cmp	r2, #0
 8005322:	dd03      	ble.n	800532c <_dtoa_r+0xae4>
 8005324:	2b39      	cmp	r3, #57	; 0x39
 8005326:	d0ee      	beq.n	8005306 <_dtoa_r+0xabe>
 8005328:	3301      	adds	r3, #1
 800532a:	e7c7      	b.n	80052bc <_dtoa_r+0xa74>
 800532c:	9a08      	ldr	r2, [sp, #32]
 800532e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005330:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005334:	428a      	cmp	r2, r1
 8005336:	d02a      	beq.n	800538e <_dtoa_r+0xb46>
 8005338:	4659      	mov	r1, fp
 800533a:	2300      	movs	r3, #0
 800533c:	220a      	movs	r2, #10
 800533e:	4628      	mov	r0, r5
 8005340:	f000 f8ec 	bl	800551c <__multadd>
 8005344:	45b0      	cmp	r8, r6
 8005346:	4683      	mov	fp, r0
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	f04f 020a 	mov.w	r2, #10
 8005350:	4641      	mov	r1, r8
 8005352:	4628      	mov	r0, r5
 8005354:	d107      	bne.n	8005366 <_dtoa_r+0xb1e>
 8005356:	f000 f8e1 	bl	800551c <__multadd>
 800535a:	4680      	mov	r8, r0
 800535c:	4606      	mov	r6, r0
 800535e:	9b08      	ldr	r3, [sp, #32]
 8005360:	3301      	adds	r3, #1
 8005362:	9308      	str	r3, [sp, #32]
 8005364:	e775      	b.n	8005252 <_dtoa_r+0xa0a>
 8005366:	f000 f8d9 	bl	800551c <__multadd>
 800536a:	4631      	mov	r1, r6
 800536c:	4680      	mov	r8, r0
 800536e:	2300      	movs	r3, #0
 8005370:	220a      	movs	r2, #10
 8005372:	4628      	mov	r0, r5
 8005374:	f000 f8d2 	bl	800551c <__multadd>
 8005378:	4606      	mov	r6, r0
 800537a:	e7f0      	b.n	800535e <_dtoa_r+0xb16>
 800537c:	f1b9 0f00 	cmp.w	r9, #0
 8005380:	bfcc      	ite	gt
 8005382:	464f      	movgt	r7, r9
 8005384:	2701      	movle	r7, #1
 8005386:	f04f 0800 	mov.w	r8, #0
 800538a:	9a03      	ldr	r2, [sp, #12]
 800538c:	4417      	add	r7, r2
 800538e:	4659      	mov	r1, fp
 8005390:	2201      	movs	r2, #1
 8005392:	4628      	mov	r0, r5
 8005394:	9308      	str	r3, [sp, #32]
 8005396:	f000 fa6d 	bl	8005874 <__lshift>
 800539a:	4621      	mov	r1, r4
 800539c:	4683      	mov	fp, r0
 800539e:	f000 fad9 	bl	8005954 <__mcmp>
 80053a2:	2800      	cmp	r0, #0
 80053a4:	dcb2      	bgt.n	800530c <_dtoa_r+0xac4>
 80053a6:	d102      	bne.n	80053ae <_dtoa_r+0xb66>
 80053a8:	9b08      	ldr	r3, [sp, #32]
 80053aa:	07db      	lsls	r3, r3, #31
 80053ac:	d4ae      	bmi.n	800530c <_dtoa_r+0xac4>
 80053ae:	463b      	mov	r3, r7
 80053b0:	461f      	mov	r7, r3
 80053b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053b6:	2a30      	cmp	r2, #48	; 0x30
 80053b8:	d0fa      	beq.n	80053b0 <_dtoa_r+0xb68>
 80053ba:	e6f9      	b.n	80051b0 <_dtoa_r+0x968>
 80053bc:	9a03      	ldr	r2, [sp, #12]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d1a5      	bne.n	800530e <_dtoa_r+0xac6>
 80053c2:	2331      	movs	r3, #49	; 0x31
 80053c4:	f10a 0a01 	add.w	sl, sl, #1
 80053c8:	e779      	b.n	80052be <_dtoa_r+0xa76>
 80053ca:	4b14      	ldr	r3, [pc, #80]	; (800541c <_dtoa_r+0xbd4>)
 80053cc:	f7ff baa8 	b.w	8004920 <_dtoa_r+0xd8>
 80053d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f47f aa81 	bne.w	80048da <_dtoa_r+0x92>
 80053d8:	4b11      	ldr	r3, [pc, #68]	; (8005420 <_dtoa_r+0xbd8>)
 80053da:	f7ff baa1 	b.w	8004920 <_dtoa_r+0xd8>
 80053de:	f1b9 0f00 	cmp.w	r9, #0
 80053e2:	dc03      	bgt.n	80053ec <_dtoa_r+0xba4>
 80053e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	f73f aecb 	bgt.w	8005182 <_dtoa_r+0x93a>
 80053ec:	9f03      	ldr	r7, [sp, #12]
 80053ee:	4621      	mov	r1, r4
 80053f0:	4658      	mov	r0, fp
 80053f2:	f7ff f99d 	bl	8004730 <quorem>
 80053f6:	9a03      	ldr	r2, [sp, #12]
 80053f8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80053fc:	f807 3b01 	strb.w	r3, [r7], #1
 8005400:	1aba      	subs	r2, r7, r2
 8005402:	4591      	cmp	r9, r2
 8005404:	ddba      	ble.n	800537c <_dtoa_r+0xb34>
 8005406:	4659      	mov	r1, fp
 8005408:	2300      	movs	r3, #0
 800540a:	220a      	movs	r2, #10
 800540c:	4628      	mov	r0, r5
 800540e:	f000 f885 	bl	800551c <__multadd>
 8005412:	4683      	mov	fp, r0
 8005414:	e7eb      	b.n	80053ee <_dtoa_r+0xba6>
 8005416:	bf00      	nop
 8005418:	08007463 	.word	0x08007463
 800541c:	080073c0 	.word	0x080073c0
 8005420:	080073e4 	.word	0x080073e4

08005424 <_localeconv_r>:
 8005424:	4800      	ldr	r0, [pc, #0]	; (8005428 <_localeconv_r+0x4>)
 8005426:	4770      	bx	lr
 8005428:	20000174 	.word	0x20000174

0800542c <malloc>:
 800542c:	4b02      	ldr	r3, [pc, #8]	; (8005438 <malloc+0xc>)
 800542e:	4601      	mov	r1, r0
 8005430:	6818      	ldr	r0, [r3, #0]
 8005432:	f000 bc0f 	b.w	8005c54 <_malloc_r>
 8005436:	bf00      	nop
 8005438:	20000020 	.word	0x20000020

0800543c <memchr>:
 800543c:	4603      	mov	r3, r0
 800543e:	b510      	push	{r4, lr}
 8005440:	b2c9      	uxtb	r1, r1
 8005442:	4402      	add	r2, r0
 8005444:	4293      	cmp	r3, r2
 8005446:	4618      	mov	r0, r3
 8005448:	d101      	bne.n	800544e <memchr+0x12>
 800544a:	2000      	movs	r0, #0
 800544c:	e003      	b.n	8005456 <memchr+0x1a>
 800544e:	7804      	ldrb	r4, [r0, #0]
 8005450:	3301      	adds	r3, #1
 8005452:	428c      	cmp	r4, r1
 8005454:	d1f6      	bne.n	8005444 <memchr+0x8>
 8005456:	bd10      	pop	{r4, pc}

08005458 <_Balloc>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800545c:	4604      	mov	r4, r0
 800545e:	460d      	mov	r5, r1
 8005460:	b976      	cbnz	r6, 8005480 <_Balloc+0x28>
 8005462:	2010      	movs	r0, #16
 8005464:	f7ff ffe2 	bl	800542c <malloc>
 8005468:	4602      	mov	r2, r0
 800546a:	6260      	str	r0, [r4, #36]	; 0x24
 800546c:	b920      	cbnz	r0, 8005478 <_Balloc+0x20>
 800546e:	2166      	movs	r1, #102	; 0x66
 8005470:	4b17      	ldr	r3, [pc, #92]	; (80054d0 <_Balloc+0x78>)
 8005472:	4818      	ldr	r0, [pc, #96]	; (80054d4 <_Balloc+0x7c>)
 8005474:	f000 fdce 	bl	8006014 <__assert_func>
 8005478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800547c:	6006      	str	r6, [r0, #0]
 800547e:	60c6      	str	r6, [r0, #12]
 8005480:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005482:	68f3      	ldr	r3, [r6, #12]
 8005484:	b183      	cbz	r3, 80054a8 <_Balloc+0x50>
 8005486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800548e:	b9b8      	cbnz	r0, 80054c0 <_Balloc+0x68>
 8005490:	2101      	movs	r1, #1
 8005492:	fa01 f605 	lsl.w	r6, r1, r5
 8005496:	1d72      	adds	r2, r6, #5
 8005498:	4620      	mov	r0, r4
 800549a:	0092      	lsls	r2, r2, #2
 800549c:	f000 fb5e 	bl	8005b5c <_calloc_r>
 80054a0:	b160      	cbz	r0, 80054bc <_Balloc+0x64>
 80054a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80054a6:	e00e      	b.n	80054c6 <_Balloc+0x6e>
 80054a8:	2221      	movs	r2, #33	; 0x21
 80054aa:	2104      	movs	r1, #4
 80054ac:	4620      	mov	r0, r4
 80054ae:	f000 fb55 	bl	8005b5c <_calloc_r>
 80054b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054b4:	60f0      	str	r0, [r6, #12]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e4      	bne.n	8005486 <_Balloc+0x2e>
 80054bc:	2000      	movs	r0, #0
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	6802      	ldr	r2, [r0, #0]
 80054c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80054c6:	2300      	movs	r3, #0
 80054c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80054cc:	e7f7      	b.n	80054be <_Balloc+0x66>
 80054ce:	bf00      	nop
 80054d0:	080073f1 	.word	0x080073f1
 80054d4:	08007474 	.word	0x08007474

080054d8 <_Bfree>:
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80054dc:	4605      	mov	r5, r0
 80054de:	460c      	mov	r4, r1
 80054e0:	b976      	cbnz	r6, 8005500 <_Bfree+0x28>
 80054e2:	2010      	movs	r0, #16
 80054e4:	f7ff ffa2 	bl	800542c <malloc>
 80054e8:	4602      	mov	r2, r0
 80054ea:	6268      	str	r0, [r5, #36]	; 0x24
 80054ec:	b920      	cbnz	r0, 80054f8 <_Bfree+0x20>
 80054ee:	218a      	movs	r1, #138	; 0x8a
 80054f0:	4b08      	ldr	r3, [pc, #32]	; (8005514 <_Bfree+0x3c>)
 80054f2:	4809      	ldr	r0, [pc, #36]	; (8005518 <_Bfree+0x40>)
 80054f4:	f000 fd8e 	bl	8006014 <__assert_func>
 80054f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054fc:	6006      	str	r6, [r0, #0]
 80054fe:	60c6      	str	r6, [r0, #12]
 8005500:	b13c      	cbz	r4, 8005512 <_Bfree+0x3a>
 8005502:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005504:	6862      	ldr	r2, [r4, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800550c:	6021      	str	r1, [r4, #0]
 800550e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005512:	bd70      	pop	{r4, r5, r6, pc}
 8005514:	080073f1 	.word	0x080073f1
 8005518:	08007474 	.word	0x08007474

0800551c <__multadd>:
 800551c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005520:	4607      	mov	r7, r0
 8005522:	460c      	mov	r4, r1
 8005524:	461e      	mov	r6, r3
 8005526:	2000      	movs	r0, #0
 8005528:	690d      	ldr	r5, [r1, #16]
 800552a:	f101 0c14 	add.w	ip, r1, #20
 800552e:	f8dc 3000 	ldr.w	r3, [ip]
 8005532:	3001      	adds	r0, #1
 8005534:	b299      	uxth	r1, r3
 8005536:	fb02 6101 	mla	r1, r2, r1, r6
 800553a:	0c1e      	lsrs	r6, r3, #16
 800553c:	0c0b      	lsrs	r3, r1, #16
 800553e:	fb02 3306 	mla	r3, r2, r6, r3
 8005542:	b289      	uxth	r1, r1
 8005544:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005548:	4285      	cmp	r5, r0
 800554a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800554e:	f84c 1b04 	str.w	r1, [ip], #4
 8005552:	dcec      	bgt.n	800552e <__multadd+0x12>
 8005554:	b30e      	cbz	r6, 800559a <__multadd+0x7e>
 8005556:	68a3      	ldr	r3, [r4, #8]
 8005558:	42ab      	cmp	r3, r5
 800555a:	dc19      	bgt.n	8005590 <__multadd+0x74>
 800555c:	6861      	ldr	r1, [r4, #4]
 800555e:	4638      	mov	r0, r7
 8005560:	3101      	adds	r1, #1
 8005562:	f7ff ff79 	bl	8005458 <_Balloc>
 8005566:	4680      	mov	r8, r0
 8005568:	b928      	cbnz	r0, 8005576 <__multadd+0x5a>
 800556a:	4602      	mov	r2, r0
 800556c:	21b5      	movs	r1, #181	; 0xb5
 800556e:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <__multadd+0x84>)
 8005570:	480c      	ldr	r0, [pc, #48]	; (80055a4 <__multadd+0x88>)
 8005572:	f000 fd4f 	bl	8006014 <__assert_func>
 8005576:	6922      	ldr	r2, [r4, #16]
 8005578:	f104 010c 	add.w	r1, r4, #12
 800557c:	3202      	adds	r2, #2
 800557e:	0092      	lsls	r2, r2, #2
 8005580:	300c      	adds	r0, #12
 8005582:	f7fe fc25 	bl	8003dd0 <memcpy>
 8005586:	4621      	mov	r1, r4
 8005588:	4638      	mov	r0, r7
 800558a:	f7ff ffa5 	bl	80054d8 <_Bfree>
 800558e:	4644      	mov	r4, r8
 8005590:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005594:	3501      	adds	r5, #1
 8005596:	615e      	str	r6, [r3, #20]
 8005598:	6125      	str	r5, [r4, #16]
 800559a:	4620      	mov	r0, r4
 800559c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055a0:	08007463 	.word	0x08007463
 80055a4:	08007474 	.word	0x08007474

080055a8 <__hi0bits>:
 80055a8:	0c02      	lsrs	r2, r0, #16
 80055aa:	0412      	lsls	r2, r2, #16
 80055ac:	4603      	mov	r3, r0
 80055ae:	b9ca      	cbnz	r2, 80055e4 <__hi0bits+0x3c>
 80055b0:	0403      	lsls	r3, r0, #16
 80055b2:	2010      	movs	r0, #16
 80055b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80055b8:	bf04      	itt	eq
 80055ba:	021b      	lsleq	r3, r3, #8
 80055bc:	3008      	addeq	r0, #8
 80055be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80055c2:	bf04      	itt	eq
 80055c4:	011b      	lsleq	r3, r3, #4
 80055c6:	3004      	addeq	r0, #4
 80055c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80055cc:	bf04      	itt	eq
 80055ce:	009b      	lsleq	r3, r3, #2
 80055d0:	3002      	addeq	r0, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	db05      	blt.n	80055e2 <__hi0bits+0x3a>
 80055d6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80055da:	f100 0001 	add.w	r0, r0, #1
 80055de:	bf08      	it	eq
 80055e0:	2020      	moveq	r0, #32
 80055e2:	4770      	bx	lr
 80055e4:	2000      	movs	r0, #0
 80055e6:	e7e5      	b.n	80055b4 <__hi0bits+0xc>

080055e8 <__lo0bits>:
 80055e8:	6803      	ldr	r3, [r0, #0]
 80055ea:	4602      	mov	r2, r0
 80055ec:	f013 0007 	ands.w	r0, r3, #7
 80055f0:	d00b      	beq.n	800560a <__lo0bits+0x22>
 80055f2:	07d9      	lsls	r1, r3, #31
 80055f4:	d421      	bmi.n	800563a <__lo0bits+0x52>
 80055f6:	0798      	lsls	r0, r3, #30
 80055f8:	bf49      	itett	mi
 80055fa:	085b      	lsrmi	r3, r3, #1
 80055fc:	089b      	lsrpl	r3, r3, #2
 80055fe:	2001      	movmi	r0, #1
 8005600:	6013      	strmi	r3, [r2, #0]
 8005602:	bf5c      	itt	pl
 8005604:	2002      	movpl	r0, #2
 8005606:	6013      	strpl	r3, [r2, #0]
 8005608:	4770      	bx	lr
 800560a:	b299      	uxth	r1, r3
 800560c:	b909      	cbnz	r1, 8005612 <__lo0bits+0x2a>
 800560e:	2010      	movs	r0, #16
 8005610:	0c1b      	lsrs	r3, r3, #16
 8005612:	b2d9      	uxtb	r1, r3
 8005614:	b909      	cbnz	r1, 800561a <__lo0bits+0x32>
 8005616:	3008      	adds	r0, #8
 8005618:	0a1b      	lsrs	r3, r3, #8
 800561a:	0719      	lsls	r1, r3, #28
 800561c:	bf04      	itt	eq
 800561e:	091b      	lsreq	r3, r3, #4
 8005620:	3004      	addeq	r0, #4
 8005622:	0799      	lsls	r1, r3, #30
 8005624:	bf04      	itt	eq
 8005626:	089b      	lsreq	r3, r3, #2
 8005628:	3002      	addeq	r0, #2
 800562a:	07d9      	lsls	r1, r3, #31
 800562c:	d403      	bmi.n	8005636 <__lo0bits+0x4e>
 800562e:	085b      	lsrs	r3, r3, #1
 8005630:	f100 0001 	add.w	r0, r0, #1
 8005634:	d003      	beq.n	800563e <__lo0bits+0x56>
 8005636:	6013      	str	r3, [r2, #0]
 8005638:	4770      	bx	lr
 800563a:	2000      	movs	r0, #0
 800563c:	4770      	bx	lr
 800563e:	2020      	movs	r0, #32
 8005640:	4770      	bx	lr
	...

08005644 <__i2b>:
 8005644:	b510      	push	{r4, lr}
 8005646:	460c      	mov	r4, r1
 8005648:	2101      	movs	r1, #1
 800564a:	f7ff ff05 	bl	8005458 <_Balloc>
 800564e:	4602      	mov	r2, r0
 8005650:	b928      	cbnz	r0, 800565e <__i2b+0x1a>
 8005652:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005656:	4b04      	ldr	r3, [pc, #16]	; (8005668 <__i2b+0x24>)
 8005658:	4804      	ldr	r0, [pc, #16]	; (800566c <__i2b+0x28>)
 800565a:	f000 fcdb 	bl	8006014 <__assert_func>
 800565e:	2301      	movs	r3, #1
 8005660:	6144      	str	r4, [r0, #20]
 8005662:	6103      	str	r3, [r0, #16]
 8005664:	bd10      	pop	{r4, pc}
 8005666:	bf00      	nop
 8005668:	08007463 	.word	0x08007463
 800566c:	08007474 	.word	0x08007474

08005670 <__multiply>:
 8005670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005674:	4691      	mov	r9, r2
 8005676:	690a      	ldr	r2, [r1, #16]
 8005678:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800567c:	460c      	mov	r4, r1
 800567e:	429a      	cmp	r2, r3
 8005680:	bfbe      	ittt	lt
 8005682:	460b      	movlt	r3, r1
 8005684:	464c      	movlt	r4, r9
 8005686:	4699      	movlt	r9, r3
 8005688:	6927      	ldr	r7, [r4, #16]
 800568a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800568e:	68a3      	ldr	r3, [r4, #8]
 8005690:	6861      	ldr	r1, [r4, #4]
 8005692:	eb07 060a 	add.w	r6, r7, sl
 8005696:	42b3      	cmp	r3, r6
 8005698:	b085      	sub	sp, #20
 800569a:	bfb8      	it	lt
 800569c:	3101      	addlt	r1, #1
 800569e:	f7ff fedb 	bl	8005458 <_Balloc>
 80056a2:	b930      	cbnz	r0, 80056b2 <__multiply+0x42>
 80056a4:	4602      	mov	r2, r0
 80056a6:	f240 115d 	movw	r1, #349	; 0x15d
 80056aa:	4b43      	ldr	r3, [pc, #268]	; (80057b8 <__multiply+0x148>)
 80056ac:	4843      	ldr	r0, [pc, #268]	; (80057bc <__multiply+0x14c>)
 80056ae:	f000 fcb1 	bl	8006014 <__assert_func>
 80056b2:	f100 0514 	add.w	r5, r0, #20
 80056b6:	462b      	mov	r3, r5
 80056b8:	2200      	movs	r2, #0
 80056ba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80056be:	4543      	cmp	r3, r8
 80056c0:	d321      	bcc.n	8005706 <__multiply+0x96>
 80056c2:	f104 0314 	add.w	r3, r4, #20
 80056c6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80056ca:	f109 0314 	add.w	r3, r9, #20
 80056ce:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80056d2:	9202      	str	r2, [sp, #8]
 80056d4:	1b3a      	subs	r2, r7, r4
 80056d6:	3a15      	subs	r2, #21
 80056d8:	f022 0203 	bic.w	r2, r2, #3
 80056dc:	3204      	adds	r2, #4
 80056de:	f104 0115 	add.w	r1, r4, #21
 80056e2:	428f      	cmp	r7, r1
 80056e4:	bf38      	it	cc
 80056e6:	2204      	movcc	r2, #4
 80056e8:	9201      	str	r2, [sp, #4]
 80056ea:	9a02      	ldr	r2, [sp, #8]
 80056ec:	9303      	str	r3, [sp, #12]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d80c      	bhi.n	800570c <__multiply+0x9c>
 80056f2:	2e00      	cmp	r6, #0
 80056f4:	dd03      	ble.n	80056fe <__multiply+0x8e>
 80056f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d059      	beq.n	80057b2 <__multiply+0x142>
 80056fe:	6106      	str	r6, [r0, #16]
 8005700:	b005      	add	sp, #20
 8005702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005706:	f843 2b04 	str.w	r2, [r3], #4
 800570a:	e7d8      	b.n	80056be <__multiply+0x4e>
 800570c:	f8b3 a000 	ldrh.w	sl, [r3]
 8005710:	f1ba 0f00 	cmp.w	sl, #0
 8005714:	d023      	beq.n	800575e <__multiply+0xee>
 8005716:	46a9      	mov	r9, r5
 8005718:	f04f 0c00 	mov.w	ip, #0
 800571c:	f104 0e14 	add.w	lr, r4, #20
 8005720:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005724:	f8d9 1000 	ldr.w	r1, [r9]
 8005728:	fa1f fb82 	uxth.w	fp, r2
 800572c:	b289      	uxth	r1, r1
 800572e:	fb0a 110b 	mla	r1, sl, fp, r1
 8005732:	4461      	add	r1, ip
 8005734:	f8d9 c000 	ldr.w	ip, [r9]
 8005738:	0c12      	lsrs	r2, r2, #16
 800573a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800573e:	fb0a c202 	mla	r2, sl, r2, ip
 8005742:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005746:	b289      	uxth	r1, r1
 8005748:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800574c:	4577      	cmp	r7, lr
 800574e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005752:	f849 1b04 	str.w	r1, [r9], #4
 8005756:	d8e3      	bhi.n	8005720 <__multiply+0xb0>
 8005758:	9a01      	ldr	r2, [sp, #4]
 800575a:	f845 c002 	str.w	ip, [r5, r2]
 800575e:	9a03      	ldr	r2, [sp, #12]
 8005760:	3304      	adds	r3, #4
 8005762:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005766:	f1b9 0f00 	cmp.w	r9, #0
 800576a:	d020      	beq.n	80057ae <__multiply+0x13e>
 800576c:	46ae      	mov	lr, r5
 800576e:	f04f 0a00 	mov.w	sl, #0
 8005772:	6829      	ldr	r1, [r5, #0]
 8005774:	f104 0c14 	add.w	ip, r4, #20
 8005778:	f8bc b000 	ldrh.w	fp, [ip]
 800577c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005780:	b289      	uxth	r1, r1
 8005782:	fb09 220b 	mla	r2, r9, fp, r2
 8005786:	4492      	add	sl, r2
 8005788:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800578c:	f84e 1b04 	str.w	r1, [lr], #4
 8005790:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005794:	f8be 1000 	ldrh.w	r1, [lr]
 8005798:	0c12      	lsrs	r2, r2, #16
 800579a:	fb09 1102 	mla	r1, r9, r2, r1
 800579e:	4567      	cmp	r7, ip
 80057a0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80057a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80057a8:	d8e6      	bhi.n	8005778 <__multiply+0x108>
 80057aa:	9a01      	ldr	r2, [sp, #4]
 80057ac:	50a9      	str	r1, [r5, r2]
 80057ae:	3504      	adds	r5, #4
 80057b0:	e79b      	b.n	80056ea <__multiply+0x7a>
 80057b2:	3e01      	subs	r6, #1
 80057b4:	e79d      	b.n	80056f2 <__multiply+0x82>
 80057b6:	bf00      	nop
 80057b8:	08007463 	.word	0x08007463
 80057bc:	08007474 	.word	0x08007474

080057c0 <__pow5mult>:
 80057c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057c4:	4615      	mov	r5, r2
 80057c6:	f012 0203 	ands.w	r2, r2, #3
 80057ca:	4606      	mov	r6, r0
 80057cc:	460f      	mov	r7, r1
 80057ce:	d007      	beq.n	80057e0 <__pow5mult+0x20>
 80057d0:	4c25      	ldr	r4, [pc, #148]	; (8005868 <__pow5mult+0xa8>)
 80057d2:	3a01      	subs	r2, #1
 80057d4:	2300      	movs	r3, #0
 80057d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80057da:	f7ff fe9f 	bl	800551c <__multadd>
 80057de:	4607      	mov	r7, r0
 80057e0:	10ad      	asrs	r5, r5, #2
 80057e2:	d03d      	beq.n	8005860 <__pow5mult+0xa0>
 80057e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80057e6:	b97c      	cbnz	r4, 8005808 <__pow5mult+0x48>
 80057e8:	2010      	movs	r0, #16
 80057ea:	f7ff fe1f 	bl	800542c <malloc>
 80057ee:	4602      	mov	r2, r0
 80057f0:	6270      	str	r0, [r6, #36]	; 0x24
 80057f2:	b928      	cbnz	r0, 8005800 <__pow5mult+0x40>
 80057f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80057f8:	4b1c      	ldr	r3, [pc, #112]	; (800586c <__pow5mult+0xac>)
 80057fa:	481d      	ldr	r0, [pc, #116]	; (8005870 <__pow5mult+0xb0>)
 80057fc:	f000 fc0a 	bl	8006014 <__assert_func>
 8005800:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005804:	6004      	str	r4, [r0, #0]
 8005806:	60c4      	str	r4, [r0, #12]
 8005808:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800580c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005810:	b94c      	cbnz	r4, 8005826 <__pow5mult+0x66>
 8005812:	f240 2171 	movw	r1, #625	; 0x271
 8005816:	4630      	mov	r0, r6
 8005818:	f7ff ff14 	bl	8005644 <__i2b>
 800581c:	2300      	movs	r3, #0
 800581e:	4604      	mov	r4, r0
 8005820:	f8c8 0008 	str.w	r0, [r8, #8]
 8005824:	6003      	str	r3, [r0, #0]
 8005826:	f04f 0900 	mov.w	r9, #0
 800582a:	07eb      	lsls	r3, r5, #31
 800582c:	d50a      	bpl.n	8005844 <__pow5mult+0x84>
 800582e:	4639      	mov	r1, r7
 8005830:	4622      	mov	r2, r4
 8005832:	4630      	mov	r0, r6
 8005834:	f7ff ff1c 	bl	8005670 <__multiply>
 8005838:	4680      	mov	r8, r0
 800583a:	4639      	mov	r1, r7
 800583c:	4630      	mov	r0, r6
 800583e:	f7ff fe4b 	bl	80054d8 <_Bfree>
 8005842:	4647      	mov	r7, r8
 8005844:	106d      	asrs	r5, r5, #1
 8005846:	d00b      	beq.n	8005860 <__pow5mult+0xa0>
 8005848:	6820      	ldr	r0, [r4, #0]
 800584a:	b938      	cbnz	r0, 800585c <__pow5mult+0x9c>
 800584c:	4622      	mov	r2, r4
 800584e:	4621      	mov	r1, r4
 8005850:	4630      	mov	r0, r6
 8005852:	f7ff ff0d 	bl	8005670 <__multiply>
 8005856:	6020      	str	r0, [r4, #0]
 8005858:	f8c0 9000 	str.w	r9, [r0]
 800585c:	4604      	mov	r4, r0
 800585e:	e7e4      	b.n	800582a <__pow5mult+0x6a>
 8005860:	4638      	mov	r0, r7
 8005862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005866:	bf00      	nop
 8005868:	080075c0 	.word	0x080075c0
 800586c:	080073f1 	.word	0x080073f1
 8005870:	08007474 	.word	0x08007474

08005874 <__lshift>:
 8005874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005878:	460c      	mov	r4, r1
 800587a:	4607      	mov	r7, r0
 800587c:	4691      	mov	r9, r2
 800587e:	6923      	ldr	r3, [r4, #16]
 8005880:	6849      	ldr	r1, [r1, #4]
 8005882:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005886:	68a3      	ldr	r3, [r4, #8]
 8005888:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800588c:	f108 0601 	add.w	r6, r8, #1
 8005890:	42b3      	cmp	r3, r6
 8005892:	db0b      	blt.n	80058ac <__lshift+0x38>
 8005894:	4638      	mov	r0, r7
 8005896:	f7ff fddf 	bl	8005458 <_Balloc>
 800589a:	4605      	mov	r5, r0
 800589c:	b948      	cbnz	r0, 80058b2 <__lshift+0x3e>
 800589e:	4602      	mov	r2, r0
 80058a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80058a4:	4b29      	ldr	r3, [pc, #164]	; (800594c <__lshift+0xd8>)
 80058a6:	482a      	ldr	r0, [pc, #168]	; (8005950 <__lshift+0xdc>)
 80058a8:	f000 fbb4 	bl	8006014 <__assert_func>
 80058ac:	3101      	adds	r1, #1
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	e7ee      	b.n	8005890 <__lshift+0x1c>
 80058b2:	2300      	movs	r3, #0
 80058b4:	f100 0114 	add.w	r1, r0, #20
 80058b8:	f100 0210 	add.w	r2, r0, #16
 80058bc:	4618      	mov	r0, r3
 80058be:	4553      	cmp	r3, sl
 80058c0:	db37      	blt.n	8005932 <__lshift+0xbe>
 80058c2:	6920      	ldr	r0, [r4, #16]
 80058c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80058c8:	f104 0314 	add.w	r3, r4, #20
 80058cc:	f019 091f 	ands.w	r9, r9, #31
 80058d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80058d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80058d8:	d02f      	beq.n	800593a <__lshift+0xc6>
 80058da:	468a      	mov	sl, r1
 80058dc:	f04f 0c00 	mov.w	ip, #0
 80058e0:	f1c9 0e20 	rsb	lr, r9, #32
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	fa02 f209 	lsl.w	r2, r2, r9
 80058ea:	ea42 020c 	orr.w	r2, r2, ip
 80058ee:	f84a 2b04 	str.w	r2, [sl], #4
 80058f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80058f6:	4298      	cmp	r0, r3
 80058f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80058fc:	d8f2      	bhi.n	80058e4 <__lshift+0x70>
 80058fe:	1b03      	subs	r3, r0, r4
 8005900:	3b15      	subs	r3, #21
 8005902:	f023 0303 	bic.w	r3, r3, #3
 8005906:	3304      	adds	r3, #4
 8005908:	f104 0215 	add.w	r2, r4, #21
 800590c:	4290      	cmp	r0, r2
 800590e:	bf38      	it	cc
 8005910:	2304      	movcc	r3, #4
 8005912:	f841 c003 	str.w	ip, [r1, r3]
 8005916:	f1bc 0f00 	cmp.w	ip, #0
 800591a:	d001      	beq.n	8005920 <__lshift+0xac>
 800591c:	f108 0602 	add.w	r6, r8, #2
 8005920:	3e01      	subs	r6, #1
 8005922:	4638      	mov	r0, r7
 8005924:	4621      	mov	r1, r4
 8005926:	612e      	str	r6, [r5, #16]
 8005928:	f7ff fdd6 	bl	80054d8 <_Bfree>
 800592c:	4628      	mov	r0, r5
 800592e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005932:	f842 0f04 	str.w	r0, [r2, #4]!
 8005936:	3301      	adds	r3, #1
 8005938:	e7c1      	b.n	80058be <__lshift+0x4a>
 800593a:	3904      	subs	r1, #4
 800593c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005940:	4298      	cmp	r0, r3
 8005942:	f841 2f04 	str.w	r2, [r1, #4]!
 8005946:	d8f9      	bhi.n	800593c <__lshift+0xc8>
 8005948:	e7ea      	b.n	8005920 <__lshift+0xac>
 800594a:	bf00      	nop
 800594c:	08007463 	.word	0x08007463
 8005950:	08007474 	.word	0x08007474

08005954 <__mcmp>:
 8005954:	4603      	mov	r3, r0
 8005956:	690a      	ldr	r2, [r1, #16]
 8005958:	6900      	ldr	r0, [r0, #16]
 800595a:	b530      	push	{r4, r5, lr}
 800595c:	1a80      	subs	r0, r0, r2
 800595e:	d10d      	bne.n	800597c <__mcmp+0x28>
 8005960:	3314      	adds	r3, #20
 8005962:	3114      	adds	r1, #20
 8005964:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005968:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800596c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005970:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005974:	4295      	cmp	r5, r2
 8005976:	d002      	beq.n	800597e <__mcmp+0x2a>
 8005978:	d304      	bcc.n	8005984 <__mcmp+0x30>
 800597a:	2001      	movs	r0, #1
 800597c:	bd30      	pop	{r4, r5, pc}
 800597e:	42a3      	cmp	r3, r4
 8005980:	d3f4      	bcc.n	800596c <__mcmp+0x18>
 8005982:	e7fb      	b.n	800597c <__mcmp+0x28>
 8005984:	f04f 30ff 	mov.w	r0, #4294967295
 8005988:	e7f8      	b.n	800597c <__mcmp+0x28>
	...

0800598c <__mdiff>:
 800598c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005990:	460d      	mov	r5, r1
 8005992:	4607      	mov	r7, r0
 8005994:	4611      	mov	r1, r2
 8005996:	4628      	mov	r0, r5
 8005998:	4614      	mov	r4, r2
 800599a:	f7ff ffdb 	bl	8005954 <__mcmp>
 800599e:	1e06      	subs	r6, r0, #0
 80059a0:	d111      	bne.n	80059c6 <__mdiff+0x3a>
 80059a2:	4631      	mov	r1, r6
 80059a4:	4638      	mov	r0, r7
 80059a6:	f7ff fd57 	bl	8005458 <_Balloc>
 80059aa:	4602      	mov	r2, r0
 80059ac:	b928      	cbnz	r0, 80059ba <__mdiff+0x2e>
 80059ae:	f240 2132 	movw	r1, #562	; 0x232
 80059b2:	4b3a      	ldr	r3, [pc, #232]	; (8005a9c <__mdiff+0x110>)
 80059b4:	483a      	ldr	r0, [pc, #232]	; (8005aa0 <__mdiff+0x114>)
 80059b6:	f000 fb2d 	bl	8006014 <__assert_func>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80059c0:	4610      	mov	r0, r2
 80059c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c6:	bfa4      	itt	ge
 80059c8:	4623      	movge	r3, r4
 80059ca:	462c      	movge	r4, r5
 80059cc:	4638      	mov	r0, r7
 80059ce:	6861      	ldr	r1, [r4, #4]
 80059d0:	bfa6      	itte	ge
 80059d2:	461d      	movge	r5, r3
 80059d4:	2600      	movge	r6, #0
 80059d6:	2601      	movlt	r6, #1
 80059d8:	f7ff fd3e 	bl	8005458 <_Balloc>
 80059dc:	4602      	mov	r2, r0
 80059de:	b918      	cbnz	r0, 80059e8 <__mdiff+0x5c>
 80059e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80059e4:	4b2d      	ldr	r3, [pc, #180]	; (8005a9c <__mdiff+0x110>)
 80059e6:	e7e5      	b.n	80059b4 <__mdiff+0x28>
 80059e8:	f102 0814 	add.w	r8, r2, #20
 80059ec:	46c2      	mov	sl, r8
 80059ee:	f04f 0c00 	mov.w	ip, #0
 80059f2:	6927      	ldr	r7, [r4, #16]
 80059f4:	60c6      	str	r6, [r0, #12]
 80059f6:	692e      	ldr	r6, [r5, #16]
 80059f8:	f104 0014 	add.w	r0, r4, #20
 80059fc:	f105 0914 	add.w	r9, r5, #20
 8005a00:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005a04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005a08:	3410      	adds	r4, #16
 8005a0a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005a0e:	f859 3b04 	ldr.w	r3, [r9], #4
 8005a12:	fa1f f18b 	uxth.w	r1, fp
 8005a16:	448c      	add	ip, r1
 8005a18:	b299      	uxth	r1, r3
 8005a1a:	0c1b      	lsrs	r3, r3, #16
 8005a1c:	ebac 0101 	sub.w	r1, ip, r1
 8005a20:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005a24:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005a28:	b289      	uxth	r1, r1
 8005a2a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005a2e:	454e      	cmp	r6, r9
 8005a30:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005a34:	f84a 3b04 	str.w	r3, [sl], #4
 8005a38:	d8e7      	bhi.n	8005a0a <__mdiff+0x7e>
 8005a3a:	1b73      	subs	r3, r6, r5
 8005a3c:	3b15      	subs	r3, #21
 8005a3e:	f023 0303 	bic.w	r3, r3, #3
 8005a42:	3515      	adds	r5, #21
 8005a44:	3304      	adds	r3, #4
 8005a46:	42ae      	cmp	r6, r5
 8005a48:	bf38      	it	cc
 8005a4a:	2304      	movcc	r3, #4
 8005a4c:	4418      	add	r0, r3
 8005a4e:	4443      	add	r3, r8
 8005a50:	461e      	mov	r6, r3
 8005a52:	4605      	mov	r5, r0
 8005a54:	4575      	cmp	r5, lr
 8005a56:	d30e      	bcc.n	8005a76 <__mdiff+0xea>
 8005a58:	f10e 0103 	add.w	r1, lr, #3
 8005a5c:	1a09      	subs	r1, r1, r0
 8005a5e:	f021 0103 	bic.w	r1, r1, #3
 8005a62:	3803      	subs	r0, #3
 8005a64:	4586      	cmp	lr, r0
 8005a66:	bf38      	it	cc
 8005a68:	2100      	movcc	r1, #0
 8005a6a:	4419      	add	r1, r3
 8005a6c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005a70:	b18b      	cbz	r3, 8005a96 <__mdiff+0x10a>
 8005a72:	6117      	str	r7, [r2, #16]
 8005a74:	e7a4      	b.n	80059c0 <__mdiff+0x34>
 8005a76:	f855 8b04 	ldr.w	r8, [r5], #4
 8005a7a:	fa1f f188 	uxth.w	r1, r8
 8005a7e:	4461      	add	r1, ip
 8005a80:	140c      	asrs	r4, r1, #16
 8005a82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005a86:	b289      	uxth	r1, r1
 8005a88:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005a8c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005a90:	f846 1b04 	str.w	r1, [r6], #4
 8005a94:	e7de      	b.n	8005a54 <__mdiff+0xc8>
 8005a96:	3f01      	subs	r7, #1
 8005a98:	e7e8      	b.n	8005a6c <__mdiff+0xe0>
 8005a9a:	bf00      	nop
 8005a9c:	08007463 	.word	0x08007463
 8005aa0:	08007474 	.word	0x08007474

08005aa4 <__d2b>:
 8005aa4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005aae:	4690      	mov	r8, r2
 8005ab0:	461d      	mov	r5, r3
 8005ab2:	f7ff fcd1 	bl	8005458 <_Balloc>
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	b930      	cbnz	r0, 8005ac8 <__d2b+0x24>
 8005aba:	4602      	mov	r2, r0
 8005abc:	f240 310a 	movw	r1, #778	; 0x30a
 8005ac0:	4b24      	ldr	r3, [pc, #144]	; (8005b54 <__d2b+0xb0>)
 8005ac2:	4825      	ldr	r0, [pc, #148]	; (8005b58 <__d2b+0xb4>)
 8005ac4:	f000 faa6 	bl	8006014 <__assert_func>
 8005ac8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005acc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005ad0:	bb2d      	cbnz	r5, 8005b1e <__d2b+0x7a>
 8005ad2:	9301      	str	r3, [sp, #4]
 8005ad4:	f1b8 0300 	subs.w	r3, r8, #0
 8005ad8:	d026      	beq.n	8005b28 <__d2b+0x84>
 8005ada:	4668      	mov	r0, sp
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	f7ff fd83 	bl	80055e8 <__lo0bits>
 8005ae2:	9900      	ldr	r1, [sp, #0]
 8005ae4:	b1f0      	cbz	r0, 8005b24 <__d2b+0x80>
 8005ae6:	9a01      	ldr	r2, [sp, #4]
 8005ae8:	f1c0 0320 	rsb	r3, r0, #32
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	430b      	orrs	r3, r1
 8005af2:	40c2      	lsrs	r2, r0
 8005af4:	6163      	str	r3, [r4, #20]
 8005af6:	9201      	str	r2, [sp, #4]
 8005af8:	9b01      	ldr	r3, [sp, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	bf14      	ite	ne
 8005afe:	2102      	movne	r1, #2
 8005b00:	2101      	moveq	r1, #1
 8005b02:	61a3      	str	r3, [r4, #24]
 8005b04:	6121      	str	r1, [r4, #16]
 8005b06:	b1c5      	cbz	r5, 8005b3a <__d2b+0x96>
 8005b08:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005b0c:	4405      	add	r5, r0
 8005b0e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005b12:	603d      	str	r5, [r7, #0]
 8005b14:	6030      	str	r0, [r6, #0]
 8005b16:	4620      	mov	r0, r4
 8005b18:	b002      	add	sp, #8
 8005b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b22:	e7d6      	b.n	8005ad2 <__d2b+0x2e>
 8005b24:	6161      	str	r1, [r4, #20]
 8005b26:	e7e7      	b.n	8005af8 <__d2b+0x54>
 8005b28:	a801      	add	r0, sp, #4
 8005b2a:	f7ff fd5d 	bl	80055e8 <__lo0bits>
 8005b2e:	2101      	movs	r1, #1
 8005b30:	9b01      	ldr	r3, [sp, #4]
 8005b32:	6121      	str	r1, [r4, #16]
 8005b34:	6163      	str	r3, [r4, #20]
 8005b36:	3020      	adds	r0, #32
 8005b38:	e7e5      	b.n	8005b06 <__d2b+0x62>
 8005b3a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005b3e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005b42:	6038      	str	r0, [r7, #0]
 8005b44:	6918      	ldr	r0, [r3, #16]
 8005b46:	f7ff fd2f 	bl	80055a8 <__hi0bits>
 8005b4a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005b4e:	6031      	str	r1, [r6, #0]
 8005b50:	e7e1      	b.n	8005b16 <__d2b+0x72>
 8005b52:	bf00      	nop
 8005b54:	08007463 	.word	0x08007463
 8005b58:	08007474 	.word	0x08007474

08005b5c <_calloc_r>:
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	fba1 5402 	umull	r5, r4, r1, r2
 8005b62:	b934      	cbnz	r4, 8005b72 <_calloc_r+0x16>
 8005b64:	4629      	mov	r1, r5
 8005b66:	f000 f875 	bl	8005c54 <_malloc_r>
 8005b6a:	4606      	mov	r6, r0
 8005b6c:	b928      	cbnz	r0, 8005b7a <_calloc_r+0x1e>
 8005b6e:	4630      	mov	r0, r6
 8005b70:	bd70      	pop	{r4, r5, r6, pc}
 8005b72:	220c      	movs	r2, #12
 8005b74:	2600      	movs	r6, #0
 8005b76:	6002      	str	r2, [r0, #0]
 8005b78:	e7f9      	b.n	8005b6e <_calloc_r+0x12>
 8005b7a:	462a      	mov	r2, r5
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	f7fe f94f 	bl	8003e20 <memset>
 8005b82:	e7f4      	b.n	8005b6e <_calloc_r+0x12>

08005b84 <_free_r>:
 8005b84:	b538      	push	{r3, r4, r5, lr}
 8005b86:	4605      	mov	r5, r0
 8005b88:	2900      	cmp	r1, #0
 8005b8a:	d040      	beq.n	8005c0e <_free_r+0x8a>
 8005b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b90:	1f0c      	subs	r4, r1, #4
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	bfb8      	it	lt
 8005b96:	18e4      	addlt	r4, r4, r3
 8005b98:	f000 fa7e 	bl	8006098 <__malloc_lock>
 8005b9c:	4a1c      	ldr	r2, [pc, #112]	; (8005c10 <_free_r+0x8c>)
 8005b9e:	6813      	ldr	r3, [r2, #0]
 8005ba0:	b933      	cbnz	r3, 8005bb0 <_free_r+0x2c>
 8005ba2:	6063      	str	r3, [r4, #4]
 8005ba4:	6014      	str	r4, [r2, #0]
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bac:	f000 ba7a 	b.w	80060a4 <__malloc_unlock>
 8005bb0:	42a3      	cmp	r3, r4
 8005bb2:	d908      	bls.n	8005bc6 <_free_r+0x42>
 8005bb4:	6820      	ldr	r0, [r4, #0]
 8005bb6:	1821      	adds	r1, r4, r0
 8005bb8:	428b      	cmp	r3, r1
 8005bba:	bf01      	itttt	eq
 8005bbc:	6819      	ldreq	r1, [r3, #0]
 8005bbe:	685b      	ldreq	r3, [r3, #4]
 8005bc0:	1809      	addeq	r1, r1, r0
 8005bc2:	6021      	streq	r1, [r4, #0]
 8005bc4:	e7ed      	b.n	8005ba2 <_free_r+0x1e>
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	b10b      	cbz	r3, 8005bd0 <_free_r+0x4c>
 8005bcc:	42a3      	cmp	r3, r4
 8005bce:	d9fa      	bls.n	8005bc6 <_free_r+0x42>
 8005bd0:	6811      	ldr	r1, [r2, #0]
 8005bd2:	1850      	adds	r0, r2, r1
 8005bd4:	42a0      	cmp	r0, r4
 8005bd6:	d10b      	bne.n	8005bf0 <_free_r+0x6c>
 8005bd8:	6820      	ldr	r0, [r4, #0]
 8005bda:	4401      	add	r1, r0
 8005bdc:	1850      	adds	r0, r2, r1
 8005bde:	4283      	cmp	r3, r0
 8005be0:	6011      	str	r1, [r2, #0]
 8005be2:	d1e0      	bne.n	8005ba6 <_free_r+0x22>
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	4401      	add	r1, r0
 8005bea:	6011      	str	r1, [r2, #0]
 8005bec:	6053      	str	r3, [r2, #4]
 8005bee:	e7da      	b.n	8005ba6 <_free_r+0x22>
 8005bf0:	d902      	bls.n	8005bf8 <_free_r+0x74>
 8005bf2:	230c      	movs	r3, #12
 8005bf4:	602b      	str	r3, [r5, #0]
 8005bf6:	e7d6      	b.n	8005ba6 <_free_r+0x22>
 8005bf8:	6820      	ldr	r0, [r4, #0]
 8005bfa:	1821      	adds	r1, r4, r0
 8005bfc:	428b      	cmp	r3, r1
 8005bfe:	bf01      	itttt	eq
 8005c00:	6819      	ldreq	r1, [r3, #0]
 8005c02:	685b      	ldreq	r3, [r3, #4]
 8005c04:	1809      	addeq	r1, r1, r0
 8005c06:	6021      	streq	r1, [r4, #0]
 8005c08:	6063      	str	r3, [r4, #4]
 8005c0a:	6054      	str	r4, [r2, #4]
 8005c0c:	e7cb      	b.n	8005ba6 <_free_r+0x22>
 8005c0e:	bd38      	pop	{r3, r4, r5, pc}
 8005c10:	200004b4 	.word	0x200004b4

08005c14 <sbrk_aligned>:
 8005c14:	b570      	push	{r4, r5, r6, lr}
 8005c16:	4e0e      	ldr	r6, [pc, #56]	; (8005c50 <sbrk_aligned+0x3c>)
 8005c18:	460c      	mov	r4, r1
 8005c1a:	6831      	ldr	r1, [r6, #0]
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	b911      	cbnz	r1, 8005c26 <sbrk_aligned+0x12>
 8005c20:	f000 f9e8 	bl	8005ff4 <_sbrk_r>
 8005c24:	6030      	str	r0, [r6, #0]
 8005c26:	4621      	mov	r1, r4
 8005c28:	4628      	mov	r0, r5
 8005c2a:	f000 f9e3 	bl	8005ff4 <_sbrk_r>
 8005c2e:	1c43      	adds	r3, r0, #1
 8005c30:	d00a      	beq.n	8005c48 <sbrk_aligned+0x34>
 8005c32:	1cc4      	adds	r4, r0, #3
 8005c34:	f024 0403 	bic.w	r4, r4, #3
 8005c38:	42a0      	cmp	r0, r4
 8005c3a:	d007      	beq.n	8005c4c <sbrk_aligned+0x38>
 8005c3c:	1a21      	subs	r1, r4, r0
 8005c3e:	4628      	mov	r0, r5
 8005c40:	f000 f9d8 	bl	8005ff4 <_sbrk_r>
 8005c44:	3001      	adds	r0, #1
 8005c46:	d101      	bne.n	8005c4c <sbrk_aligned+0x38>
 8005c48:	f04f 34ff 	mov.w	r4, #4294967295
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
 8005c50:	200004b8 	.word	0x200004b8

08005c54 <_malloc_r>:
 8005c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c58:	1ccd      	adds	r5, r1, #3
 8005c5a:	f025 0503 	bic.w	r5, r5, #3
 8005c5e:	3508      	adds	r5, #8
 8005c60:	2d0c      	cmp	r5, #12
 8005c62:	bf38      	it	cc
 8005c64:	250c      	movcc	r5, #12
 8005c66:	2d00      	cmp	r5, #0
 8005c68:	4607      	mov	r7, r0
 8005c6a:	db01      	blt.n	8005c70 <_malloc_r+0x1c>
 8005c6c:	42a9      	cmp	r1, r5
 8005c6e:	d905      	bls.n	8005c7c <_malloc_r+0x28>
 8005c70:	230c      	movs	r3, #12
 8005c72:	2600      	movs	r6, #0
 8005c74:	603b      	str	r3, [r7, #0]
 8005c76:	4630      	mov	r0, r6
 8005c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c7c:	4e2e      	ldr	r6, [pc, #184]	; (8005d38 <_malloc_r+0xe4>)
 8005c7e:	f000 fa0b 	bl	8006098 <__malloc_lock>
 8005c82:	6833      	ldr	r3, [r6, #0]
 8005c84:	461c      	mov	r4, r3
 8005c86:	bb34      	cbnz	r4, 8005cd6 <_malloc_r+0x82>
 8005c88:	4629      	mov	r1, r5
 8005c8a:	4638      	mov	r0, r7
 8005c8c:	f7ff ffc2 	bl	8005c14 <sbrk_aligned>
 8005c90:	1c43      	adds	r3, r0, #1
 8005c92:	4604      	mov	r4, r0
 8005c94:	d14d      	bne.n	8005d32 <_malloc_r+0xde>
 8005c96:	6834      	ldr	r4, [r6, #0]
 8005c98:	4626      	mov	r6, r4
 8005c9a:	2e00      	cmp	r6, #0
 8005c9c:	d140      	bne.n	8005d20 <_malloc_r+0xcc>
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	4631      	mov	r1, r6
 8005ca2:	4638      	mov	r0, r7
 8005ca4:	eb04 0803 	add.w	r8, r4, r3
 8005ca8:	f000 f9a4 	bl	8005ff4 <_sbrk_r>
 8005cac:	4580      	cmp	r8, r0
 8005cae:	d13a      	bne.n	8005d26 <_malloc_r+0xd2>
 8005cb0:	6821      	ldr	r1, [r4, #0]
 8005cb2:	3503      	adds	r5, #3
 8005cb4:	1a6d      	subs	r5, r5, r1
 8005cb6:	f025 0503 	bic.w	r5, r5, #3
 8005cba:	3508      	adds	r5, #8
 8005cbc:	2d0c      	cmp	r5, #12
 8005cbe:	bf38      	it	cc
 8005cc0:	250c      	movcc	r5, #12
 8005cc2:	4638      	mov	r0, r7
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	f7ff ffa5 	bl	8005c14 <sbrk_aligned>
 8005cca:	3001      	adds	r0, #1
 8005ccc:	d02b      	beq.n	8005d26 <_malloc_r+0xd2>
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	442b      	add	r3, r5
 8005cd2:	6023      	str	r3, [r4, #0]
 8005cd4:	e00e      	b.n	8005cf4 <_malloc_r+0xa0>
 8005cd6:	6822      	ldr	r2, [r4, #0]
 8005cd8:	1b52      	subs	r2, r2, r5
 8005cda:	d41e      	bmi.n	8005d1a <_malloc_r+0xc6>
 8005cdc:	2a0b      	cmp	r2, #11
 8005cde:	d916      	bls.n	8005d0e <_malloc_r+0xba>
 8005ce0:	1961      	adds	r1, r4, r5
 8005ce2:	42a3      	cmp	r3, r4
 8005ce4:	6025      	str	r5, [r4, #0]
 8005ce6:	bf18      	it	ne
 8005ce8:	6059      	strne	r1, [r3, #4]
 8005cea:	6863      	ldr	r3, [r4, #4]
 8005cec:	bf08      	it	eq
 8005cee:	6031      	streq	r1, [r6, #0]
 8005cf0:	5162      	str	r2, [r4, r5]
 8005cf2:	604b      	str	r3, [r1, #4]
 8005cf4:	4638      	mov	r0, r7
 8005cf6:	f104 060b 	add.w	r6, r4, #11
 8005cfa:	f000 f9d3 	bl	80060a4 <__malloc_unlock>
 8005cfe:	f026 0607 	bic.w	r6, r6, #7
 8005d02:	1d23      	adds	r3, r4, #4
 8005d04:	1af2      	subs	r2, r6, r3
 8005d06:	d0b6      	beq.n	8005c76 <_malloc_r+0x22>
 8005d08:	1b9b      	subs	r3, r3, r6
 8005d0a:	50a3      	str	r3, [r4, r2]
 8005d0c:	e7b3      	b.n	8005c76 <_malloc_r+0x22>
 8005d0e:	6862      	ldr	r2, [r4, #4]
 8005d10:	42a3      	cmp	r3, r4
 8005d12:	bf0c      	ite	eq
 8005d14:	6032      	streq	r2, [r6, #0]
 8005d16:	605a      	strne	r2, [r3, #4]
 8005d18:	e7ec      	b.n	8005cf4 <_malloc_r+0xa0>
 8005d1a:	4623      	mov	r3, r4
 8005d1c:	6864      	ldr	r4, [r4, #4]
 8005d1e:	e7b2      	b.n	8005c86 <_malloc_r+0x32>
 8005d20:	4634      	mov	r4, r6
 8005d22:	6876      	ldr	r6, [r6, #4]
 8005d24:	e7b9      	b.n	8005c9a <_malloc_r+0x46>
 8005d26:	230c      	movs	r3, #12
 8005d28:	4638      	mov	r0, r7
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	f000 f9ba 	bl	80060a4 <__malloc_unlock>
 8005d30:	e7a1      	b.n	8005c76 <_malloc_r+0x22>
 8005d32:	6025      	str	r5, [r4, #0]
 8005d34:	e7de      	b.n	8005cf4 <_malloc_r+0xa0>
 8005d36:	bf00      	nop
 8005d38:	200004b4 	.word	0x200004b4

08005d3c <__ssputs_r>:
 8005d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d40:	688e      	ldr	r6, [r1, #8]
 8005d42:	4682      	mov	sl, r0
 8005d44:	429e      	cmp	r6, r3
 8005d46:	460c      	mov	r4, r1
 8005d48:	4690      	mov	r8, r2
 8005d4a:	461f      	mov	r7, r3
 8005d4c:	d838      	bhi.n	8005dc0 <__ssputs_r+0x84>
 8005d4e:	898a      	ldrh	r2, [r1, #12]
 8005d50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d54:	d032      	beq.n	8005dbc <__ssputs_r+0x80>
 8005d56:	6825      	ldr	r5, [r4, #0]
 8005d58:	6909      	ldr	r1, [r1, #16]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	eba5 0901 	sub.w	r9, r5, r1
 8005d60:	6965      	ldr	r5, [r4, #20]
 8005d62:	444b      	add	r3, r9
 8005d64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d6c:	106d      	asrs	r5, r5, #1
 8005d6e:	429d      	cmp	r5, r3
 8005d70:	bf38      	it	cc
 8005d72:	461d      	movcc	r5, r3
 8005d74:	0553      	lsls	r3, r2, #21
 8005d76:	d531      	bpl.n	8005ddc <__ssputs_r+0xa0>
 8005d78:	4629      	mov	r1, r5
 8005d7a:	f7ff ff6b 	bl	8005c54 <_malloc_r>
 8005d7e:	4606      	mov	r6, r0
 8005d80:	b950      	cbnz	r0, 8005d98 <__ssputs_r+0x5c>
 8005d82:	230c      	movs	r3, #12
 8005d84:	f04f 30ff 	mov.w	r0, #4294967295
 8005d88:	f8ca 3000 	str.w	r3, [sl]
 8005d8c:	89a3      	ldrh	r3, [r4, #12]
 8005d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d92:	81a3      	strh	r3, [r4, #12]
 8005d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d98:	464a      	mov	r2, r9
 8005d9a:	6921      	ldr	r1, [r4, #16]
 8005d9c:	f7fe f818 	bl	8003dd0 <memcpy>
 8005da0:	89a3      	ldrh	r3, [r4, #12]
 8005da2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005daa:	81a3      	strh	r3, [r4, #12]
 8005dac:	6126      	str	r6, [r4, #16]
 8005dae:	444e      	add	r6, r9
 8005db0:	6026      	str	r6, [r4, #0]
 8005db2:	463e      	mov	r6, r7
 8005db4:	6165      	str	r5, [r4, #20]
 8005db6:	eba5 0509 	sub.w	r5, r5, r9
 8005dba:	60a5      	str	r5, [r4, #8]
 8005dbc:	42be      	cmp	r6, r7
 8005dbe:	d900      	bls.n	8005dc2 <__ssputs_r+0x86>
 8005dc0:	463e      	mov	r6, r7
 8005dc2:	4632      	mov	r2, r6
 8005dc4:	4641      	mov	r1, r8
 8005dc6:	6820      	ldr	r0, [r4, #0]
 8005dc8:	f7fe f810 	bl	8003dec <memmove>
 8005dcc:	68a3      	ldr	r3, [r4, #8]
 8005dce:	2000      	movs	r0, #0
 8005dd0:	1b9b      	subs	r3, r3, r6
 8005dd2:	60a3      	str	r3, [r4, #8]
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	4433      	add	r3, r6
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	e7db      	b.n	8005d94 <__ssputs_r+0x58>
 8005ddc:	462a      	mov	r2, r5
 8005dde:	f000 f967 	bl	80060b0 <_realloc_r>
 8005de2:	4606      	mov	r6, r0
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d1e1      	bne.n	8005dac <__ssputs_r+0x70>
 8005de8:	4650      	mov	r0, sl
 8005dea:	6921      	ldr	r1, [r4, #16]
 8005dec:	f7ff feca 	bl	8005b84 <_free_r>
 8005df0:	e7c7      	b.n	8005d82 <__ssputs_r+0x46>
	...

08005df4 <_svfiprintf_r>:
 8005df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df8:	4698      	mov	r8, r3
 8005dfa:	898b      	ldrh	r3, [r1, #12]
 8005dfc:	4607      	mov	r7, r0
 8005dfe:	061b      	lsls	r3, r3, #24
 8005e00:	460d      	mov	r5, r1
 8005e02:	4614      	mov	r4, r2
 8005e04:	b09d      	sub	sp, #116	; 0x74
 8005e06:	d50e      	bpl.n	8005e26 <_svfiprintf_r+0x32>
 8005e08:	690b      	ldr	r3, [r1, #16]
 8005e0a:	b963      	cbnz	r3, 8005e26 <_svfiprintf_r+0x32>
 8005e0c:	2140      	movs	r1, #64	; 0x40
 8005e0e:	f7ff ff21 	bl	8005c54 <_malloc_r>
 8005e12:	6028      	str	r0, [r5, #0]
 8005e14:	6128      	str	r0, [r5, #16]
 8005e16:	b920      	cbnz	r0, 8005e22 <_svfiprintf_r+0x2e>
 8005e18:	230c      	movs	r3, #12
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e20:	e0d1      	b.n	8005fc6 <_svfiprintf_r+0x1d2>
 8005e22:	2340      	movs	r3, #64	; 0x40
 8005e24:	616b      	str	r3, [r5, #20]
 8005e26:	2300      	movs	r3, #0
 8005e28:	9309      	str	r3, [sp, #36]	; 0x24
 8005e2a:	2320      	movs	r3, #32
 8005e2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e30:	2330      	movs	r3, #48	; 0x30
 8005e32:	f04f 0901 	mov.w	r9, #1
 8005e36:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005fe0 <_svfiprintf_r+0x1ec>
 8005e3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e42:	4623      	mov	r3, r4
 8005e44:	469a      	mov	sl, r3
 8005e46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e4a:	b10a      	cbz	r2, 8005e50 <_svfiprintf_r+0x5c>
 8005e4c:	2a25      	cmp	r2, #37	; 0x25
 8005e4e:	d1f9      	bne.n	8005e44 <_svfiprintf_r+0x50>
 8005e50:	ebba 0b04 	subs.w	fp, sl, r4
 8005e54:	d00b      	beq.n	8005e6e <_svfiprintf_r+0x7a>
 8005e56:	465b      	mov	r3, fp
 8005e58:	4622      	mov	r2, r4
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	4638      	mov	r0, r7
 8005e5e:	f7ff ff6d 	bl	8005d3c <__ssputs_r>
 8005e62:	3001      	adds	r0, #1
 8005e64:	f000 80aa 	beq.w	8005fbc <_svfiprintf_r+0x1c8>
 8005e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e6a:	445a      	add	r2, fp
 8005e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8005e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 80a2 	beq.w	8005fbc <_svfiprintf_r+0x1c8>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e82:	f10a 0a01 	add.w	sl, sl, #1
 8005e86:	9304      	str	r3, [sp, #16]
 8005e88:	9307      	str	r3, [sp, #28]
 8005e8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e8e:	931a      	str	r3, [sp, #104]	; 0x68
 8005e90:	4654      	mov	r4, sl
 8005e92:	2205      	movs	r2, #5
 8005e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e98:	4851      	ldr	r0, [pc, #324]	; (8005fe0 <_svfiprintf_r+0x1ec>)
 8005e9a:	f7ff facf 	bl	800543c <memchr>
 8005e9e:	9a04      	ldr	r2, [sp, #16]
 8005ea0:	b9d8      	cbnz	r0, 8005eda <_svfiprintf_r+0xe6>
 8005ea2:	06d0      	lsls	r0, r2, #27
 8005ea4:	bf44      	itt	mi
 8005ea6:	2320      	movmi	r3, #32
 8005ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eac:	0711      	lsls	r1, r2, #28
 8005eae:	bf44      	itt	mi
 8005eb0:	232b      	movmi	r3, #43	; 0x2b
 8005eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8005eba:	2b2a      	cmp	r3, #42	; 0x2a
 8005ebc:	d015      	beq.n	8005eea <_svfiprintf_r+0xf6>
 8005ebe:	4654      	mov	r4, sl
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	f04f 0c0a 	mov.w	ip, #10
 8005ec6:	9a07      	ldr	r2, [sp, #28]
 8005ec8:	4621      	mov	r1, r4
 8005eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ece:	3b30      	subs	r3, #48	; 0x30
 8005ed0:	2b09      	cmp	r3, #9
 8005ed2:	d94e      	bls.n	8005f72 <_svfiprintf_r+0x17e>
 8005ed4:	b1b0      	cbz	r0, 8005f04 <_svfiprintf_r+0x110>
 8005ed6:	9207      	str	r2, [sp, #28]
 8005ed8:	e014      	b.n	8005f04 <_svfiprintf_r+0x110>
 8005eda:	eba0 0308 	sub.w	r3, r0, r8
 8005ede:	fa09 f303 	lsl.w	r3, r9, r3
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	46a2      	mov	sl, r4
 8005ee6:	9304      	str	r3, [sp, #16]
 8005ee8:	e7d2      	b.n	8005e90 <_svfiprintf_r+0x9c>
 8005eea:	9b03      	ldr	r3, [sp, #12]
 8005eec:	1d19      	adds	r1, r3, #4
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	9103      	str	r1, [sp, #12]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	bfbb      	ittet	lt
 8005ef6:	425b      	neglt	r3, r3
 8005ef8:	f042 0202 	orrlt.w	r2, r2, #2
 8005efc:	9307      	strge	r3, [sp, #28]
 8005efe:	9307      	strlt	r3, [sp, #28]
 8005f00:	bfb8      	it	lt
 8005f02:	9204      	strlt	r2, [sp, #16]
 8005f04:	7823      	ldrb	r3, [r4, #0]
 8005f06:	2b2e      	cmp	r3, #46	; 0x2e
 8005f08:	d10c      	bne.n	8005f24 <_svfiprintf_r+0x130>
 8005f0a:	7863      	ldrb	r3, [r4, #1]
 8005f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f0e:	d135      	bne.n	8005f7c <_svfiprintf_r+0x188>
 8005f10:	9b03      	ldr	r3, [sp, #12]
 8005f12:	3402      	adds	r4, #2
 8005f14:	1d1a      	adds	r2, r3, #4
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	9203      	str	r2, [sp, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	bfb8      	it	lt
 8005f1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f22:	9305      	str	r3, [sp, #20]
 8005f24:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005fe4 <_svfiprintf_r+0x1f0>
 8005f28:	2203      	movs	r2, #3
 8005f2a:	4650      	mov	r0, sl
 8005f2c:	7821      	ldrb	r1, [r4, #0]
 8005f2e:	f7ff fa85 	bl	800543c <memchr>
 8005f32:	b140      	cbz	r0, 8005f46 <_svfiprintf_r+0x152>
 8005f34:	2340      	movs	r3, #64	; 0x40
 8005f36:	eba0 000a 	sub.w	r0, r0, sl
 8005f3a:	fa03 f000 	lsl.w	r0, r3, r0
 8005f3e:	9b04      	ldr	r3, [sp, #16]
 8005f40:	3401      	adds	r4, #1
 8005f42:	4303      	orrs	r3, r0
 8005f44:	9304      	str	r3, [sp, #16]
 8005f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f4a:	2206      	movs	r2, #6
 8005f4c:	4826      	ldr	r0, [pc, #152]	; (8005fe8 <_svfiprintf_r+0x1f4>)
 8005f4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f52:	f7ff fa73 	bl	800543c <memchr>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	d038      	beq.n	8005fcc <_svfiprintf_r+0x1d8>
 8005f5a:	4b24      	ldr	r3, [pc, #144]	; (8005fec <_svfiprintf_r+0x1f8>)
 8005f5c:	bb1b      	cbnz	r3, 8005fa6 <_svfiprintf_r+0x1b2>
 8005f5e:	9b03      	ldr	r3, [sp, #12]
 8005f60:	3307      	adds	r3, #7
 8005f62:	f023 0307 	bic.w	r3, r3, #7
 8005f66:	3308      	adds	r3, #8
 8005f68:	9303      	str	r3, [sp, #12]
 8005f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f6c:	4433      	add	r3, r6
 8005f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f70:	e767      	b.n	8005e42 <_svfiprintf_r+0x4e>
 8005f72:	460c      	mov	r4, r1
 8005f74:	2001      	movs	r0, #1
 8005f76:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f7a:	e7a5      	b.n	8005ec8 <_svfiprintf_r+0xd4>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f04f 0c0a 	mov.w	ip, #10
 8005f82:	4619      	mov	r1, r3
 8005f84:	3401      	adds	r4, #1
 8005f86:	9305      	str	r3, [sp, #20]
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f8e:	3a30      	subs	r2, #48	; 0x30
 8005f90:	2a09      	cmp	r2, #9
 8005f92:	d903      	bls.n	8005f9c <_svfiprintf_r+0x1a8>
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d0c5      	beq.n	8005f24 <_svfiprintf_r+0x130>
 8005f98:	9105      	str	r1, [sp, #20]
 8005f9a:	e7c3      	b.n	8005f24 <_svfiprintf_r+0x130>
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fa4:	e7f0      	b.n	8005f88 <_svfiprintf_r+0x194>
 8005fa6:	ab03      	add	r3, sp, #12
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	462a      	mov	r2, r5
 8005fac:	4638      	mov	r0, r7
 8005fae:	4b10      	ldr	r3, [pc, #64]	; (8005ff0 <_svfiprintf_r+0x1fc>)
 8005fb0:	a904      	add	r1, sp, #16
 8005fb2:	f7fd ffdb 	bl	8003f6c <_printf_float>
 8005fb6:	1c42      	adds	r2, r0, #1
 8005fb8:	4606      	mov	r6, r0
 8005fba:	d1d6      	bne.n	8005f6a <_svfiprintf_r+0x176>
 8005fbc:	89ab      	ldrh	r3, [r5, #12]
 8005fbe:	065b      	lsls	r3, r3, #25
 8005fc0:	f53f af2c 	bmi.w	8005e1c <_svfiprintf_r+0x28>
 8005fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fc6:	b01d      	add	sp, #116	; 0x74
 8005fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fcc:	ab03      	add	r3, sp, #12
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	462a      	mov	r2, r5
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <_svfiprintf_r+0x1fc>)
 8005fd6:	a904      	add	r1, sp, #16
 8005fd8:	f7fe fa64 	bl	80044a4 <_printf_i>
 8005fdc:	e7eb      	b.n	8005fb6 <_svfiprintf_r+0x1c2>
 8005fde:	bf00      	nop
 8005fe0:	080075cc 	.word	0x080075cc
 8005fe4:	080075d2 	.word	0x080075d2
 8005fe8:	080075d6 	.word	0x080075d6
 8005fec:	08003f6d 	.word	0x08003f6d
 8005ff0:	08005d3d 	.word	0x08005d3d

08005ff4 <_sbrk_r>:
 8005ff4:	b538      	push	{r3, r4, r5, lr}
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	4d05      	ldr	r5, [pc, #20]	; (8006010 <_sbrk_r+0x1c>)
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	4608      	mov	r0, r1
 8005ffe:	602b      	str	r3, [r5, #0]
 8006000:	f7fc f87e 	bl	8002100 <_sbrk>
 8006004:	1c43      	adds	r3, r0, #1
 8006006:	d102      	bne.n	800600e <_sbrk_r+0x1a>
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	b103      	cbz	r3, 800600e <_sbrk_r+0x1a>
 800600c:	6023      	str	r3, [r4, #0]
 800600e:	bd38      	pop	{r3, r4, r5, pc}
 8006010:	200004bc 	.word	0x200004bc

08006014 <__assert_func>:
 8006014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006016:	4614      	mov	r4, r2
 8006018:	461a      	mov	r2, r3
 800601a:	4b09      	ldr	r3, [pc, #36]	; (8006040 <__assert_func+0x2c>)
 800601c:	4605      	mov	r5, r0
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68d8      	ldr	r0, [r3, #12]
 8006022:	b14c      	cbz	r4, 8006038 <__assert_func+0x24>
 8006024:	4b07      	ldr	r3, [pc, #28]	; (8006044 <__assert_func+0x30>)
 8006026:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800602a:	9100      	str	r1, [sp, #0]
 800602c:	462b      	mov	r3, r5
 800602e:	4906      	ldr	r1, [pc, #24]	; (8006048 <__assert_func+0x34>)
 8006030:	f000 f80e 	bl	8006050 <fiprintf>
 8006034:	f000 fa90 	bl	8006558 <abort>
 8006038:	4b04      	ldr	r3, [pc, #16]	; (800604c <__assert_func+0x38>)
 800603a:	461c      	mov	r4, r3
 800603c:	e7f3      	b.n	8006026 <__assert_func+0x12>
 800603e:	bf00      	nop
 8006040:	20000020 	.word	0x20000020
 8006044:	080075dd 	.word	0x080075dd
 8006048:	080075ea 	.word	0x080075ea
 800604c:	08007618 	.word	0x08007618

08006050 <fiprintf>:
 8006050:	b40e      	push	{r1, r2, r3}
 8006052:	b503      	push	{r0, r1, lr}
 8006054:	4601      	mov	r1, r0
 8006056:	ab03      	add	r3, sp, #12
 8006058:	4805      	ldr	r0, [pc, #20]	; (8006070 <fiprintf+0x20>)
 800605a:	f853 2b04 	ldr.w	r2, [r3], #4
 800605e:	6800      	ldr	r0, [r0, #0]
 8006060:	9301      	str	r3, [sp, #4]
 8006062:	f000 f87b 	bl	800615c <_vfiprintf_r>
 8006066:	b002      	add	sp, #8
 8006068:	f85d eb04 	ldr.w	lr, [sp], #4
 800606c:	b003      	add	sp, #12
 800606e:	4770      	bx	lr
 8006070:	20000020 	.word	0x20000020

08006074 <__ascii_mbtowc>:
 8006074:	b082      	sub	sp, #8
 8006076:	b901      	cbnz	r1, 800607a <__ascii_mbtowc+0x6>
 8006078:	a901      	add	r1, sp, #4
 800607a:	b142      	cbz	r2, 800608e <__ascii_mbtowc+0x1a>
 800607c:	b14b      	cbz	r3, 8006092 <__ascii_mbtowc+0x1e>
 800607e:	7813      	ldrb	r3, [r2, #0]
 8006080:	600b      	str	r3, [r1, #0]
 8006082:	7812      	ldrb	r2, [r2, #0]
 8006084:	1e10      	subs	r0, r2, #0
 8006086:	bf18      	it	ne
 8006088:	2001      	movne	r0, #1
 800608a:	b002      	add	sp, #8
 800608c:	4770      	bx	lr
 800608e:	4610      	mov	r0, r2
 8006090:	e7fb      	b.n	800608a <__ascii_mbtowc+0x16>
 8006092:	f06f 0001 	mvn.w	r0, #1
 8006096:	e7f8      	b.n	800608a <__ascii_mbtowc+0x16>

08006098 <__malloc_lock>:
 8006098:	4801      	ldr	r0, [pc, #4]	; (80060a0 <__malloc_lock+0x8>)
 800609a:	f000 bc19 	b.w	80068d0 <__retarget_lock_acquire_recursive>
 800609e:	bf00      	nop
 80060a0:	200004c0 	.word	0x200004c0

080060a4 <__malloc_unlock>:
 80060a4:	4801      	ldr	r0, [pc, #4]	; (80060ac <__malloc_unlock+0x8>)
 80060a6:	f000 bc14 	b.w	80068d2 <__retarget_lock_release_recursive>
 80060aa:	bf00      	nop
 80060ac:	200004c0 	.word	0x200004c0

080060b0 <_realloc_r>:
 80060b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060b4:	4680      	mov	r8, r0
 80060b6:	4614      	mov	r4, r2
 80060b8:	460e      	mov	r6, r1
 80060ba:	b921      	cbnz	r1, 80060c6 <_realloc_r+0x16>
 80060bc:	4611      	mov	r1, r2
 80060be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060c2:	f7ff bdc7 	b.w	8005c54 <_malloc_r>
 80060c6:	b92a      	cbnz	r2, 80060d4 <_realloc_r+0x24>
 80060c8:	f7ff fd5c 	bl	8005b84 <_free_r>
 80060cc:	4625      	mov	r5, r4
 80060ce:	4628      	mov	r0, r5
 80060d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060d4:	f000 fc64 	bl	80069a0 <_malloc_usable_size_r>
 80060d8:	4284      	cmp	r4, r0
 80060da:	4607      	mov	r7, r0
 80060dc:	d802      	bhi.n	80060e4 <_realloc_r+0x34>
 80060de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80060e2:	d812      	bhi.n	800610a <_realloc_r+0x5a>
 80060e4:	4621      	mov	r1, r4
 80060e6:	4640      	mov	r0, r8
 80060e8:	f7ff fdb4 	bl	8005c54 <_malloc_r>
 80060ec:	4605      	mov	r5, r0
 80060ee:	2800      	cmp	r0, #0
 80060f0:	d0ed      	beq.n	80060ce <_realloc_r+0x1e>
 80060f2:	42bc      	cmp	r4, r7
 80060f4:	4622      	mov	r2, r4
 80060f6:	4631      	mov	r1, r6
 80060f8:	bf28      	it	cs
 80060fa:	463a      	movcs	r2, r7
 80060fc:	f7fd fe68 	bl	8003dd0 <memcpy>
 8006100:	4631      	mov	r1, r6
 8006102:	4640      	mov	r0, r8
 8006104:	f7ff fd3e 	bl	8005b84 <_free_r>
 8006108:	e7e1      	b.n	80060ce <_realloc_r+0x1e>
 800610a:	4635      	mov	r5, r6
 800610c:	e7df      	b.n	80060ce <_realloc_r+0x1e>

0800610e <__sfputc_r>:
 800610e:	6893      	ldr	r3, [r2, #8]
 8006110:	b410      	push	{r4}
 8006112:	3b01      	subs	r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	6093      	str	r3, [r2, #8]
 8006118:	da07      	bge.n	800612a <__sfputc_r+0x1c>
 800611a:	6994      	ldr	r4, [r2, #24]
 800611c:	42a3      	cmp	r3, r4
 800611e:	db01      	blt.n	8006124 <__sfputc_r+0x16>
 8006120:	290a      	cmp	r1, #10
 8006122:	d102      	bne.n	800612a <__sfputc_r+0x1c>
 8006124:	bc10      	pop	{r4}
 8006126:	f000 b949 	b.w	80063bc <__swbuf_r>
 800612a:	6813      	ldr	r3, [r2, #0]
 800612c:	1c58      	adds	r0, r3, #1
 800612e:	6010      	str	r0, [r2, #0]
 8006130:	7019      	strb	r1, [r3, #0]
 8006132:	4608      	mov	r0, r1
 8006134:	bc10      	pop	{r4}
 8006136:	4770      	bx	lr

08006138 <__sfputs_r>:
 8006138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613a:	4606      	mov	r6, r0
 800613c:	460f      	mov	r7, r1
 800613e:	4614      	mov	r4, r2
 8006140:	18d5      	adds	r5, r2, r3
 8006142:	42ac      	cmp	r4, r5
 8006144:	d101      	bne.n	800614a <__sfputs_r+0x12>
 8006146:	2000      	movs	r0, #0
 8006148:	e007      	b.n	800615a <__sfputs_r+0x22>
 800614a:	463a      	mov	r2, r7
 800614c:	4630      	mov	r0, r6
 800614e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006152:	f7ff ffdc 	bl	800610e <__sfputc_r>
 8006156:	1c43      	adds	r3, r0, #1
 8006158:	d1f3      	bne.n	8006142 <__sfputs_r+0xa>
 800615a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800615c <_vfiprintf_r>:
 800615c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006160:	460d      	mov	r5, r1
 8006162:	4614      	mov	r4, r2
 8006164:	4698      	mov	r8, r3
 8006166:	4606      	mov	r6, r0
 8006168:	b09d      	sub	sp, #116	; 0x74
 800616a:	b118      	cbz	r0, 8006174 <_vfiprintf_r+0x18>
 800616c:	6983      	ldr	r3, [r0, #24]
 800616e:	b90b      	cbnz	r3, 8006174 <_vfiprintf_r+0x18>
 8006170:	f000 fb10 	bl	8006794 <__sinit>
 8006174:	4b89      	ldr	r3, [pc, #548]	; (800639c <_vfiprintf_r+0x240>)
 8006176:	429d      	cmp	r5, r3
 8006178:	d11b      	bne.n	80061b2 <_vfiprintf_r+0x56>
 800617a:	6875      	ldr	r5, [r6, #4]
 800617c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800617e:	07d9      	lsls	r1, r3, #31
 8006180:	d405      	bmi.n	800618e <_vfiprintf_r+0x32>
 8006182:	89ab      	ldrh	r3, [r5, #12]
 8006184:	059a      	lsls	r2, r3, #22
 8006186:	d402      	bmi.n	800618e <_vfiprintf_r+0x32>
 8006188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800618a:	f000 fba1 	bl	80068d0 <__retarget_lock_acquire_recursive>
 800618e:	89ab      	ldrh	r3, [r5, #12]
 8006190:	071b      	lsls	r3, r3, #28
 8006192:	d501      	bpl.n	8006198 <_vfiprintf_r+0x3c>
 8006194:	692b      	ldr	r3, [r5, #16]
 8006196:	b9eb      	cbnz	r3, 80061d4 <_vfiprintf_r+0x78>
 8006198:	4629      	mov	r1, r5
 800619a:	4630      	mov	r0, r6
 800619c:	f000 f96e 	bl	800647c <__swsetup_r>
 80061a0:	b1c0      	cbz	r0, 80061d4 <_vfiprintf_r+0x78>
 80061a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061a4:	07dc      	lsls	r4, r3, #31
 80061a6:	d50e      	bpl.n	80061c6 <_vfiprintf_r+0x6a>
 80061a8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ac:	b01d      	add	sp, #116	; 0x74
 80061ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b2:	4b7b      	ldr	r3, [pc, #492]	; (80063a0 <_vfiprintf_r+0x244>)
 80061b4:	429d      	cmp	r5, r3
 80061b6:	d101      	bne.n	80061bc <_vfiprintf_r+0x60>
 80061b8:	68b5      	ldr	r5, [r6, #8]
 80061ba:	e7df      	b.n	800617c <_vfiprintf_r+0x20>
 80061bc:	4b79      	ldr	r3, [pc, #484]	; (80063a4 <_vfiprintf_r+0x248>)
 80061be:	429d      	cmp	r5, r3
 80061c0:	bf08      	it	eq
 80061c2:	68f5      	ldreq	r5, [r6, #12]
 80061c4:	e7da      	b.n	800617c <_vfiprintf_r+0x20>
 80061c6:	89ab      	ldrh	r3, [r5, #12]
 80061c8:	0598      	lsls	r0, r3, #22
 80061ca:	d4ed      	bmi.n	80061a8 <_vfiprintf_r+0x4c>
 80061cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061ce:	f000 fb80 	bl	80068d2 <__retarget_lock_release_recursive>
 80061d2:	e7e9      	b.n	80061a8 <_vfiprintf_r+0x4c>
 80061d4:	2300      	movs	r3, #0
 80061d6:	9309      	str	r3, [sp, #36]	; 0x24
 80061d8:	2320      	movs	r3, #32
 80061da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061de:	2330      	movs	r3, #48	; 0x30
 80061e0:	f04f 0901 	mov.w	r9, #1
 80061e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80061e8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80063a8 <_vfiprintf_r+0x24c>
 80061ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061f0:	4623      	mov	r3, r4
 80061f2:	469a      	mov	sl, r3
 80061f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061f8:	b10a      	cbz	r2, 80061fe <_vfiprintf_r+0xa2>
 80061fa:	2a25      	cmp	r2, #37	; 0x25
 80061fc:	d1f9      	bne.n	80061f2 <_vfiprintf_r+0x96>
 80061fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006202:	d00b      	beq.n	800621c <_vfiprintf_r+0xc0>
 8006204:	465b      	mov	r3, fp
 8006206:	4622      	mov	r2, r4
 8006208:	4629      	mov	r1, r5
 800620a:	4630      	mov	r0, r6
 800620c:	f7ff ff94 	bl	8006138 <__sfputs_r>
 8006210:	3001      	adds	r0, #1
 8006212:	f000 80aa 	beq.w	800636a <_vfiprintf_r+0x20e>
 8006216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006218:	445a      	add	r2, fp
 800621a:	9209      	str	r2, [sp, #36]	; 0x24
 800621c:	f89a 3000 	ldrb.w	r3, [sl]
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 80a2 	beq.w	800636a <_vfiprintf_r+0x20e>
 8006226:	2300      	movs	r3, #0
 8006228:	f04f 32ff 	mov.w	r2, #4294967295
 800622c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006230:	f10a 0a01 	add.w	sl, sl, #1
 8006234:	9304      	str	r3, [sp, #16]
 8006236:	9307      	str	r3, [sp, #28]
 8006238:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800623c:	931a      	str	r3, [sp, #104]	; 0x68
 800623e:	4654      	mov	r4, sl
 8006240:	2205      	movs	r2, #5
 8006242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006246:	4858      	ldr	r0, [pc, #352]	; (80063a8 <_vfiprintf_r+0x24c>)
 8006248:	f7ff f8f8 	bl	800543c <memchr>
 800624c:	9a04      	ldr	r2, [sp, #16]
 800624e:	b9d8      	cbnz	r0, 8006288 <_vfiprintf_r+0x12c>
 8006250:	06d1      	lsls	r1, r2, #27
 8006252:	bf44      	itt	mi
 8006254:	2320      	movmi	r3, #32
 8006256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800625a:	0713      	lsls	r3, r2, #28
 800625c:	bf44      	itt	mi
 800625e:	232b      	movmi	r3, #43	; 0x2b
 8006260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006264:	f89a 3000 	ldrb.w	r3, [sl]
 8006268:	2b2a      	cmp	r3, #42	; 0x2a
 800626a:	d015      	beq.n	8006298 <_vfiprintf_r+0x13c>
 800626c:	4654      	mov	r4, sl
 800626e:	2000      	movs	r0, #0
 8006270:	f04f 0c0a 	mov.w	ip, #10
 8006274:	9a07      	ldr	r2, [sp, #28]
 8006276:	4621      	mov	r1, r4
 8006278:	f811 3b01 	ldrb.w	r3, [r1], #1
 800627c:	3b30      	subs	r3, #48	; 0x30
 800627e:	2b09      	cmp	r3, #9
 8006280:	d94e      	bls.n	8006320 <_vfiprintf_r+0x1c4>
 8006282:	b1b0      	cbz	r0, 80062b2 <_vfiprintf_r+0x156>
 8006284:	9207      	str	r2, [sp, #28]
 8006286:	e014      	b.n	80062b2 <_vfiprintf_r+0x156>
 8006288:	eba0 0308 	sub.w	r3, r0, r8
 800628c:	fa09 f303 	lsl.w	r3, r9, r3
 8006290:	4313      	orrs	r3, r2
 8006292:	46a2      	mov	sl, r4
 8006294:	9304      	str	r3, [sp, #16]
 8006296:	e7d2      	b.n	800623e <_vfiprintf_r+0xe2>
 8006298:	9b03      	ldr	r3, [sp, #12]
 800629a:	1d19      	adds	r1, r3, #4
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	9103      	str	r1, [sp, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bfbb      	ittet	lt
 80062a4:	425b      	neglt	r3, r3
 80062a6:	f042 0202 	orrlt.w	r2, r2, #2
 80062aa:	9307      	strge	r3, [sp, #28]
 80062ac:	9307      	strlt	r3, [sp, #28]
 80062ae:	bfb8      	it	lt
 80062b0:	9204      	strlt	r2, [sp, #16]
 80062b2:	7823      	ldrb	r3, [r4, #0]
 80062b4:	2b2e      	cmp	r3, #46	; 0x2e
 80062b6:	d10c      	bne.n	80062d2 <_vfiprintf_r+0x176>
 80062b8:	7863      	ldrb	r3, [r4, #1]
 80062ba:	2b2a      	cmp	r3, #42	; 0x2a
 80062bc:	d135      	bne.n	800632a <_vfiprintf_r+0x1ce>
 80062be:	9b03      	ldr	r3, [sp, #12]
 80062c0:	3402      	adds	r4, #2
 80062c2:	1d1a      	adds	r2, r3, #4
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	9203      	str	r2, [sp, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	bfb8      	it	lt
 80062cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80062d0:	9305      	str	r3, [sp, #20]
 80062d2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80063ac <_vfiprintf_r+0x250>
 80062d6:	2203      	movs	r2, #3
 80062d8:	4650      	mov	r0, sl
 80062da:	7821      	ldrb	r1, [r4, #0]
 80062dc:	f7ff f8ae 	bl	800543c <memchr>
 80062e0:	b140      	cbz	r0, 80062f4 <_vfiprintf_r+0x198>
 80062e2:	2340      	movs	r3, #64	; 0x40
 80062e4:	eba0 000a 	sub.w	r0, r0, sl
 80062e8:	fa03 f000 	lsl.w	r0, r3, r0
 80062ec:	9b04      	ldr	r3, [sp, #16]
 80062ee:	3401      	adds	r4, #1
 80062f0:	4303      	orrs	r3, r0
 80062f2:	9304      	str	r3, [sp, #16]
 80062f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f8:	2206      	movs	r2, #6
 80062fa:	482d      	ldr	r0, [pc, #180]	; (80063b0 <_vfiprintf_r+0x254>)
 80062fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006300:	f7ff f89c 	bl	800543c <memchr>
 8006304:	2800      	cmp	r0, #0
 8006306:	d03f      	beq.n	8006388 <_vfiprintf_r+0x22c>
 8006308:	4b2a      	ldr	r3, [pc, #168]	; (80063b4 <_vfiprintf_r+0x258>)
 800630a:	bb1b      	cbnz	r3, 8006354 <_vfiprintf_r+0x1f8>
 800630c:	9b03      	ldr	r3, [sp, #12]
 800630e:	3307      	adds	r3, #7
 8006310:	f023 0307 	bic.w	r3, r3, #7
 8006314:	3308      	adds	r3, #8
 8006316:	9303      	str	r3, [sp, #12]
 8006318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800631a:	443b      	add	r3, r7
 800631c:	9309      	str	r3, [sp, #36]	; 0x24
 800631e:	e767      	b.n	80061f0 <_vfiprintf_r+0x94>
 8006320:	460c      	mov	r4, r1
 8006322:	2001      	movs	r0, #1
 8006324:	fb0c 3202 	mla	r2, ip, r2, r3
 8006328:	e7a5      	b.n	8006276 <_vfiprintf_r+0x11a>
 800632a:	2300      	movs	r3, #0
 800632c:	f04f 0c0a 	mov.w	ip, #10
 8006330:	4619      	mov	r1, r3
 8006332:	3401      	adds	r4, #1
 8006334:	9305      	str	r3, [sp, #20]
 8006336:	4620      	mov	r0, r4
 8006338:	f810 2b01 	ldrb.w	r2, [r0], #1
 800633c:	3a30      	subs	r2, #48	; 0x30
 800633e:	2a09      	cmp	r2, #9
 8006340:	d903      	bls.n	800634a <_vfiprintf_r+0x1ee>
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0c5      	beq.n	80062d2 <_vfiprintf_r+0x176>
 8006346:	9105      	str	r1, [sp, #20]
 8006348:	e7c3      	b.n	80062d2 <_vfiprintf_r+0x176>
 800634a:	4604      	mov	r4, r0
 800634c:	2301      	movs	r3, #1
 800634e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006352:	e7f0      	b.n	8006336 <_vfiprintf_r+0x1da>
 8006354:	ab03      	add	r3, sp, #12
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	462a      	mov	r2, r5
 800635a:	4630      	mov	r0, r6
 800635c:	4b16      	ldr	r3, [pc, #88]	; (80063b8 <_vfiprintf_r+0x25c>)
 800635e:	a904      	add	r1, sp, #16
 8006360:	f7fd fe04 	bl	8003f6c <_printf_float>
 8006364:	4607      	mov	r7, r0
 8006366:	1c78      	adds	r0, r7, #1
 8006368:	d1d6      	bne.n	8006318 <_vfiprintf_r+0x1bc>
 800636a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800636c:	07d9      	lsls	r1, r3, #31
 800636e:	d405      	bmi.n	800637c <_vfiprintf_r+0x220>
 8006370:	89ab      	ldrh	r3, [r5, #12]
 8006372:	059a      	lsls	r2, r3, #22
 8006374:	d402      	bmi.n	800637c <_vfiprintf_r+0x220>
 8006376:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006378:	f000 faab 	bl	80068d2 <__retarget_lock_release_recursive>
 800637c:	89ab      	ldrh	r3, [r5, #12]
 800637e:	065b      	lsls	r3, r3, #25
 8006380:	f53f af12 	bmi.w	80061a8 <_vfiprintf_r+0x4c>
 8006384:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006386:	e711      	b.n	80061ac <_vfiprintf_r+0x50>
 8006388:	ab03      	add	r3, sp, #12
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	462a      	mov	r2, r5
 800638e:	4630      	mov	r0, r6
 8006390:	4b09      	ldr	r3, [pc, #36]	; (80063b8 <_vfiprintf_r+0x25c>)
 8006392:	a904      	add	r1, sp, #16
 8006394:	f7fe f886 	bl	80044a4 <_printf_i>
 8006398:	e7e4      	b.n	8006364 <_vfiprintf_r+0x208>
 800639a:	bf00      	nop
 800639c:	08007744 	.word	0x08007744
 80063a0:	08007764 	.word	0x08007764
 80063a4:	08007724 	.word	0x08007724
 80063a8:	080075cc 	.word	0x080075cc
 80063ac:	080075d2 	.word	0x080075d2
 80063b0:	080075d6 	.word	0x080075d6
 80063b4:	08003f6d 	.word	0x08003f6d
 80063b8:	08006139 	.word	0x08006139

080063bc <__swbuf_r>:
 80063bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063be:	460e      	mov	r6, r1
 80063c0:	4614      	mov	r4, r2
 80063c2:	4605      	mov	r5, r0
 80063c4:	b118      	cbz	r0, 80063ce <__swbuf_r+0x12>
 80063c6:	6983      	ldr	r3, [r0, #24]
 80063c8:	b90b      	cbnz	r3, 80063ce <__swbuf_r+0x12>
 80063ca:	f000 f9e3 	bl	8006794 <__sinit>
 80063ce:	4b21      	ldr	r3, [pc, #132]	; (8006454 <__swbuf_r+0x98>)
 80063d0:	429c      	cmp	r4, r3
 80063d2:	d12b      	bne.n	800642c <__swbuf_r+0x70>
 80063d4:	686c      	ldr	r4, [r5, #4]
 80063d6:	69a3      	ldr	r3, [r4, #24]
 80063d8:	60a3      	str	r3, [r4, #8]
 80063da:	89a3      	ldrh	r3, [r4, #12]
 80063dc:	071a      	lsls	r2, r3, #28
 80063de:	d52f      	bpl.n	8006440 <__swbuf_r+0x84>
 80063e0:	6923      	ldr	r3, [r4, #16]
 80063e2:	b36b      	cbz	r3, 8006440 <__swbuf_r+0x84>
 80063e4:	6923      	ldr	r3, [r4, #16]
 80063e6:	6820      	ldr	r0, [r4, #0]
 80063e8:	b2f6      	uxtb	r6, r6
 80063ea:	1ac0      	subs	r0, r0, r3
 80063ec:	6963      	ldr	r3, [r4, #20]
 80063ee:	4637      	mov	r7, r6
 80063f0:	4283      	cmp	r3, r0
 80063f2:	dc04      	bgt.n	80063fe <__swbuf_r+0x42>
 80063f4:	4621      	mov	r1, r4
 80063f6:	4628      	mov	r0, r5
 80063f8:	f000 f938 	bl	800666c <_fflush_r>
 80063fc:	bb30      	cbnz	r0, 800644c <__swbuf_r+0x90>
 80063fe:	68a3      	ldr	r3, [r4, #8]
 8006400:	3001      	adds	r0, #1
 8006402:	3b01      	subs	r3, #1
 8006404:	60a3      	str	r3, [r4, #8]
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	6022      	str	r2, [r4, #0]
 800640c:	701e      	strb	r6, [r3, #0]
 800640e:	6963      	ldr	r3, [r4, #20]
 8006410:	4283      	cmp	r3, r0
 8006412:	d004      	beq.n	800641e <__swbuf_r+0x62>
 8006414:	89a3      	ldrh	r3, [r4, #12]
 8006416:	07db      	lsls	r3, r3, #31
 8006418:	d506      	bpl.n	8006428 <__swbuf_r+0x6c>
 800641a:	2e0a      	cmp	r6, #10
 800641c:	d104      	bne.n	8006428 <__swbuf_r+0x6c>
 800641e:	4621      	mov	r1, r4
 8006420:	4628      	mov	r0, r5
 8006422:	f000 f923 	bl	800666c <_fflush_r>
 8006426:	b988      	cbnz	r0, 800644c <__swbuf_r+0x90>
 8006428:	4638      	mov	r0, r7
 800642a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800642c:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <__swbuf_r+0x9c>)
 800642e:	429c      	cmp	r4, r3
 8006430:	d101      	bne.n	8006436 <__swbuf_r+0x7a>
 8006432:	68ac      	ldr	r4, [r5, #8]
 8006434:	e7cf      	b.n	80063d6 <__swbuf_r+0x1a>
 8006436:	4b09      	ldr	r3, [pc, #36]	; (800645c <__swbuf_r+0xa0>)
 8006438:	429c      	cmp	r4, r3
 800643a:	bf08      	it	eq
 800643c:	68ec      	ldreq	r4, [r5, #12]
 800643e:	e7ca      	b.n	80063d6 <__swbuf_r+0x1a>
 8006440:	4621      	mov	r1, r4
 8006442:	4628      	mov	r0, r5
 8006444:	f000 f81a 	bl	800647c <__swsetup_r>
 8006448:	2800      	cmp	r0, #0
 800644a:	d0cb      	beq.n	80063e4 <__swbuf_r+0x28>
 800644c:	f04f 37ff 	mov.w	r7, #4294967295
 8006450:	e7ea      	b.n	8006428 <__swbuf_r+0x6c>
 8006452:	bf00      	nop
 8006454:	08007744 	.word	0x08007744
 8006458:	08007764 	.word	0x08007764
 800645c:	08007724 	.word	0x08007724

08006460 <__ascii_wctomb>:
 8006460:	4603      	mov	r3, r0
 8006462:	4608      	mov	r0, r1
 8006464:	b141      	cbz	r1, 8006478 <__ascii_wctomb+0x18>
 8006466:	2aff      	cmp	r2, #255	; 0xff
 8006468:	d904      	bls.n	8006474 <__ascii_wctomb+0x14>
 800646a:	228a      	movs	r2, #138	; 0x8a
 800646c:	f04f 30ff 	mov.w	r0, #4294967295
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	4770      	bx	lr
 8006474:	2001      	movs	r0, #1
 8006476:	700a      	strb	r2, [r1, #0]
 8006478:	4770      	bx	lr
	...

0800647c <__swsetup_r>:
 800647c:	4b32      	ldr	r3, [pc, #200]	; (8006548 <__swsetup_r+0xcc>)
 800647e:	b570      	push	{r4, r5, r6, lr}
 8006480:	681d      	ldr	r5, [r3, #0]
 8006482:	4606      	mov	r6, r0
 8006484:	460c      	mov	r4, r1
 8006486:	b125      	cbz	r5, 8006492 <__swsetup_r+0x16>
 8006488:	69ab      	ldr	r3, [r5, #24]
 800648a:	b913      	cbnz	r3, 8006492 <__swsetup_r+0x16>
 800648c:	4628      	mov	r0, r5
 800648e:	f000 f981 	bl	8006794 <__sinit>
 8006492:	4b2e      	ldr	r3, [pc, #184]	; (800654c <__swsetup_r+0xd0>)
 8006494:	429c      	cmp	r4, r3
 8006496:	d10f      	bne.n	80064b8 <__swsetup_r+0x3c>
 8006498:	686c      	ldr	r4, [r5, #4]
 800649a:	89a3      	ldrh	r3, [r4, #12]
 800649c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064a0:	0719      	lsls	r1, r3, #28
 80064a2:	d42c      	bmi.n	80064fe <__swsetup_r+0x82>
 80064a4:	06dd      	lsls	r5, r3, #27
 80064a6:	d411      	bmi.n	80064cc <__swsetup_r+0x50>
 80064a8:	2309      	movs	r3, #9
 80064aa:	6033      	str	r3, [r6, #0]
 80064ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80064b0:	f04f 30ff 	mov.w	r0, #4294967295
 80064b4:	81a3      	strh	r3, [r4, #12]
 80064b6:	e03e      	b.n	8006536 <__swsetup_r+0xba>
 80064b8:	4b25      	ldr	r3, [pc, #148]	; (8006550 <__swsetup_r+0xd4>)
 80064ba:	429c      	cmp	r4, r3
 80064bc:	d101      	bne.n	80064c2 <__swsetup_r+0x46>
 80064be:	68ac      	ldr	r4, [r5, #8]
 80064c0:	e7eb      	b.n	800649a <__swsetup_r+0x1e>
 80064c2:	4b24      	ldr	r3, [pc, #144]	; (8006554 <__swsetup_r+0xd8>)
 80064c4:	429c      	cmp	r4, r3
 80064c6:	bf08      	it	eq
 80064c8:	68ec      	ldreq	r4, [r5, #12]
 80064ca:	e7e6      	b.n	800649a <__swsetup_r+0x1e>
 80064cc:	0758      	lsls	r0, r3, #29
 80064ce:	d512      	bpl.n	80064f6 <__swsetup_r+0x7a>
 80064d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064d2:	b141      	cbz	r1, 80064e6 <__swsetup_r+0x6a>
 80064d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064d8:	4299      	cmp	r1, r3
 80064da:	d002      	beq.n	80064e2 <__swsetup_r+0x66>
 80064dc:	4630      	mov	r0, r6
 80064de:	f7ff fb51 	bl	8005b84 <_free_r>
 80064e2:	2300      	movs	r3, #0
 80064e4:	6363      	str	r3, [r4, #52]	; 0x34
 80064e6:	89a3      	ldrh	r3, [r4, #12]
 80064e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064ec:	81a3      	strh	r3, [r4, #12]
 80064ee:	2300      	movs	r3, #0
 80064f0:	6063      	str	r3, [r4, #4]
 80064f2:	6923      	ldr	r3, [r4, #16]
 80064f4:	6023      	str	r3, [r4, #0]
 80064f6:	89a3      	ldrh	r3, [r4, #12]
 80064f8:	f043 0308 	orr.w	r3, r3, #8
 80064fc:	81a3      	strh	r3, [r4, #12]
 80064fe:	6923      	ldr	r3, [r4, #16]
 8006500:	b94b      	cbnz	r3, 8006516 <__swsetup_r+0x9a>
 8006502:	89a3      	ldrh	r3, [r4, #12]
 8006504:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800650c:	d003      	beq.n	8006516 <__swsetup_r+0x9a>
 800650e:	4621      	mov	r1, r4
 8006510:	4630      	mov	r0, r6
 8006512:	f000 fa05 	bl	8006920 <__smakebuf_r>
 8006516:	89a0      	ldrh	r0, [r4, #12]
 8006518:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800651c:	f010 0301 	ands.w	r3, r0, #1
 8006520:	d00a      	beq.n	8006538 <__swsetup_r+0xbc>
 8006522:	2300      	movs	r3, #0
 8006524:	60a3      	str	r3, [r4, #8]
 8006526:	6963      	ldr	r3, [r4, #20]
 8006528:	425b      	negs	r3, r3
 800652a:	61a3      	str	r3, [r4, #24]
 800652c:	6923      	ldr	r3, [r4, #16]
 800652e:	b943      	cbnz	r3, 8006542 <__swsetup_r+0xc6>
 8006530:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006534:	d1ba      	bne.n	80064ac <__swsetup_r+0x30>
 8006536:	bd70      	pop	{r4, r5, r6, pc}
 8006538:	0781      	lsls	r1, r0, #30
 800653a:	bf58      	it	pl
 800653c:	6963      	ldrpl	r3, [r4, #20]
 800653e:	60a3      	str	r3, [r4, #8]
 8006540:	e7f4      	b.n	800652c <__swsetup_r+0xb0>
 8006542:	2000      	movs	r0, #0
 8006544:	e7f7      	b.n	8006536 <__swsetup_r+0xba>
 8006546:	bf00      	nop
 8006548:	20000020 	.word	0x20000020
 800654c:	08007744 	.word	0x08007744
 8006550:	08007764 	.word	0x08007764
 8006554:	08007724 	.word	0x08007724

08006558 <abort>:
 8006558:	2006      	movs	r0, #6
 800655a:	b508      	push	{r3, lr}
 800655c:	f000 fa50 	bl	8006a00 <raise>
 8006560:	2001      	movs	r0, #1
 8006562:	f7fb fd59 	bl	8002018 <_exit>
	...

08006568 <__sflush_r>:
 8006568:	898a      	ldrh	r2, [r1, #12]
 800656a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656c:	4605      	mov	r5, r0
 800656e:	0710      	lsls	r0, r2, #28
 8006570:	460c      	mov	r4, r1
 8006572:	d457      	bmi.n	8006624 <__sflush_r+0xbc>
 8006574:	684b      	ldr	r3, [r1, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	dc04      	bgt.n	8006584 <__sflush_r+0x1c>
 800657a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800657c:	2b00      	cmp	r3, #0
 800657e:	dc01      	bgt.n	8006584 <__sflush_r+0x1c>
 8006580:	2000      	movs	r0, #0
 8006582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006584:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006586:	2e00      	cmp	r6, #0
 8006588:	d0fa      	beq.n	8006580 <__sflush_r+0x18>
 800658a:	2300      	movs	r3, #0
 800658c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006590:	682f      	ldr	r7, [r5, #0]
 8006592:	602b      	str	r3, [r5, #0]
 8006594:	d032      	beq.n	80065fc <__sflush_r+0x94>
 8006596:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006598:	89a3      	ldrh	r3, [r4, #12]
 800659a:	075a      	lsls	r2, r3, #29
 800659c:	d505      	bpl.n	80065aa <__sflush_r+0x42>
 800659e:	6863      	ldr	r3, [r4, #4]
 80065a0:	1ac0      	subs	r0, r0, r3
 80065a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80065a4:	b10b      	cbz	r3, 80065aa <__sflush_r+0x42>
 80065a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065a8:	1ac0      	subs	r0, r0, r3
 80065aa:	2300      	movs	r3, #0
 80065ac:	4602      	mov	r2, r0
 80065ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065b0:	4628      	mov	r0, r5
 80065b2:	6a21      	ldr	r1, [r4, #32]
 80065b4:	47b0      	blx	r6
 80065b6:	1c43      	adds	r3, r0, #1
 80065b8:	89a3      	ldrh	r3, [r4, #12]
 80065ba:	d106      	bne.n	80065ca <__sflush_r+0x62>
 80065bc:	6829      	ldr	r1, [r5, #0]
 80065be:	291d      	cmp	r1, #29
 80065c0:	d82c      	bhi.n	800661c <__sflush_r+0xb4>
 80065c2:	4a29      	ldr	r2, [pc, #164]	; (8006668 <__sflush_r+0x100>)
 80065c4:	40ca      	lsrs	r2, r1
 80065c6:	07d6      	lsls	r6, r2, #31
 80065c8:	d528      	bpl.n	800661c <__sflush_r+0xb4>
 80065ca:	2200      	movs	r2, #0
 80065cc:	6062      	str	r2, [r4, #4]
 80065ce:	6922      	ldr	r2, [r4, #16]
 80065d0:	04d9      	lsls	r1, r3, #19
 80065d2:	6022      	str	r2, [r4, #0]
 80065d4:	d504      	bpl.n	80065e0 <__sflush_r+0x78>
 80065d6:	1c42      	adds	r2, r0, #1
 80065d8:	d101      	bne.n	80065de <__sflush_r+0x76>
 80065da:	682b      	ldr	r3, [r5, #0]
 80065dc:	b903      	cbnz	r3, 80065e0 <__sflush_r+0x78>
 80065de:	6560      	str	r0, [r4, #84]	; 0x54
 80065e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065e2:	602f      	str	r7, [r5, #0]
 80065e4:	2900      	cmp	r1, #0
 80065e6:	d0cb      	beq.n	8006580 <__sflush_r+0x18>
 80065e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065ec:	4299      	cmp	r1, r3
 80065ee:	d002      	beq.n	80065f6 <__sflush_r+0x8e>
 80065f0:	4628      	mov	r0, r5
 80065f2:	f7ff fac7 	bl	8005b84 <_free_r>
 80065f6:	2000      	movs	r0, #0
 80065f8:	6360      	str	r0, [r4, #52]	; 0x34
 80065fa:	e7c2      	b.n	8006582 <__sflush_r+0x1a>
 80065fc:	6a21      	ldr	r1, [r4, #32]
 80065fe:	2301      	movs	r3, #1
 8006600:	4628      	mov	r0, r5
 8006602:	47b0      	blx	r6
 8006604:	1c41      	adds	r1, r0, #1
 8006606:	d1c7      	bne.n	8006598 <__sflush_r+0x30>
 8006608:	682b      	ldr	r3, [r5, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0c4      	beq.n	8006598 <__sflush_r+0x30>
 800660e:	2b1d      	cmp	r3, #29
 8006610:	d001      	beq.n	8006616 <__sflush_r+0xae>
 8006612:	2b16      	cmp	r3, #22
 8006614:	d101      	bne.n	800661a <__sflush_r+0xb2>
 8006616:	602f      	str	r7, [r5, #0]
 8006618:	e7b2      	b.n	8006580 <__sflush_r+0x18>
 800661a:	89a3      	ldrh	r3, [r4, #12]
 800661c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006620:	81a3      	strh	r3, [r4, #12]
 8006622:	e7ae      	b.n	8006582 <__sflush_r+0x1a>
 8006624:	690f      	ldr	r7, [r1, #16]
 8006626:	2f00      	cmp	r7, #0
 8006628:	d0aa      	beq.n	8006580 <__sflush_r+0x18>
 800662a:	0793      	lsls	r3, r2, #30
 800662c:	bf18      	it	ne
 800662e:	2300      	movne	r3, #0
 8006630:	680e      	ldr	r6, [r1, #0]
 8006632:	bf08      	it	eq
 8006634:	694b      	ldreq	r3, [r1, #20]
 8006636:	1bf6      	subs	r6, r6, r7
 8006638:	600f      	str	r7, [r1, #0]
 800663a:	608b      	str	r3, [r1, #8]
 800663c:	2e00      	cmp	r6, #0
 800663e:	dd9f      	ble.n	8006580 <__sflush_r+0x18>
 8006640:	4633      	mov	r3, r6
 8006642:	463a      	mov	r2, r7
 8006644:	4628      	mov	r0, r5
 8006646:	6a21      	ldr	r1, [r4, #32]
 8006648:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800664c:	47e0      	blx	ip
 800664e:	2800      	cmp	r0, #0
 8006650:	dc06      	bgt.n	8006660 <__sflush_r+0xf8>
 8006652:	89a3      	ldrh	r3, [r4, #12]
 8006654:	f04f 30ff 	mov.w	r0, #4294967295
 8006658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800665c:	81a3      	strh	r3, [r4, #12]
 800665e:	e790      	b.n	8006582 <__sflush_r+0x1a>
 8006660:	4407      	add	r7, r0
 8006662:	1a36      	subs	r6, r6, r0
 8006664:	e7ea      	b.n	800663c <__sflush_r+0xd4>
 8006666:	bf00      	nop
 8006668:	20400001 	.word	0x20400001

0800666c <_fflush_r>:
 800666c:	b538      	push	{r3, r4, r5, lr}
 800666e:	690b      	ldr	r3, [r1, #16]
 8006670:	4605      	mov	r5, r0
 8006672:	460c      	mov	r4, r1
 8006674:	b913      	cbnz	r3, 800667c <_fflush_r+0x10>
 8006676:	2500      	movs	r5, #0
 8006678:	4628      	mov	r0, r5
 800667a:	bd38      	pop	{r3, r4, r5, pc}
 800667c:	b118      	cbz	r0, 8006686 <_fflush_r+0x1a>
 800667e:	6983      	ldr	r3, [r0, #24]
 8006680:	b90b      	cbnz	r3, 8006686 <_fflush_r+0x1a>
 8006682:	f000 f887 	bl	8006794 <__sinit>
 8006686:	4b14      	ldr	r3, [pc, #80]	; (80066d8 <_fflush_r+0x6c>)
 8006688:	429c      	cmp	r4, r3
 800668a:	d11b      	bne.n	80066c4 <_fflush_r+0x58>
 800668c:	686c      	ldr	r4, [r5, #4]
 800668e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0ef      	beq.n	8006676 <_fflush_r+0xa>
 8006696:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006698:	07d0      	lsls	r0, r2, #31
 800669a:	d404      	bmi.n	80066a6 <_fflush_r+0x3a>
 800669c:	0599      	lsls	r1, r3, #22
 800669e:	d402      	bmi.n	80066a6 <_fflush_r+0x3a>
 80066a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066a2:	f000 f915 	bl	80068d0 <__retarget_lock_acquire_recursive>
 80066a6:	4628      	mov	r0, r5
 80066a8:	4621      	mov	r1, r4
 80066aa:	f7ff ff5d 	bl	8006568 <__sflush_r>
 80066ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066b0:	4605      	mov	r5, r0
 80066b2:	07da      	lsls	r2, r3, #31
 80066b4:	d4e0      	bmi.n	8006678 <_fflush_r+0xc>
 80066b6:	89a3      	ldrh	r3, [r4, #12]
 80066b8:	059b      	lsls	r3, r3, #22
 80066ba:	d4dd      	bmi.n	8006678 <_fflush_r+0xc>
 80066bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066be:	f000 f908 	bl	80068d2 <__retarget_lock_release_recursive>
 80066c2:	e7d9      	b.n	8006678 <_fflush_r+0xc>
 80066c4:	4b05      	ldr	r3, [pc, #20]	; (80066dc <_fflush_r+0x70>)
 80066c6:	429c      	cmp	r4, r3
 80066c8:	d101      	bne.n	80066ce <_fflush_r+0x62>
 80066ca:	68ac      	ldr	r4, [r5, #8]
 80066cc:	e7df      	b.n	800668e <_fflush_r+0x22>
 80066ce:	4b04      	ldr	r3, [pc, #16]	; (80066e0 <_fflush_r+0x74>)
 80066d0:	429c      	cmp	r4, r3
 80066d2:	bf08      	it	eq
 80066d4:	68ec      	ldreq	r4, [r5, #12]
 80066d6:	e7da      	b.n	800668e <_fflush_r+0x22>
 80066d8:	08007744 	.word	0x08007744
 80066dc:	08007764 	.word	0x08007764
 80066e0:	08007724 	.word	0x08007724

080066e4 <std>:
 80066e4:	2300      	movs	r3, #0
 80066e6:	b510      	push	{r4, lr}
 80066e8:	4604      	mov	r4, r0
 80066ea:	e9c0 3300 	strd	r3, r3, [r0]
 80066ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066f2:	6083      	str	r3, [r0, #8]
 80066f4:	8181      	strh	r1, [r0, #12]
 80066f6:	6643      	str	r3, [r0, #100]	; 0x64
 80066f8:	81c2      	strh	r2, [r0, #14]
 80066fa:	6183      	str	r3, [r0, #24]
 80066fc:	4619      	mov	r1, r3
 80066fe:	2208      	movs	r2, #8
 8006700:	305c      	adds	r0, #92	; 0x5c
 8006702:	f7fd fb8d 	bl	8003e20 <memset>
 8006706:	4b05      	ldr	r3, [pc, #20]	; (800671c <std+0x38>)
 8006708:	6224      	str	r4, [r4, #32]
 800670a:	6263      	str	r3, [r4, #36]	; 0x24
 800670c:	4b04      	ldr	r3, [pc, #16]	; (8006720 <std+0x3c>)
 800670e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006710:	4b04      	ldr	r3, [pc, #16]	; (8006724 <std+0x40>)
 8006712:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006714:	4b04      	ldr	r3, [pc, #16]	; (8006728 <std+0x44>)
 8006716:	6323      	str	r3, [r4, #48]	; 0x30
 8006718:	bd10      	pop	{r4, pc}
 800671a:	bf00      	nop
 800671c:	08006a39 	.word	0x08006a39
 8006720:	08006a5b 	.word	0x08006a5b
 8006724:	08006a93 	.word	0x08006a93
 8006728:	08006ab7 	.word	0x08006ab7

0800672c <_cleanup_r>:
 800672c:	4901      	ldr	r1, [pc, #4]	; (8006734 <_cleanup_r+0x8>)
 800672e:	f000 b8af 	b.w	8006890 <_fwalk_reent>
 8006732:	bf00      	nop
 8006734:	0800666d 	.word	0x0800666d

08006738 <__sfmoreglue>:
 8006738:	2268      	movs	r2, #104	; 0x68
 800673a:	b570      	push	{r4, r5, r6, lr}
 800673c:	1e4d      	subs	r5, r1, #1
 800673e:	4355      	muls	r5, r2
 8006740:	460e      	mov	r6, r1
 8006742:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006746:	f7ff fa85 	bl	8005c54 <_malloc_r>
 800674a:	4604      	mov	r4, r0
 800674c:	b140      	cbz	r0, 8006760 <__sfmoreglue+0x28>
 800674e:	2100      	movs	r1, #0
 8006750:	e9c0 1600 	strd	r1, r6, [r0]
 8006754:	300c      	adds	r0, #12
 8006756:	60a0      	str	r0, [r4, #8]
 8006758:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800675c:	f7fd fb60 	bl	8003e20 <memset>
 8006760:	4620      	mov	r0, r4
 8006762:	bd70      	pop	{r4, r5, r6, pc}

08006764 <__sfp_lock_acquire>:
 8006764:	4801      	ldr	r0, [pc, #4]	; (800676c <__sfp_lock_acquire+0x8>)
 8006766:	f000 b8b3 	b.w	80068d0 <__retarget_lock_acquire_recursive>
 800676a:	bf00      	nop
 800676c:	200004c1 	.word	0x200004c1

08006770 <__sfp_lock_release>:
 8006770:	4801      	ldr	r0, [pc, #4]	; (8006778 <__sfp_lock_release+0x8>)
 8006772:	f000 b8ae 	b.w	80068d2 <__retarget_lock_release_recursive>
 8006776:	bf00      	nop
 8006778:	200004c1 	.word	0x200004c1

0800677c <__sinit_lock_acquire>:
 800677c:	4801      	ldr	r0, [pc, #4]	; (8006784 <__sinit_lock_acquire+0x8>)
 800677e:	f000 b8a7 	b.w	80068d0 <__retarget_lock_acquire_recursive>
 8006782:	bf00      	nop
 8006784:	200004c2 	.word	0x200004c2

08006788 <__sinit_lock_release>:
 8006788:	4801      	ldr	r0, [pc, #4]	; (8006790 <__sinit_lock_release+0x8>)
 800678a:	f000 b8a2 	b.w	80068d2 <__retarget_lock_release_recursive>
 800678e:	bf00      	nop
 8006790:	200004c2 	.word	0x200004c2

08006794 <__sinit>:
 8006794:	b510      	push	{r4, lr}
 8006796:	4604      	mov	r4, r0
 8006798:	f7ff fff0 	bl	800677c <__sinit_lock_acquire>
 800679c:	69a3      	ldr	r3, [r4, #24]
 800679e:	b11b      	cbz	r3, 80067a8 <__sinit+0x14>
 80067a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067a4:	f7ff bff0 	b.w	8006788 <__sinit_lock_release>
 80067a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80067ac:	6523      	str	r3, [r4, #80]	; 0x50
 80067ae:	4b13      	ldr	r3, [pc, #76]	; (80067fc <__sinit+0x68>)
 80067b0:	4a13      	ldr	r2, [pc, #76]	; (8006800 <__sinit+0x6c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80067b6:	42a3      	cmp	r3, r4
 80067b8:	bf08      	it	eq
 80067ba:	2301      	moveq	r3, #1
 80067bc:	4620      	mov	r0, r4
 80067be:	bf08      	it	eq
 80067c0:	61a3      	streq	r3, [r4, #24]
 80067c2:	f000 f81f 	bl	8006804 <__sfp>
 80067c6:	6060      	str	r0, [r4, #4]
 80067c8:	4620      	mov	r0, r4
 80067ca:	f000 f81b 	bl	8006804 <__sfp>
 80067ce:	60a0      	str	r0, [r4, #8]
 80067d0:	4620      	mov	r0, r4
 80067d2:	f000 f817 	bl	8006804 <__sfp>
 80067d6:	2200      	movs	r2, #0
 80067d8:	2104      	movs	r1, #4
 80067da:	60e0      	str	r0, [r4, #12]
 80067dc:	6860      	ldr	r0, [r4, #4]
 80067de:	f7ff ff81 	bl	80066e4 <std>
 80067e2:	2201      	movs	r2, #1
 80067e4:	2109      	movs	r1, #9
 80067e6:	68a0      	ldr	r0, [r4, #8]
 80067e8:	f7ff ff7c 	bl	80066e4 <std>
 80067ec:	2202      	movs	r2, #2
 80067ee:	2112      	movs	r1, #18
 80067f0:	68e0      	ldr	r0, [r4, #12]
 80067f2:	f7ff ff77 	bl	80066e4 <std>
 80067f6:	2301      	movs	r3, #1
 80067f8:	61a3      	str	r3, [r4, #24]
 80067fa:	e7d1      	b.n	80067a0 <__sinit+0xc>
 80067fc:	080073ac 	.word	0x080073ac
 8006800:	0800672d 	.word	0x0800672d

08006804 <__sfp>:
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006806:	4607      	mov	r7, r0
 8006808:	f7ff ffac 	bl	8006764 <__sfp_lock_acquire>
 800680c:	4b1e      	ldr	r3, [pc, #120]	; (8006888 <__sfp+0x84>)
 800680e:	681e      	ldr	r6, [r3, #0]
 8006810:	69b3      	ldr	r3, [r6, #24]
 8006812:	b913      	cbnz	r3, 800681a <__sfp+0x16>
 8006814:	4630      	mov	r0, r6
 8006816:	f7ff ffbd 	bl	8006794 <__sinit>
 800681a:	3648      	adds	r6, #72	; 0x48
 800681c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006820:	3b01      	subs	r3, #1
 8006822:	d503      	bpl.n	800682c <__sfp+0x28>
 8006824:	6833      	ldr	r3, [r6, #0]
 8006826:	b30b      	cbz	r3, 800686c <__sfp+0x68>
 8006828:	6836      	ldr	r6, [r6, #0]
 800682a:	e7f7      	b.n	800681c <__sfp+0x18>
 800682c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006830:	b9d5      	cbnz	r5, 8006868 <__sfp+0x64>
 8006832:	4b16      	ldr	r3, [pc, #88]	; (800688c <__sfp+0x88>)
 8006834:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006838:	60e3      	str	r3, [r4, #12]
 800683a:	6665      	str	r5, [r4, #100]	; 0x64
 800683c:	f000 f847 	bl	80068ce <__retarget_lock_init_recursive>
 8006840:	f7ff ff96 	bl	8006770 <__sfp_lock_release>
 8006844:	2208      	movs	r2, #8
 8006846:	4629      	mov	r1, r5
 8006848:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800684c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006850:	6025      	str	r5, [r4, #0]
 8006852:	61a5      	str	r5, [r4, #24]
 8006854:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006858:	f7fd fae2 	bl	8003e20 <memset>
 800685c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006860:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006864:	4620      	mov	r0, r4
 8006866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006868:	3468      	adds	r4, #104	; 0x68
 800686a:	e7d9      	b.n	8006820 <__sfp+0x1c>
 800686c:	2104      	movs	r1, #4
 800686e:	4638      	mov	r0, r7
 8006870:	f7ff ff62 	bl	8006738 <__sfmoreglue>
 8006874:	4604      	mov	r4, r0
 8006876:	6030      	str	r0, [r6, #0]
 8006878:	2800      	cmp	r0, #0
 800687a:	d1d5      	bne.n	8006828 <__sfp+0x24>
 800687c:	f7ff ff78 	bl	8006770 <__sfp_lock_release>
 8006880:	230c      	movs	r3, #12
 8006882:	603b      	str	r3, [r7, #0]
 8006884:	e7ee      	b.n	8006864 <__sfp+0x60>
 8006886:	bf00      	nop
 8006888:	080073ac 	.word	0x080073ac
 800688c:	ffff0001 	.word	0xffff0001

08006890 <_fwalk_reent>:
 8006890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006894:	4606      	mov	r6, r0
 8006896:	4688      	mov	r8, r1
 8006898:	2700      	movs	r7, #0
 800689a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800689e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068a2:	f1b9 0901 	subs.w	r9, r9, #1
 80068a6:	d505      	bpl.n	80068b4 <_fwalk_reent+0x24>
 80068a8:	6824      	ldr	r4, [r4, #0]
 80068aa:	2c00      	cmp	r4, #0
 80068ac:	d1f7      	bne.n	800689e <_fwalk_reent+0xe>
 80068ae:	4638      	mov	r0, r7
 80068b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068b4:	89ab      	ldrh	r3, [r5, #12]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d907      	bls.n	80068ca <_fwalk_reent+0x3a>
 80068ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068be:	3301      	adds	r3, #1
 80068c0:	d003      	beq.n	80068ca <_fwalk_reent+0x3a>
 80068c2:	4629      	mov	r1, r5
 80068c4:	4630      	mov	r0, r6
 80068c6:	47c0      	blx	r8
 80068c8:	4307      	orrs	r7, r0
 80068ca:	3568      	adds	r5, #104	; 0x68
 80068cc:	e7e9      	b.n	80068a2 <_fwalk_reent+0x12>

080068ce <__retarget_lock_init_recursive>:
 80068ce:	4770      	bx	lr

080068d0 <__retarget_lock_acquire_recursive>:
 80068d0:	4770      	bx	lr

080068d2 <__retarget_lock_release_recursive>:
 80068d2:	4770      	bx	lr

080068d4 <__swhatbuf_r>:
 80068d4:	b570      	push	{r4, r5, r6, lr}
 80068d6:	460e      	mov	r6, r1
 80068d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068dc:	4614      	mov	r4, r2
 80068de:	2900      	cmp	r1, #0
 80068e0:	461d      	mov	r5, r3
 80068e2:	b096      	sub	sp, #88	; 0x58
 80068e4:	da08      	bge.n	80068f8 <__swhatbuf_r+0x24>
 80068e6:	2200      	movs	r2, #0
 80068e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80068ec:	602a      	str	r2, [r5, #0]
 80068ee:	061a      	lsls	r2, r3, #24
 80068f0:	d410      	bmi.n	8006914 <__swhatbuf_r+0x40>
 80068f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068f6:	e00e      	b.n	8006916 <__swhatbuf_r+0x42>
 80068f8:	466a      	mov	r2, sp
 80068fa:	f000 f903 	bl	8006b04 <_fstat_r>
 80068fe:	2800      	cmp	r0, #0
 8006900:	dbf1      	blt.n	80068e6 <__swhatbuf_r+0x12>
 8006902:	9a01      	ldr	r2, [sp, #4]
 8006904:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006908:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800690c:	425a      	negs	r2, r3
 800690e:	415a      	adcs	r2, r3
 8006910:	602a      	str	r2, [r5, #0]
 8006912:	e7ee      	b.n	80068f2 <__swhatbuf_r+0x1e>
 8006914:	2340      	movs	r3, #64	; 0x40
 8006916:	2000      	movs	r0, #0
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	b016      	add	sp, #88	; 0x58
 800691c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006920 <__smakebuf_r>:
 8006920:	898b      	ldrh	r3, [r1, #12]
 8006922:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006924:	079d      	lsls	r5, r3, #30
 8006926:	4606      	mov	r6, r0
 8006928:	460c      	mov	r4, r1
 800692a:	d507      	bpl.n	800693c <__smakebuf_r+0x1c>
 800692c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	6123      	str	r3, [r4, #16]
 8006934:	2301      	movs	r3, #1
 8006936:	6163      	str	r3, [r4, #20]
 8006938:	b002      	add	sp, #8
 800693a:	bd70      	pop	{r4, r5, r6, pc}
 800693c:	466a      	mov	r2, sp
 800693e:	ab01      	add	r3, sp, #4
 8006940:	f7ff ffc8 	bl	80068d4 <__swhatbuf_r>
 8006944:	9900      	ldr	r1, [sp, #0]
 8006946:	4605      	mov	r5, r0
 8006948:	4630      	mov	r0, r6
 800694a:	f7ff f983 	bl	8005c54 <_malloc_r>
 800694e:	b948      	cbnz	r0, 8006964 <__smakebuf_r+0x44>
 8006950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006954:	059a      	lsls	r2, r3, #22
 8006956:	d4ef      	bmi.n	8006938 <__smakebuf_r+0x18>
 8006958:	f023 0303 	bic.w	r3, r3, #3
 800695c:	f043 0302 	orr.w	r3, r3, #2
 8006960:	81a3      	strh	r3, [r4, #12]
 8006962:	e7e3      	b.n	800692c <__smakebuf_r+0xc>
 8006964:	4b0d      	ldr	r3, [pc, #52]	; (800699c <__smakebuf_r+0x7c>)
 8006966:	62b3      	str	r3, [r6, #40]	; 0x28
 8006968:	89a3      	ldrh	r3, [r4, #12]
 800696a:	6020      	str	r0, [r4, #0]
 800696c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006970:	81a3      	strh	r3, [r4, #12]
 8006972:	9b00      	ldr	r3, [sp, #0]
 8006974:	6120      	str	r0, [r4, #16]
 8006976:	6163      	str	r3, [r4, #20]
 8006978:	9b01      	ldr	r3, [sp, #4]
 800697a:	b15b      	cbz	r3, 8006994 <__smakebuf_r+0x74>
 800697c:	4630      	mov	r0, r6
 800697e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006982:	f000 f8d1 	bl	8006b28 <_isatty_r>
 8006986:	b128      	cbz	r0, 8006994 <__smakebuf_r+0x74>
 8006988:	89a3      	ldrh	r3, [r4, #12]
 800698a:	f023 0303 	bic.w	r3, r3, #3
 800698e:	f043 0301 	orr.w	r3, r3, #1
 8006992:	81a3      	strh	r3, [r4, #12]
 8006994:	89a0      	ldrh	r0, [r4, #12]
 8006996:	4305      	orrs	r5, r0
 8006998:	81a5      	strh	r5, [r4, #12]
 800699a:	e7cd      	b.n	8006938 <__smakebuf_r+0x18>
 800699c:	0800672d 	.word	0x0800672d

080069a0 <_malloc_usable_size_r>:
 80069a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069a4:	1f18      	subs	r0, r3, #4
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	bfbc      	itt	lt
 80069aa:	580b      	ldrlt	r3, [r1, r0]
 80069ac:	18c0      	addlt	r0, r0, r3
 80069ae:	4770      	bx	lr

080069b0 <_raise_r>:
 80069b0:	291f      	cmp	r1, #31
 80069b2:	b538      	push	{r3, r4, r5, lr}
 80069b4:	4604      	mov	r4, r0
 80069b6:	460d      	mov	r5, r1
 80069b8:	d904      	bls.n	80069c4 <_raise_r+0x14>
 80069ba:	2316      	movs	r3, #22
 80069bc:	6003      	str	r3, [r0, #0]
 80069be:	f04f 30ff 	mov.w	r0, #4294967295
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80069c6:	b112      	cbz	r2, 80069ce <_raise_r+0x1e>
 80069c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069cc:	b94b      	cbnz	r3, 80069e2 <_raise_r+0x32>
 80069ce:	4620      	mov	r0, r4
 80069d0:	f000 f830 	bl	8006a34 <_getpid_r>
 80069d4:	462a      	mov	r2, r5
 80069d6:	4601      	mov	r1, r0
 80069d8:	4620      	mov	r0, r4
 80069da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069de:	f000 b817 	b.w	8006a10 <_kill_r>
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d00a      	beq.n	80069fc <_raise_r+0x4c>
 80069e6:	1c59      	adds	r1, r3, #1
 80069e8:	d103      	bne.n	80069f2 <_raise_r+0x42>
 80069ea:	2316      	movs	r3, #22
 80069ec:	6003      	str	r3, [r0, #0]
 80069ee:	2001      	movs	r0, #1
 80069f0:	e7e7      	b.n	80069c2 <_raise_r+0x12>
 80069f2:	2400      	movs	r4, #0
 80069f4:	4628      	mov	r0, r5
 80069f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80069fa:	4798      	blx	r3
 80069fc:	2000      	movs	r0, #0
 80069fe:	e7e0      	b.n	80069c2 <_raise_r+0x12>

08006a00 <raise>:
 8006a00:	4b02      	ldr	r3, [pc, #8]	; (8006a0c <raise+0xc>)
 8006a02:	4601      	mov	r1, r0
 8006a04:	6818      	ldr	r0, [r3, #0]
 8006a06:	f7ff bfd3 	b.w	80069b0 <_raise_r>
 8006a0a:	bf00      	nop
 8006a0c:	20000020 	.word	0x20000020

08006a10 <_kill_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	2300      	movs	r3, #0
 8006a14:	4d06      	ldr	r5, [pc, #24]	; (8006a30 <_kill_r+0x20>)
 8006a16:	4604      	mov	r4, r0
 8006a18:	4608      	mov	r0, r1
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	602b      	str	r3, [r5, #0]
 8006a1e:	f7fb faeb 	bl	8001ff8 <_kill>
 8006a22:	1c43      	adds	r3, r0, #1
 8006a24:	d102      	bne.n	8006a2c <_kill_r+0x1c>
 8006a26:	682b      	ldr	r3, [r5, #0]
 8006a28:	b103      	cbz	r3, 8006a2c <_kill_r+0x1c>
 8006a2a:	6023      	str	r3, [r4, #0]
 8006a2c:	bd38      	pop	{r3, r4, r5, pc}
 8006a2e:	bf00      	nop
 8006a30:	200004bc 	.word	0x200004bc

08006a34 <_getpid_r>:
 8006a34:	f7fb bad9 	b.w	8001fea <_getpid>

08006a38 <__sread>:
 8006a38:	b510      	push	{r4, lr}
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a40:	f000 f894 	bl	8006b6c <_read_r>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	bfab      	itete	ge
 8006a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8006a4c:	181b      	addge	r3, r3, r0
 8006a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a52:	bfac      	ite	ge
 8006a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a56:	81a3      	strhlt	r3, [r4, #12]
 8006a58:	bd10      	pop	{r4, pc}

08006a5a <__swrite>:
 8006a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a5e:	461f      	mov	r7, r3
 8006a60:	898b      	ldrh	r3, [r1, #12]
 8006a62:	4605      	mov	r5, r0
 8006a64:	05db      	lsls	r3, r3, #23
 8006a66:	460c      	mov	r4, r1
 8006a68:	4616      	mov	r6, r2
 8006a6a:	d505      	bpl.n	8006a78 <__swrite+0x1e>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a74:	f000 f868 	bl	8006b48 <_lseek_r>
 8006a78:	89a3      	ldrh	r3, [r4, #12]
 8006a7a:	4632      	mov	r2, r6
 8006a7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a80:	81a3      	strh	r3, [r4, #12]
 8006a82:	4628      	mov	r0, r5
 8006a84:	463b      	mov	r3, r7
 8006a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a8e:	f000 b817 	b.w	8006ac0 <_write_r>

08006a92 <__sseek>:
 8006a92:	b510      	push	{r4, lr}
 8006a94:	460c      	mov	r4, r1
 8006a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a9a:	f000 f855 	bl	8006b48 <_lseek_r>
 8006a9e:	1c43      	adds	r3, r0, #1
 8006aa0:	89a3      	ldrh	r3, [r4, #12]
 8006aa2:	bf15      	itete	ne
 8006aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006aae:	81a3      	strheq	r3, [r4, #12]
 8006ab0:	bf18      	it	ne
 8006ab2:	81a3      	strhne	r3, [r4, #12]
 8006ab4:	bd10      	pop	{r4, pc}

08006ab6 <__sclose>:
 8006ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aba:	f000 b813 	b.w	8006ae4 <_close_r>
	...

08006ac0 <_write_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	4608      	mov	r0, r1
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	2200      	movs	r2, #0
 8006aca:	4d05      	ldr	r5, [pc, #20]	; (8006ae0 <_write_r+0x20>)
 8006acc:	602a      	str	r2, [r5, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f7fb fac9 	bl	8002066 <_write>
 8006ad4:	1c43      	adds	r3, r0, #1
 8006ad6:	d102      	bne.n	8006ade <_write_r+0x1e>
 8006ad8:	682b      	ldr	r3, [r5, #0]
 8006ada:	b103      	cbz	r3, 8006ade <_write_r+0x1e>
 8006adc:	6023      	str	r3, [r4, #0]
 8006ade:	bd38      	pop	{r3, r4, r5, pc}
 8006ae0:	200004bc 	.word	0x200004bc

08006ae4 <_close_r>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	4d05      	ldr	r5, [pc, #20]	; (8006b00 <_close_r+0x1c>)
 8006aea:	4604      	mov	r4, r0
 8006aec:	4608      	mov	r0, r1
 8006aee:	602b      	str	r3, [r5, #0]
 8006af0:	f7fb fad5 	bl	800209e <_close>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d102      	bne.n	8006afe <_close_r+0x1a>
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	b103      	cbz	r3, 8006afe <_close_r+0x1a>
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	200004bc 	.word	0x200004bc

08006b04 <_fstat_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	2300      	movs	r3, #0
 8006b08:	4d06      	ldr	r5, [pc, #24]	; (8006b24 <_fstat_r+0x20>)
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	4611      	mov	r1, r2
 8006b10:	602b      	str	r3, [r5, #0]
 8006b12:	f7fb facf 	bl	80020b4 <_fstat>
 8006b16:	1c43      	adds	r3, r0, #1
 8006b18:	d102      	bne.n	8006b20 <_fstat_r+0x1c>
 8006b1a:	682b      	ldr	r3, [r5, #0]
 8006b1c:	b103      	cbz	r3, 8006b20 <_fstat_r+0x1c>
 8006b1e:	6023      	str	r3, [r4, #0]
 8006b20:	bd38      	pop	{r3, r4, r5, pc}
 8006b22:	bf00      	nop
 8006b24:	200004bc 	.word	0x200004bc

08006b28 <_isatty_r>:
 8006b28:	b538      	push	{r3, r4, r5, lr}
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	4d05      	ldr	r5, [pc, #20]	; (8006b44 <_isatty_r+0x1c>)
 8006b2e:	4604      	mov	r4, r0
 8006b30:	4608      	mov	r0, r1
 8006b32:	602b      	str	r3, [r5, #0]
 8006b34:	f7fb facd 	bl	80020d2 <_isatty>
 8006b38:	1c43      	adds	r3, r0, #1
 8006b3a:	d102      	bne.n	8006b42 <_isatty_r+0x1a>
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	b103      	cbz	r3, 8006b42 <_isatty_r+0x1a>
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	bd38      	pop	{r3, r4, r5, pc}
 8006b44:	200004bc 	.word	0x200004bc

08006b48 <_lseek_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	4608      	mov	r0, r1
 8006b4e:	4611      	mov	r1, r2
 8006b50:	2200      	movs	r2, #0
 8006b52:	4d05      	ldr	r5, [pc, #20]	; (8006b68 <_lseek_r+0x20>)
 8006b54:	602a      	str	r2, [r5, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	f7fb fac5 	bl	80020e6 <_lseek>
 8006b5c:	1c43      	adds	r3, r0, #1
 8006b5e:	d102      	bne.n	8006b66 <_lseek_r+0x1e>
 8006b60:	682b      	ldr	r3, [r5, #0]
 8006b62:	b103      	cbz	r3, 8006b66 <_lseek_r+0x1e>
 8006b64:	6023      	str	r3, [r4, #0]
 8006b66:	bd38      	pop	{r3, r4, r5, pc}
 8006b68:	200004bc 	.word	0x200004bc

08006b6c <_read_r>:
 8006b6c:	b538      	push	{r3, r4, r5, lr}
 8006b6e:	4604      	mov	r4, r0
 8006b70:	4608      	mov	r0, r1
 8006b72:	4611      	mov	r1, r2
 8006b74:	2200      	movs	r2, #0
 8006b76:	4d05      	ldr	r5, [pc, #20]	; (8006b8c <_read_r+0x20>)
 8006b78:	602a      	str	r2, [r5, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	f7fb fa56 	bl	800202c <_read>
 8006b80:	1c43      	adds	r3, r0, #1
 8006b82:	d102      	bne.n	8006b8a <_read_r+0x1e>
 8006b84:	682b      	ldr	r3, [r5, #0]
 8006b86:	b103      	cbz	r3, 8006b8a <_read_r+0x1e>
 8006b88:	6023      	str	r3, [r4, #0]
 8006b8a:	bd38      	pop	{r3, r4, r5, pc}
 8006b8c:	200004bc 	.word	0x200004bc

08006b90 <_init>:
 8006b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b92:	bf00      	nop
 8006b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b96:	bc08      	pop	{r3}
 8006b98:	469e      	mov	lr, r3
 8006b9a:	4770      	bx	lr

08006b9c <_fini>:
 8006b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9e:	bf00      	nop
 8006ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba2:	bc08      	pop	{r3}
 8006ba4:	469e      	mov	lr, r3
 8006ba6:	4770      	bx	lr
