
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007478  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be4  08007588  08007588  00017588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800816c  0800816c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800816c  0800816c  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800816c  0800816c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800816c  0800816c  0001816c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008170  08008170  00018170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08008174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  200001f0  08008364  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  08008364  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fde4  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002717  00000000  00000000  0002fffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00032718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  00033808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198a3  00000000  00000000  00034810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012797  00000000  00000000  0004e0b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f6ba  00000000  00000000  0006084a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eff04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005930  00000000  00000000  000eff54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007570 	.word	0x08007570

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08007570 	.word	0x08007570

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <CalculateChecksum>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
static uint8_t CalculateChecksum(uint8_t *data, uint8_t length)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
  uint8_t checksum = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]

  while (length--)
 8000f54:	e022      	b.n	8000f9c <CalculateChecksum+0x58>
  {
    uint8_t currentByte = *data++;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	1c5a      	adds	r2, r3, #1
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	73bb      	strb	r3, [r7, #14]

    for (uint8_t i = 8; i; i--)
 8000f60:	2308      	movs	r3, #8
 8000f62:	737b      	strb	r3, [r7, #13]
 8000f64:	e017      	b.n	8000f96 <CalculateChecksum+0x52>
    {
      uint8_t temp = (checksum ^ currentByte) & 0x01;
 8000f66:	7bfa      	ldrb	r2, [r7, #15]
 8000f68:	7bbb      	ldrb	r3, [r7, #14]
 8000f6a:	4053      	eors	r3, r2
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	733b      	strb	r3, [r7, #12]
      checksum >>= 1;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	085b      	lsrs	r3, r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]

      if (temp)
 8000f7a:	7b3b      	ldrb	r3, [r7, #12]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d004      	beq.n	8000f8a <CalculateChecksum+0x46>
      {
        checksum ^= 0x8C;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8000f86:	43db      	mvns	r3, r3
 8000f88:	73fb      	strb	r3, [r7, #15]
      }

      currentByte >>= 1;
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	085b      	lsrs	r3, r3, #1
 8000f8e:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 8; i; i--)
 8000f90:	7b7b      	ldrb	r3, [r7, #13]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	737b      	strb	r3, [r7, #13]
 8000f96:	7b7b      	ldrb	r3, [r7, #13]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1e4      	bne.n	8000f66 <CalculateChecksum+0x22>
  while (length--)
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	1e5a      	subs	r2, r3, #1
 8000fa0:	70fa      	strb	r2, [r7, #3]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1d7      	bne.n	8000f56 <CalculateChecksum+0x12>
    }
  }

  return checksum;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr

08000fb2 <ExecuteCommand>:



/*----------------------------------------------------------------------------*/
static DS18B20_Status ExecuteCommand(DS18B20 *sensor, DS18B20_Command command, uint8_t *data)
{
 8000fb2:	b590      	push	{r4, r7, lr}
 8000fb4:	b087      	sub	sp, #28
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
  if (sensor->isConnected == 0)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	785b      	ldrb	r3, [r3, #1]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <ExecuteCommand+0x18>
  {
    return DS18B20_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e044      	b.n	8001054 <ExecuteCommand+0xa2>
  }

  OneWire_ProcessByte(sensor->uart, command.code);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	7a3a      	ldrb	r2, [r7, #8]
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fcfa 	bl	80019cc <OneWire_ProcessByte>

  if (command.rxBytesNum != 0)
 8000fd8:	7a7b      	ldrb	r3, [r7, #9]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d026      	beq.n	800102c <ExecuteCommand+0x7a>
  {
    for (uint8_t i = 0; i < command.rxBytesNum; i++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	75fb      	strb	r3, [r7, #23]
 8000fe2:	e00c      	b.n	8000ffe <ExecuteCommand+0x4c>
    {
      data[i] = OneWire_ProcessByte(sensor->uart, 0xFF);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6858      	ldr	r0, [r3, #4]
 8000fe8:	7dfb      	ldrb	r3, [r7, #23]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	18d4      	adds	r4, r2, r3
 8000fee:	21ff      	movs	r1, #255	; 0xff
 8000ff0:	f000 fcec 	bl	80019cc <OneWire_ProcessByte>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < command.rxBytesNum; i++)
 8000ff8:	7dfb      	ldrb	r3, [r7, #23]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	75fb      	strb	r3, [r7, #23]
 8000ffe:	7a7b      	ldrb	r3, [r7, #9]
 8001000:	7dfa      	ldrb	r2, [r7, #23]
 8001002:	429a      	cmp	r2, r3
 8001004:	d3ee      	bcc.n	8000fe4 <ExecuteCommand+0x32>
    }

    uint8_t checkSum = CalculateChecksum(data, command.rxBytesNum - 1);
 8001006:	7a7b      	ldrb	r3, [r7, #9]
 8001008:	3b01      	subs	r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4619      	mov	r1, r3
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ff98 	bl	8000f44 <CalculateChecksum>
 8001014:	4603      	mov	r3, r0
 8001016:	757b      	strb	r3, [r7, #21]
    if (checkSum != data[command.rxBytesNum - 1])
 8001018:	7a7b      	ldrb	r3, [r7, #9]
 800101a:	3b01      	subs	r3, #1
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	4413      	add	r3, r2
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	7d7a      	ldrb	r2, [r7, #21]
 8001024:	429a      	cmp	r2, r3
 8001026:	d014      	beq.n	8001052 <ExecuteCommand+0xa0>
    {
      return DS18B20_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e013      	b.n	8001054 <ExecuteCommand+0xa2>
    }
  }
  else
  {
    for (uint8_t i = 0; i < command.txBytesNum; i++)
 800102c:	2300      	movs	r3, #0
 800102e:	75bb      	strb	r3, [r7, #22]
 8001030:	e00b      	b.n	800104a <ExecuteCommand+0x98>
    {
      OneWire_ProcessByte(sensor->uart, data[i]);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6858      	ldr	r0, [r3, #4]
 8001036:	7dbb      	ldrb	r3, [r7, #22]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	f000 fcc4 	bl	80019cc <OneWire_ProcessByte>
    for (uint8_t i = 0; i < command.txBytesNum; i++)
 8001044:	7dbb      	ldrb	r3, [r7, #22]
 8001046:	3301      	adds	r3, #1
 8001048:	75bb      	strb	r3, [r7, #22]
 800104a:	7abb      	ldrb	r3, [r7, #10]
 800104c:	7dba      	ldrb	r2, [r7, #22]
 800104e:	429a      	cmp	r2, r3
 8001050:	d3ef      	bcc.n	8001032 <ExecuteCommand+0x80>
    }
  }

  return DS18B20_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	371c      	adds	r7, #28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd90      	pop	{r4, r7, pc}

0800105c <WaitForConversionFinished>:



/*----------------------------------------------------------------------------*/
static void WaitForConversionFinished(DS18B20 *sensor)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint8_t data = OneWire_ProcessBit(sensor->uart, 1);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2101      	movs	r1, #1
 800106a:	4618      	mov	r0, r3
 800106c:	f000 fc8c 	bl	8001988 <OneWire_ProcessBit>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]
  while(data != 0xFF)
 8001074:	e007      	b.n	8001086 <WaitForConversionFinished+0x2a>
  {
    data = OneWire_ProcessBit(sensor->uart, 1);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2101      	movs	r1, #1
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fc83 	bl	8001988 <OneWire_ProcessBit>
 8001082:	4603      	mov	r3, r0
 8001084:	73fb      	strb	r3, [r7, #15]
  while(data != 0xFF)
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	2bff      	cmp	r3, #255	; 0xff
 800108a:	d1f4      	bne.n	8001076 <WaitForConversionFinished+0x1a>
  }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <DS18B20_ConvertT>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ConvertT(DS18B20 *sensor, DS18B20_WaitCondition waitCondition)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
  DS18B20_Status result;
  uint8_t rxDummyData;

  result = ExecuteCommand(sensor, convertT, &rxDummyData);
 80010a4:	f107 030a 	add.w	r3, r7, #10
 80010a8:	491c      	ldr	r1, [pc, #112]	; (800111c <DS18B20_ConvertT+0x84>)
 80010aa:	461a      	mov	r2, r3
 80010ac:	6809      	ldr	r1, [r1, #0]
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff7f 	bl	8000fb2 <ExecuteCommand>
 80010b4:	4603      	mov	r3, r0
 80010b6:	72fb      	strb	r3, [r7, #11]

  if (waitCondition == DS18B20_DATA)
 80010b8:	78fb      	ldrb	r3, [r7, #3]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d102      	bne.n	80010c4 <DS18B20_ConvertT+0x2c>
  {
    WaitForConversionFinished(sensor);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffcc 	bl	800105c <WaitForConversionFinished>
  }

  if (waitCondition == DS18B20_DELAY)
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d122      	bne.n	8001110 <DS18B20_ConvertT+0x78>
  {
    uint32_t delayValueMs = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]

    switch (sensor->configRegister)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7c1b      	ldrb	r3, [r3, #16]
 80010d2:	2b7f      	cmp	r3, #127	; 0x7f
 80010d4:	d014      	beq.n	8001100 <DS18B20_ConvertT+0x68>
 80010d6:	2b7f      	cmp	r3, #127	; 0x7f
 80010d8:	dc16      	bgt.n	8001108 <DS18B20_ConvertT+0x70>
 80010da:	2b5f      	cmp	r3, #95	; 0x5f
 80010dc:	d00c      	beq.n	80010f8 <DS18B20_ConvertT+0x60>
 80010de:	2b5f      	cmp	r3, #95	; 0x5f
 80010e0:	dc12      	bgt.n	8001108 <DS18B20_ConvertT+0x70>
 80010e2:	2b1f      	cmp	r3, #31
 80010e4:	d002      	beq.n	80010ec <DS18B20_ConvertT+0x54>
 80010e6:	2b3f      	cmp	r3, #63	; 0x3f
 80010e8:	d003      	beq.n	80010f2 <DS18B20_ConvertT+0x5a>
      case DS18B20_12_BITS_CONFIG:
        delayValueMs = DS18B20_12_BITS_DELAY_MS;
        break;

      default:
        break;
 80010ea:	e00d      	b.n	8001108 <DS18B20_ConvertT+0x70>
        delayValueMs = DS18B20_9_BITS_DELAY_MS;
 80010ec:	235e      	movs	r3, #94	; 0x5e
 80010ee:	60fb      	str	r3, [r7, #12]
        break;
 80010f0:	e00b      	b.n	800110a <DS18B20_ConvertT+0x72>
        delayValueMs = DS18B20_10_BITS_DELAY_MS;
 80010f2:	23bc      	movs	r3, #188	; 0xbc
 80010f4:	60fb      	str	r3, [r7, #12]
        break;
 80010f6:	e008      	b.n	800110a <DS18B20_ConvertT+0x72>
        delayValueMs = DS18B20_11_BITS_DELAY_MS;
 80010f8:	f240 1377 	movw	r3, #375	; 0x177
 80010fc:	60fb      	str	r3, [r7, #12]
        break;
 80010fe:	e004      	b.n	800110a <DS18B20_ConvertT+0x72>
        delayValueMs = DS18B20_12_BITS_DELAY_MS;
 8001100:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001104:	60fb      	str	r3, [r7, #12]
        break;
 8001106:	e000      	b.n	800110a <DS18B20_ConvertT+0x72>
        break;
 8001108:	bf00      	nop
    }
    HAL_Delay(delayValueMs);
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f001 f950 	bl	80023b0 <HAL_Delay>
  }

  return result;
 8001110:	7afb      	ldrb	r3, [r7, #11]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008

08001120 <DS18B20_ReadScratchpad>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ReadScratchpad(DS18B20 *sensor)
{
 8001120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001124:	b087      	sub	sp, #28
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	466b      	mov	r3, sp
 800112c:	461e      	mov	r6, r3
  DS18B20_Status result;
  uint8_t rxData[readScratchpad.rxBytesNum];
 800112e:	4b50      	ldr	r3, [pc, #320]	; (8001270 <DS18B20_ReadScratchpad+0x150>)
 8001130:	7859      	ldrb	r1, [r3, #1]
 8001132:	460b      	mov	r3, r1
 8001134:	3b01      	subs	r3, #1
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	b2cb      	uxtb	r3, r1
 800113a:	2200      	movs	r2, #0
 800113c:	4698      	mov	r8, r3
 800113e:	4691      	mov	r9, r2
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800114c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001150:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001154:	b2cb      	uxtb	r3, r1
 8001156:	2200      	movs	r2, #0
 8001158:	461c      	mov	r4, r3
 800115a:	4615      	mov	r5, r2
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	00eb      	lsls	r3, r5, #3
 8001166:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800116a:	00e2      	lsls	r2, r4, #3
 800116c:	460b      	mov	r3, r1
 800116e:	3307      	adds	r3, #7
 8001170:	08db      	lsrs	r3, r3, #3
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	ebad 0d03 	sub.w	sp, sp, r3
 8001178:	466b      	mov	r3, sp
 800117a:	3300      	adds	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  result = ExecuteCommand(sensor, readScratchpad, rxData);
 800117e:	4b3c      	ldr	r3, [pc, #240]	; (8001270 <DS18B20_ReadScratchpad+0x150>)
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	6819      	ldr	r1, [r3, #0]
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff14 	bl	8000fb2 <ExecuteCommand>
 800118a:	4603      	mov	r3, r0
 800118c:	72fb      	strb	r3, [r7, #11]

  if (result != DS18B20_OK)
 800118e:	7afb      	ldrb	r3, [r7, #11]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <DS18B20_ReadScratchpad+0x78>
  {
    return result;
 8001194:	7afb      	ldrb	r3, [r7, #11]
 8001196:	e065      	b.n	8001264 <DS18B20_ReadScratchpad+0x144>
  }

  sensor->temperatureLimitHigh = rxData[DS18B20_SCRATCHPAD_T_LIMIT_H_BYTE_IDX];
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	789a      	ldrb	r2, [r3, #2]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	73da      	strb	r2, [r3, #15]
  sensor->temperatureLimitLow = rxData[DS18B20_SCRATCHPAD_T_LIMIT_L_BYTE_IDX];
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	78da      	ldrb	r2, [r3, #3]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	739a      	strb	r2, [r3, #14]
  sensor->configRegister = rxData[DS18B20_SCRATCHPAD_CONFIG_BYTE_IDX];
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	791a      	ldrb	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	741a      	strb	r2, [r3, #16]

  uint16_t tRegValue = (rxData[DS18B20_SCRATCHPAD_T_MSB_BYTE_IDX] << 8) | rxData[DS18B20_SCRATCHPAD_T_LSB_BYTE_IDX];
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	785b      	ldrb	r3, [r3, #1]
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b21b      	sxth	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	82fb      	strh	r3, [r7, #22]
  uint16_t sign = tRegValue & DS18B20_SIGN_MASK;
 80011c4:	8afb      	ldrh	r3, [r7, #22]
 80011c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80011ca:	f023 0307 	bic.w	r3, r3, #7
 80011ce:	813b      	strh	r3, [r7, #8]

  if (sign != 0)
 80011d0:	893b      	ldrh	r3, [r7, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <DS18B20_ReadScratchpad+0xbc>
  {
    tRegValue = (0xFFFF - tRegValue + 1);
 80011d6:	8afb      	ldrh	r3, [r7, #22]
 80011d8:	425b      	negs	r3, r3
 80011da:	82fb      	strh	r3, [r7, #22]
  }

  switch (sensor->configRegister)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7c1b      	ldrb	r3, [r3, #16]
 80011e0:	2b7f      	cmp	r3, #127	; 0x7f
 80011e2:	d01d      	beq.n	8001220 <DS18B20_ReadScratchpad+0x100>
 80011e4:	2b7f      	cmp	r3, #127	; 0x7f
 80011e6:	dc20      	bgt.n	800122a <DS18B20_ReadScratchpad+0x10a>
 80011e8:	2b5f      	cmp	r3, #95	; 0x5f
 80011ea:	d012      	beq.n	8001212 <DS18B20_ReadScratchpad+0xf2>
 80011ec:	2b5f      	cmp	r3, #95	; 0x5f
 80011ee:	dc1c      	bgt.n	800122a <DS18B20_ReadScratchpad+0x10a>
 80011f0:	2b1f      	cmp	r3, #31
 80011f2:	d002      	beq.n	80011fa <DS18B20_ReadScratchpad+0xda>
 80011f4:	2b3f      	cmp	r3, #63	; 0x3f
 80011f6:	d005      	beq.n	8001204 <DS18B20_ReadScratchpad+0xe4>
 80011f8:	e017      	b.n	800122a <DS18B20_ReadScratchpad+0x10a>
  {
    case DS18B20_9_BITS_CONFIG:
      tRegValue &= DS18B20_9_BITS_DATA_MASK;
 80011fa:	8afb      	ldrh	r3, [r7, #22]
 80011fc:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8001200:	82fb      	strh	r3, [r7, #22]
      break;
 8001202:	e017      	b.n	8001234 <DS18B20_ReadScratchpad+0x114>

    case DS18B20_10_BITS_CONFIG:
      tRegValue &= DS18B20_10_BITS_DATA_MASK;
 8001204:	8afb      	ldrh	r3, [r7, #22]
 8001206:	f023 0303 	bic.w	r3, r3, #3
 800120a:	055b      	lsls	r3, r3, #21
 800120c:	0d5b      	lsrs	r3, r3, #21
 800120e:	82fb      	strh	r3, [r7, #22]
      break;
 8001210:	e010      	b.n	8001234 <DS18B20_ReadScratchpad+0x114>

    case DS18B20_11_BITS_CONFIG:
      tRegValue &= DS18B20_11_BITS_DATA_MASK;
 8001212:	8afb      	ldrh	r3, [r7, #22]
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	055b      	lsls	r3, r3, #21
 800121a:	0d5b      	lsrs	r3, r3, #21
 800121c:	82fb      	strh	r3, [r7, #22]
      break;
 800121e:	e009      	b.n	8001234 <DS18B20_ReadScratchpad+0x114>

    case DS18B20_12_BITS_CONFIG:
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
 8001220:	8afb      	ldrh	r3, [r7, #22]
 8001222:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001226:	82fb      	strh	r3, [r7, #22]
      break;
 8001228:	e004      	b.n	8001234 <DS18B20_ReadScratchpad+0x114>

    default:
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
 800122a:	8afb      	ldrh	r3, [r7, #22]
 800122c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001230:	82fb      	strh	r3, [r7, #22]
      break;
 8001232:	bf00      	nop
  }

  sensor->temperature = (float)tRegValue * DS18B20_T_STEP;
 8001234:	8afb      	ldrh	r3, [r7, #22]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fcdc 	bl	8000bf4 <__aeabi_ui2f>
 800123c:	4603      	mov	r3, r0
 800123e:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fd2e 	bl	8000ca4 <__aeabi_fmul>
 8001248:	4603      	mov	r3, r0
 800124a:	461a      	mov	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	615a      	str	r2, [r3, #20]

  if (sign != 0)
 8001250:	893b      	ldrh	r3, [r7, #8]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d005      	beq.n	8001262 <DS18B20_ReadScratchpad+0x142>
  {
    sensor->temperature *= (-1);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	615a      	str	r2, [r3, #20]
  }

  return DS18B20_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	46b5      	mov	sp, r6
}
 8001266:	4618      	mov	r0, r3
 8001268:	371c      	adds	r7, #28
 800126a:	46bd      	mov	sp, r7
 800126c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001270:	20000004 	.word	0x20000004

08001274 <DS18B20_InitializationCommand>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_InitializationCommand(DS18B20 *sensor)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if (sensor->isInitialized == 0)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <DS18B20_InitializationCommand+0x14>
  {
    return DS18B20_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e012      	b.n	80012ae <DS18B20_InitializationCommand+0x3a>
  }

  ONEWIRE_Status status = OneWire_Reset(sensor->uart);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	4618      	mov	r0, r3
 800128e:	f000 fbd3 	bl	8001a38 <OneWire_Reset>
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]

  if (status == ONEWIRE_OK)
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d104      	bne.n	80012a6 <DS18B20_InitializationCommand+0x32>
  {
    sensor->isConnected = 1;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	705a      	strb	r2, [r3, #1]
    return DS18B20_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e003      	b.n	80012ae <DS18B20_InitializationCommand+0x3a>
  }
  else
  {
    sensor->isConnected = 0;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	705a      	strb	r2, [r3, #1]
    return DS18B20_ERROR;
 80012ac:	2301      	movs	r3, #1
  }
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <DS18B20_ReadRom>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ReadRom(DS18B20 *sensor)
{
 80012b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012bc:	b087      	sub	sp, #28
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	466b      	mov	r3, sp
 80012c4:	461e      	mov	r6, r3
  DS18B20_Status result;
  uint8_t rxData[readRom.rxBytesNum];
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <DS18B20_ReadRom+0xac>)
 80012c8:	7859      	ldrb	r1, [r3, #1]
 80012ca:	460b      	mov	r3, r1
 80012cc:	3b01      	subs	r3, #1
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	b2cb      	uxtb	r3, r1
 80012d2:	2200      	movs	r2, #0
 80012d4:	4698      	mov	r8, r3
 80012d6:	4691      	mov	r9, r2
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012ec:	b2cb      	uxtb	r3, r1
 80012ee:	2200      	movs	r2, #0
 80012f0:	461c      	mov	r4, r3
 80012f2:	4615      	mov	r5, r2
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	00eb      	lsls	r3, r5, #3
 80012fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001302:	00e2      	lsls	r2, r4, #3
 8001304:	460b      	mov	r3, r1
 8001306:	3307      	adds	r3, #7
 8001308:	08db      	lsrs	r3, r3, #3
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	ebad 0d03 	sub.w	sp, sp, r3
 8001310:	466b      	mov	r3, sp
 8001312:	3300      	adds	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
  result = ExecuteCommand(sensor, readRom, rxData);
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <DS18B20_ReadRom+0xac>)
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	6819      	ldr	r1, [r3, #0]
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff fe48 	bl	8000fb2 <ExecuteCommand>
 8001322:	4603      	mov	r3, r0
 8001324:	72fb      	strb	r3, [r7, #11]

  if (result != DS18B20_OK)
 8001326:	7afb      	ldrb	r3, [r7, #11]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <DS18B20_ReadRom+0x78>
  {
    return result;
 800132c:	7afb      	ldrb	r3, [r7, #11]
 800132e:	e012      	b.n	8001356 <DS18B20_ReadRom+0x9e>
  }

  for (uint8_t i = 0; i < DS18B20_SERIAL_NUMBER_LEN_BYTES; i++)
 8001330:	2300      	movs	r3, #0
 8001332:	75fb      	strb	r3, [r7, #23]
 8001334:	e00b      	b.n	800134e <DS18B20_ReadRom+0x96>
  {
    sensor->serialNumber[i] = rxData[DS18B20_SERIAL_NUMBER_OFFSET_BYTES + i];
 8001336:	7dfb      	ldrb	r3, [r7, #23]
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	7dfb      	ldrb	r3, [r7, #23]
 800133c:	68f9      	ldr	r1, [r7, #12]
 800133e:	5c89      	ldrb	r1, [r1, r2]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	460a      	mov	r2, r1
 8001346:	721a      	strb	r2, [r3, #8]
  for (uint8_t i = 0; i < DS18B20_SERIAL_NUMBER_LEN_BYTES; i++)
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	3301      	adds	r3, #1
 800134c:	75fb      	strb	r3, [r7, #23]
 800134e:	7dfb      	ldrb	r3, [r7, #23]
 8001350:	2b05      	cmp	r3, #5
 8001352:	d9f0      	bls.n	8001336 <DS18B20_ReadRom+0x7e>
  }

  return DS18B20_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	46b5      	mov	sp, r6
}
 8001358:	4618      	mov	r0, r3
 800135a:	371c      	adds	r7, #28
 800135c:	46bd      	mov	sp, r7
 800135e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001362:	bf00      	nop
 8001364:	20000000 	.word	0x20000000

08001368 <DS18B20_Init>:



/*----------------------------------------------------------------------------*/
void DS18B20_Init(DS18B20 *sensor, UART_HandleTypeDef *huart)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  sensor->isConnected = 0;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	705a      	strb	r2, [r3, #1]
  sensor->uart = huart;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	605a      	str	r2, [r3, #4]
  sensor->isInitialized = 1;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
	...

08001390 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
		HAL_ResumeTick();
 8001398:	f001 f83c 	bl	8002414 <HAL_ResumeTick>
        if(htim->Instance == TIM2) //check if the interrupt comes from TIM2
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013a4:	f040 8089 	bne.w	80014ba <HAL_TIM_PeriodElapsedCallback+0x12a>
        {
        	ssd1306_SetCursor(0, 20);
 80013a8:	2114      	movs	r1, #20
 80013aa:	2000      	movs	r0, #0
 80013ac:	f000 fd62 	bl	8001e74 <ssd1306_SetCursor>

        	state = DS18B20_InitializationCommand(&sensor);
 80013b0:	4843      	ldr	r0, [pc, #268]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013b2:	f7ff ff5f 	bl	8001274 <DS18B20_InitializationCommand>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b42      	ldr	r3, [pc, #264]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80013bc:	701a      	strb	r2, [r3, #0]
        	state = DS18B20_ReadRom(&sensor);
 80013be:	4840      	ldr	r0, [pc, #256]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013c0:	f7ff ff7a 	bl	80012b8 <DS18B20_ReadRom>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80013ca:	701a      	strb	r2, [r3, #0]
        	state = DS18B20_ConvertT(&sensor, DS18B20_DATA);
 80013cc:	2101      	movs	r1, #1
 80013ce:	483c      	ldr	r0, [pc, #240]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013d0:	f7ff fe62 	bl	8001098 <DS18B20_ConvertT>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b3a      	ldr	r3, [pc, #232]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80013da:	701a      	strb	r2, [r3, #0]

        	if (state == DS18B20_ERROR) {
 80013dc:	4b39      	ldr	r3, [pc, #228]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d108      	bne.n	80013f6 <HAL_TIM_PeriodElapsedCallback+0x66>
        		ssd1306_WriteString("ConvertT error", Font_7x10, White);
 80013e4:	4a38      	ldr	r2, [pc, #224]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80013e6:	2301      	movs	r3, #1
 80013e8:	ca06      	ldmia	r2, {r1, r2}
 80013ea:	4838      	ldr	r0, [pc, #224]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80013ec:	f000 fd1c 	bl	8001e28 <ssd1306_WriteString>
        		ssd1306_UpdateScreen();
 80013f0:	f000 fc18 	bl	8001c24 <ssd1306_UpdateScreen>
        		return;
 80013f4:	e061      	b.n	80014ba <HAL_TIM_PeriodElapsedCallback+0x12a>
        	}

        	DS18B20_InitializationCommand(&sensor);
 80013f6:	4832      	ldr	r0, [pc, #200]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013f8:	f7ff ff3c 	bl	8001274 <DS18B20_InitializationCommand>
        	state = DS18B20_ReadRom(&sensor);
 80013fc:	4830      	ldr	r0, [pc, #192]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013fe:	f7ff ff5b 	bl	80012b8 <DS18B20_ReadRom>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001408:	701a      	strb	r2, [r3, #0]
        	ssd1306_SetCursor(0, 10);
 800140a:	210a      	movs	r1, #10
 800140c:	2000      	movs	r0, #0
 800140e:	f000 fd31 	bl	8001e74 <ssd1306_SetCursor>
        	if (state == DS18B20_OK) {
 8001412:	4b2c      	ldr	r3, [pc, #176]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d106      	bne.n	8001428 <HAL_TIM_PeriodElapsedCallback+0x98>
        		ssd1306_WriteString("ReadRom() ok", Font_7x10, White);
 800141a:	4a2b      	ldr	r2, [pc, #172]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800141c:	2301      	movs	r3, #1
 800141e:	ca06      	ldmia	r2, {r1, r2}
 8001420:	482b      	ldr	r0, [pc, #172]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001422:	f000 fd01 	bl	8001e28 <ssd1306_WriteString>
 8001426:	e005      	b.n	8001434 <HAL_TIM_PeriodElapsedCallback+0xa4>
        	}
        	else {
        		ssd1306_WriteString("ReadRom() failed", Font_7x10, White);
 8001428:	4a27      	ldr	r2, [pc, #156]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800142a:	2301      	movs	r3, #1
 800142c:	ca06      	ldmia	r2, {r1, r2}
 800142e:	4829      	ldr	r0, [pc, #164]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001430:	f000 fcfa 	bl	8001e28 <ssd1306_WriteString>
        	}

        	state = DS18B20_ReadScratchpad(&sensor);
 8001434:	4822      	ldr	r0, [pc, #136]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001436:	f7ff fe73 	bl	8001120 <DS18B20_ReadScratchpad>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001440:	701a      	strb	r2, [r3, #0]
        	if (state == DS18B20_ERROR) {
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d108      	bne.n	800145c <HAL_TIM_PeriodElapsedCallback+0xcc>
        		ssd1306_WriteString("ReadS error", Font_7x10, White);
 800144a:	4a1f      	ldr	r2, [pc, #124]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800144c:	2301      	movs	r3, #1
 800144e:	ca06      	ldmia	r2, {r1, r2}
 8001450:	4821      	ldr	r0, [pc, #132]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001452:	f000 fce9 	bl	8001e28 <ssd1306_WriteString>
        		ssd1306_UpdateScreen();
 8001456:	f000 fbe5 	bl	8001c24 <ssd1306_UpdateScreen>
        		return;
 800145a:	e02e      	b.n	80014ba <HAL_TIM_PeriodElapsedCallback+0x12a>
        	}

        	else {
        		char config[3];
        		sprintf(config, "%Xh", sensor.configRegister);
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800145e:	7c1b      	ldrb	r3, [r3, #16]
 8001460:	461a      	mov	r2, r3
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	491d      	ldr	r1, [pc, #116]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001468:	4618      	mov	r0, r3
 800146a:	f003 fe31 	bl	80050d0 <siprintf>
        		ssd1306_SetCursor(106, 0);
 800146e:	2100      	movs	r1, #0
 8001470:	206a      	movs	r0, #106	; 0x6a
 8001472:	f000 fcff 	bl	8001e74 <ssd1306_SetCursor>
        		ssd1306_WriteString(config, Font_7x10, White);
 8001476:	4a14      	ldr	r2, [pc, #80]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001478:	f107 001c 	add.w	r0, r7, #28
 800147c:	2301      	movs	r3, #1
 800147e:	ca06      	ldmia	r2, {r1, r2}
 8001480:	f000 fcd2 	bl	8001e28 <ssd1306_WriteString>
        		ssd1306_UpdateScreen();
 8001484:	f000 fbce 	bl	8001c24 <ssd1306_UpdateScreen>

        		char buf[15];
        		sprintf(buf, "%2.1f          ", sensor.temperature);
 8001488:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	4618      	mov	r0, r3
 800148e:	f7fe ffcb 	bl	8000428 <__aeabi_f2d>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	f107 000c 	add.w	r0, r7, #12
 800149a:	4911      	ldr	r1, [pc, #68]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800149c:	f003 fe18 	bl	80050d0 <siprintf>
        		ssd1306_SetCursor(0, 20);
 80014a0:	2114      	movs	r1, #20
 80014a2:	2000      	movs	r0, #0
 80014a4:	f000 fce6 	bl	8001e74 <ssd1306_SetCursor>
        		ssd1306_WriteString(buf, Font_7x10, White);
 80014a8:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80014aa:	f107 000c 	add.w	r0, r7, #12
 80014ae:	2301      	movs	r3, #1
 80014b0:	ca06      	ldmia	r2, {r1, r2}
 80014b2:	f000 fcb9 	bl	8001e28 <ssd1306_WriteString>
        		ssd1306_UpdateScreen();
 80014b6:	f000 fbb5 	bl	8001c24 <ssd1306_UpdateScreen>
        		return;
        	}
        }
        //HAL_SuspendTick();
        //HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
}
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200002ec 	.word	0x200002ec
 80014c4:	20000304 	.word	0x20000304
 80014c8:	2000000c 	.word	0x2000000c
 80014cc:	08007588 	.word	0x08007588
 80014d0:	08007598 	.word	0x08007598
 80014d4:	080075a8 	.word	0x080075a8
 80014d8:	080075bc 	.word	0x080075bc
 80014dc:	080075c8 	.word	0x080075c8
 80014e0:	080075cc 	.word	0x080075cc

080014e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ea:	f000 feff 	bl	80022ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ee:	f000 f887 	bl	8001600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f2:	f000 f971 	bl	80017d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014f6:	f000 f8c9 	bl	800168c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80014fa:	f000 f943 	bl	8001784 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80014fe:	f000 f8f3 	bl	80016e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  DS18B20_Init(&sensor, &huart1);
 8001502:	4935      	ldr	r1, [pc, #212]	; (80015d8 <main+0xf4>)
 8001504:	4835      	ldr	r0, [pc, #212]	; (80015dc <main+0xf8>)
 8001506:	f7ff ff2f 	bl	8001368 <DS18B20_Init>

  ssd1306_Init();
 800150a:	f000 faff 	bl	8001b0c <ssd1306_Init>
  state = DS18B20_InitializationCommand(&sensor);
 800150e:	4833      	ldr	r0, [pc, #204]	; (80015dc <main+0xf8>)
 8001510:	f7ff feb0 	bl	8001274 <DS18B20_InitializationCommand>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <main+0xfc>)
 800151a:	701a      	strb	r2, [r3, #0]

  if (state == DS18B20_OK) {
 800151c:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <main+0xfc>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d106      	bne.n	8001532 <main+0x4e>
	  ssd1306_WriteString("init ok", Font_7x10, White);
 8001524:	4a2f      	ldr	r2, [pc, #188]	; (80015e4 <main+0x100>)
 8001526:	2301      	movs	r3, #1
 8001528:	ca06      	ldmia	r2, {r1, r2}
 800152a:	482f      	ldr	r0, [pc, #188]	; (80015e8 <main+0x104>)
 800152c:	f000 fc7c 	bl	8001e28 <ssd1306_WriteString>
 8001530:	e005      	b.n	800153e <main+0x5a>
  }
  else {
	  ssd1306_WriteString("init failed", Font_7x10, White);
 8001532:	4a2c      	ldr	r2, [pc, #176]	; (80015e4 <main+0x100>)
 8001534:	2301      	movs	r3, #1
 8001536:	ca06      	ldmia	r2, {r1, r2}
 8001538:	482c      	ldr	r0, [pc, #176]	; (80015ec <main+0x108>)
 800153a:	f000 fc75 	bl	8001e28 <ssd1306_WriteString>
  }

  state = DS18B20_ReadRom(&sensor);
 800153e:	4827      	ldr	r0, [pc, #156]	; (80015dc <main+0xf8>)
 8001540:	f7ff feba 	bl	80012b8 <DS18B20_ReadRom>
 8001544:	4603      	mov	r3, r0
 8001546:	461a      	mov	r2, r3
 8001548:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <main+0xfc>)
 800154a:	701a      	strb	r2, [r3, #0]

  ssd1306_SetCursor(0, 10);
 800154c:	210a      	movs	r1, #10
 800154e:	2000      	movs	r0, #0
 8001550:	f000 fc90 	bl	8001e74 <ssd1306_SetCursor>
  if (state == DS18B20_OK) {
 8001554:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <main+0xfc>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d12b      	bne.n	80015b4 <main+0xd0>
  	  ssd1306_WriteString("ReadRom() ok", Font_7x10, White);
 800155c:	4a21      	ldr	r2, [pc, #132]	; (80015e4 <main+0x100>)
 800155e:	2301      	movs	r3, #1
 8001560:	ca06      	ldmia	r2, {r1, r2}
 8001562:	4823      	ldr	r0, [pc, #140]	; (80015f0 <main+0x10c>)
 8001564:	f000 fc60 	bl	8001e28 <ssd1306_WriteString>
  	  char serial[12];
  	  sprintf(serial, "%X%X%X%X%X%Xh", (uint8_t)*sensor.serialNumber,
 8001568:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <main+0xf8>)
 800156a:	7a1b      	ldrb	r3, [r3, #8]
 800156c:	461d      	mov	r5, r3
  			  	  	  	  	  (uint8_t)*(sensor.serialNumber+1),
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <main+0xf8>)
 8001570:	7a5b      	ldrb	r3, [r3, #9]
  	  sprintf(serial, "%X%X%X%X%X%Xh", (uint8_t)*sensor.serialNumber,
 8001572:	461e      	mov	r6, r3
  							  (uint8_t)*(sensor.serialNumber+2),
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <main+0xf8>)
 8001576:	7a9b      	ldrb	r3, [r3, #10]
  	  sprintf(serial, "%X%X%X%X%X%Xh", (uint8_t)*sensor.serialNumber,
 8001578:	461a      	mov	r2, r3
  							  (uint8_t)*(sensor.serialNumber+3),
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <main+0xf8>)
 800157c:	7adb      	ldrb	r3, [r3, #11]
  	  sprintf(serial, "%X%X%X%X%X%Xh", (uint8_t)*sensor.serialNumber,
 800157e:	4619      	mov	r1, r3
  							  (uint8_t)*(sensor.serialNumber+4),
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <main+0xf8>)
 8001582:	7b1b      	ldrb	r3, [r3, #12]
  	  sprintf(serial, "%X%X%X%X%X%Xh", (uint8_t)*sensor.serialNumber,
 8001584:	461c      	mov	r4, r3
  							  (uint8_t)*(sensor.serialNumber+5));
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <main+0xf8>)
 8001588:	7b5b      	ldrb	r3, [r3, #13]
  	  sprintf(serial, "%X%X%X%X%X%Xh", (uint8_t)*sensor.serialNumber,
 800158a:	1d38      	adds	r0, r7, #4
 800158c:	9303      	str	r3, [sp, #12]
 800158e:	9402      	str	r4, [sp, #8]
 8001590:	9101      	str	r1, [sp, #4]
 8001592:	9200      	str	r2, [sp, #0]
 8001594:	4633      	mov	r3, r6
 8001596:	462a      	mov	r2, r5
 8001598:	4916      	ldr	r1, [pc, #88]	; (80015f4 <main+0x110>)
 800159a:	f003 fd99 	bl	80050d0 <siprintf>
  	  ssd1306_SetCursor(0, 0);
 800159e:	2100      	movs	r1, #0
 80015a0:	2000      	movs	r0, #0
 80015a2:	f000 fc67 	bl	8001e74 <ssd1306_SetCursor>
  	  ssd1306_WriteString(serial, Font_7x10, White);
 80015a6:	4a0f      	ldr	r2, [pc, #60]	; (80015e4 <main+0x100>)
 80015a8:	1d38      	adds	r0, r7, #4
 80015aa:	2301      	movs	r3, #1
 80015ac:	ca06      	ldmia	r2, {r1, r2}
 80015ae:	f000 fc3b 	bl	8001e28 <ssd1306_WriteString>
 80015b2:	e005      	b.n	80015c0 <main+0xdc>
  }
  else {
  	  ssd1306_WriteString("ReadRom() failed", Font_7x10, White);
 80015b4:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <main+0x100>)
 80015b6:	2301      	movs	r3, #1
 80015b8:	ca06      	ldmia	r2, {r1, r2}
 80015ba:	480f      	ldr	r0, [pc, #60]	; (80015f8 <main+0x114>)
 80015bc:	f000 fc34 	bl	8001e28 <ssd1306_WriteString>
  }

  ssd1306_UpdateScreen();
 80015c0:	f000 fb30 	bl	8001c24 <ssd1306_UpdateScreen>
  HAL_TIM_Base_Start_IT(&htim2);
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <main+0x118>)
 80015c6:	f002 fabd 	bl	8003b44 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_SuspendTick();
 80015ca:	f000 ff15 	bl	80023f8 <HAL_SuspendTick>
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80015ce:	2101      	movs	r1, #1
 80015d0:	2000      	movs	r0, #0
 80015d2:	f001 fe31 	bl	8003238 <HAL_PWR_EnterSLEEPMode>
	  HAL_SuspendTick();
 80015d6:	e7f8      	b.n	80015ca <main+0xe6>
 80015d8:	200002a8 	.word	0x200002a8
 80015dc:	200002ec 	.word	0x200002ec
 80015e0:	20000304 	.word	0x20000304
 80015e4:	2000000c 	.word	0x2000000c
 80015e8:	080075dc 	.word	0x080075dc
 80015ec:	080075e4 	.word	0x080075e4
 80015f0:	08007598 	.word	0x08007598
 80015f4:	080075f0 	.word	0x080075f0
 80015f8:	080075a8 	.word	0x080075a8
 80015fc:	20000260 	.word	0x20000260

08001600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b090      	sub	sp, #64	; 0x40
 8001604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001606:	f107 0318 	add.w	r3, r7, #24
 800160a:	2228      	movs	r2, #40	; 0x28
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f003 f8f6 	bl	8004800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001622:	2301      	movs	r3, #1
 8001624:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001626:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800162a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001630:	2301      	movs	r3, #1
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001634:	2302      	movs	r3, #2
 8001636:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800163c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800163e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001642:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001644:	f107 0318 	add.w	r3, r7, #24
 8001648:	4618      	mov	r0, r3
 800164a:	f001 fe11 	bl	8003270 <HAL_RCC_OscConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001654:	f000 f918 	bl	8001888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001658:	230f      	movs	r3, #15
 800165a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800165c:	2302      	movs	r3, #2
 800165e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2102      	movs	r1, #2
 8001672:	4618      	mov	r0, r3
 8001674:	f002 f87e 	bl	8003774 <HAL_RCC_ClockConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800167e:	f000 f903 	bl	8001888 <Error_Handler>
  }
}
 8001682:	bf00      	nop
 8001684:	3740      	adds	r7, #64	; 0x40
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <MX_I2C1_Init+0x50>)
 8001692:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <MX_I2C1_Init+0x54>)
 8001694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_I2C1_Init+0x50>)
 8001698:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <MX_I2C1_Init+0x58>)
 800169a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <MX_I2C1_Init+0x50>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_I2C1_Init+0x50>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_I2C1_Init+0x50>)
 80016aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <MX_I2C1_Init+0x50>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_I2C1_Init+0x50>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <MX_I2C1_Init+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_I2C1_Init+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016c8:	4804      	ldr	r0, [pc, #16]	; (80016dc <MX_I2C1_Init+0x50>)
 80016ca:	f001 f95b 	bl	8002984 <HAL_I2C_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016d4:	f000 f8d8 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2000020c 	.word	0x2000020c
 80016e0:	40005400 	.word	0x40005400
 80016e4:	000186a0 	.word	0x000186a0

080016e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fc:	463b      	mov	r3, r7
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MX_TIM2_Init+0x98>)
 8001706:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800170a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1439;
 800170c:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <MX_TIM2_Init+0x98>)
 800170e:	f240 529f 	movw	r2, #1439	; 0x59f
 8001712:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <MX_TIM2_Init+0x98>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <MX_TIM2_Init+0x98>)
 800171c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001720:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <MX_TIM2_Init+0x98>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <MX_TIM2_Init+0x98>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800172e:	4814      	ldr	r0, [pc, #80]	; (8001780 <MX_TIM2_Init+0x98>)
 8001730:	f002 f9b8 	bl	8003aa4 <HAL_TIM_Base_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800173a:	f000 f8a5 	bl	8001888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001742:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4619      	mov	r1, r3
 800174a:	480d      	ldr	r0, [pc, #52]	; (8001780 <MX_TIM2_Init+0x98>)
 800174c:	f002 fb54 	bl	8003df8 <HAL_TIM_ConfigClockSource>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001756:	f000 f897 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001762:	463b      	mov	r3, r7
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <MX_TIM2_Init+0x98>)
 8001768:	f002 fd26 	bl	80041b8 <HAL_TIMEx_MasterConfigSynchronization>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001772:	f000 f889 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000260 	.word	0x20000260

08001784 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <MX_USART1_UART_Init+0x4c>)
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <MX_USART1_UART_Init+0x50>)
 800178c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <MX_USART1_UART_Init+0x4c>)
 8001790:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001794:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <MX_USART1_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MX_USART1_UART_Init+0x4c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <MX_USART1_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <MX_USART1_UART_Init+0x4c>)
 80017aa:	220c      	movs	r2, #12
 80017ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <MX_USART1_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <MX_USART1_UART_Init+0x4c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_USART1_UART_Init+0x4c>)
 80017bc:	f002 fd6c 	bl	8004298 <HAL_HalfDuplex_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017c6:	f000 f85f 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200002a8 	.word	0x200002a8
 80017d4:	40013800 	.word	0x40013800

080017d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 0310 	add.w	r3, r7, #16
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ec:	4b24      	ldr	r3, [pc, #144]	; (8001880 <MX_GPIO_Init+0xa8>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a23      	ldr	r2, [pc, #140]	; (8001880 <MX_GPIO_Init+0xa8>)
 80017f2:	f043 0310 	orr.w	r3, r3, #16
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b21      	ldr	r3, [pc, #132]	; (8001880 <MX_GPIO_Init+0xa8>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0310 	and.w	r3, r3, #16
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001804:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <MX_GPIO_Init+0xa8>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <MX_GPIO_Init+0xa8>)
 800180a:	f043 0320 	orr.w	r3, r3, #32
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <MX_GPIO_Init+0xa8>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0320 	and.w	r3, r3, #32
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <MX_GPIO_Init+0xa8>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a17      	ldr	r2, [pc, #92]	; (8001880 <MX_GPIO_Init+0xa8>)
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <MX_GPIO_Init+0xa8>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <MX_GPIO_Init+0xa8>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4a11      	ldr	r2, [pc, #68]	; (8001880 <MX_GPIO_Init+0xa8>)
 800183a:	f043 0308 	orr.w	r3, r3, #8
 800183e:	6193      	str	r3, [r2, #24]
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_GPIO_Init+0xa8>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001852:	480c      	ldr	r0, [pc, #48]	; (8001884 <MX_GPIO_Init+0xac>)
 8001854:	f001 f87e 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800185c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185e:	2301      	movs	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2302      	movs	r3, #2
 8001868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 0310 	add.w	r3, r7, #16
 800186e:	4619      	mov	r1, r3
 8001870:	4804      	ldr	r0, [pc, #16]	; (8001884 <MX_GPIO_Init+0xac>)
 8001872:	f000 feeb 	bl	800264c <HAL_GPIO_Init>

}
 8001876:	bf00      	nop
 8001878:	3720      	adds	r7, #32
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000
 8001884:	40011000 	.word	0x40011000

08001888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800188c:	b672      	cpsid	i
}
 800188e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001890:	e7fe      	b.n	8001890 <Error_Handler+0x8>
	...

08001894 <OneWire_SetBaudrate>:
#include "onewire.h"

static void OneWire_SetBaudrate(UART_HandleTypeDef *huart, uint32_t baudrate) {
 8001894:	b5b0      	push	{r4, r5, r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
	huart->Init.BaudRate = baudrate;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	605a      	str	r2, [r3, #4]
	huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80018a4:	f002 f8cc 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 80018a8:	4602      	mov	r2, r0
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	009a      	lsls	r2, r3, #2
 80018b2:	441a      	add	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	4a31      	ldr	r2, [pc, #196]	; (8001984 <OneWire_SetBaudrate+0xf0>)
 80018c0:	fba2 2303 	umull	r2, r3, r2, r3
 80018c4:	095b      	lsrs	r3, r3, #5
 80018c6:	011c      	lsls	r4, r3, #4
 80018c8:	f002 f8ba 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 80018cc:	4602      	mov	r2, r0
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	009a      	lsls	r2, r3, #2
 80018d6:	441a      	add	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	fbb2 f5f3 	udiv	r5, r2, r3
 80018e2:	f002 f8ad 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 80018e6:	4602      	mov	r2, r0
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	009a      	lsls	r2, r3, #2
 80018f0:	441a      	add	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fc:	4a21      	ldr	r2, [pc, #132]	; (8001984 <OneWire_SetBaudrate+0xf0>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2264      	movs	r2, #100	; 0x64
 8001906:	fb02 f303 	mul.w	r3, r2, r3
 800190a:	1aeb      	subs	r3, r5, r3
 800190c:	011b      	lsls	r3, r3, #4
 800190e:	3332      	adds	r3, #50	; 0x32
 8001910:	4a1c      	ldr	r2, [pc, #112]	; (8001984 <OneWire_SetBaudrate+0xf0>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800191c:	441c      	add	r4, r3
 800191e:	f002 f88f 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 8001922:	4602      	mov	r2, r0
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	009a      	lsls	r2, r3, #2
 800192c:	441a      	add	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	fbb2 f5f3 	udiv	r5, r2, r3
 8001938:	f002 f882 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 800193c:	4602      	mov	r2, r0
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	009a      	lsls	r2, r3, #2
 8001946:	441a      	add	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	4a0c      	ldr	r2, [pc, #48]	; (8001984 <OneWire_SetBaudrate+0xf0>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	095b      	lsrs	r3, r3, #5
 800195a:	2264      	movs	r2, #100	; 0x64
 800195c:	fb02 f303 	mul.w	r3, r2, r3
 8001960:	1aeb      	subs	r3, r5, r3
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	3332      	adds	r3, #50	; 0x32
 8001966:	4a07      	ldr	r2, [pc, #28]	; (8001984 <OneWire_SetBaudrate+0xf0>)
 8001968:	fba2 2303 	umull	r2, r3, r2, r3
 800196c:	095b      	lsrs	r3, r3, #5
 800196e:	f003 020f 	and.w	r2, r3, #15
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4422      	add	r2, r4
 8001978:	609a      	str	r2, [r3, #8]
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bdb0      	pop	{r4, r5, r7, pc}
 8001982:	bf00      	nop
 8001984:	51eb851f 	.word	0x51eb851f

08001988 <OneWire_ProcessBit>:

uint8_t OneWire_ProcessBit(UART_HandleTypeDef *huart, uint8_t bit)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	70fb      	strb	r3, [r7, #3]
	uint8_t txData = 0xFF;
 8001994:	23ff      	movs	r3, #255	; 0xff
 8001996:	73fb      	strb	r3, [r7, #15]
	uint8_t rxData = 0x00;
 8001998:	2300      	movs	r3, #0
 800199a:	73bb      	strb	r3, [r7, #14]
	if (bit == 0)
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <OneWire_ProcessBit+0x1e>
	{
		txData = 0x00;
 80019a2:	2300      	movs	r3, #0
 80019a4:	73fb      	strb	r3, [r7, #15]
	}
	HAL_UART_Transmit(huart, &txData, 1, ONEWIRE_UART_TIMEOUT);
 80019a6:	f107 010f 	add.w	r1, r7, #15
 80019aa:	230a      	movs	r3, #10
 80019ac:	2201      	movs	r2, #1
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f002 fcc7 	bl	8004342 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, &rxData, 1, ONEWIRE_UART_TIMEOUT);
 80019b4:	f107 010e 	add.w	r1, r7, #14
 80019b8:	230a      	movs	r3, #10
 80019ba:	2201      	movs	r2, #1
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f002 fd52 	bl	8004466 <HAL_UART_Receive>
	return rxData;
 80019c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <OneWire_ProcessByte>:

uint8_t OneWire_ProcessByte(UART_HandleTypeDef *huart, uint8_t byte)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
	uint8_t rxByte = 0x00;
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 80019dc:	2300      	movs	r3, #0
 80019de:	73bb      	strb	r3, [r7, #14]
 80019e0:	e022      	b.n	8001a28 <OneWire_ProcessByte+0x5c>
	{
		uint8_t txBit = (byte >> i) & 0x01;
 80019e2:	78fa      	ldrb	r2, [r7, #3]
 80019e4:	7bbb      	ldrb	r3, [r7, #14]
 80019e6:	fa42 f303 	asr.w	r3, r2, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	733b      	strb	r3, [r7, #12]
		uint8_t rxBit = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	737b      	strb	r3, [r7, #13]
		uint8_t tempRxData = OneWire_ProcessBit(huart, txBit);
 80019f6:	7b3b      	ldrb	r3, [r7, #12]
 80019f8:	4619      	mov	r1, r3
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ffc4 	bl	8001988 <OneWire_ProcessBit>
 8001a00:	4603      	mov	r3, r0
 8001a02:	72fb      	strb	r3, [r7, #11]
		if (tempRxData == 0xFF)
 8001a04:	7afb      	ldrb	r3, [r7, #11]
 8001a06:	2bff      	cmp	r3, #255	; 0xff
 8001a08:	d101      	bne.n	8001a0e <OneWire_ProcessByte+0x42>
		{
			rxBit = 1;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	737b      	strb	r3, [r7, #13]
		}
		rxByte |= (rxBit << i);
 8001a0e:	7b7a      	ldrb	r2, [r7, #13]
 8001a10:	7bbb      	ldrb	r3, [r7, #14]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	b25a      	sxtb	r2, r3
 8001a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b25b      	sxtb	r3, r3
 8001a20:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 8001a22:	7bbb      	ldrb	r3, [r7, #14]
 8001a24:	3301      	adds	r3, #1
 8001a26:	73bb      	strb	r3, [r7, #14]
 8001a28:	7bbb      	ldrb	r3, [r7, #14]
 8001a2a:	2b07      	cmp	r3, #7
 8001a2c:	d9d9      	bls.n	80019e2 <OneWire_ProcessByte+0x16>
	}
	return rxByte;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <OneWire_Reset>:

ONEWIRE_Status OneWire_Reset(UART_HandleTypeDef *huart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	OneWire_ProcessByte(huart, 0x43);
 8001a40:	2143      	movs	r1, #67	; 0x43
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffc2 	bl	80019cc <OneWire_ProcessByte>
	ONEWIRE_Status status = ONEWIRE_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]
	uint8_t txByte = ONEWIRE_RESET_BYTE;
 8001a4c:	23f0      	movs	r3, #240	; 0xf0
 8001a4e:	73bb      	strb	r3, [r7, #14]
	uint8_t rxByte = 0x00;
 8001a50:	2300      	movs	r3, #0
 8001a52:	737b      	strb	r3, [r7, #13]
	OneWire_SetBaudrate(huart, ONEWIRE_RESET_BAUDRATE);
 8001a54:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ff1b 	bl	8001894 <OneWire_SetBaudrate>
	HAL_UART_Transmit(huart, &txByte, 1, ONEWIRE_UART_TIMEOUT);
 8001a5e:	f107 010e 	add.w	r1, r7, #14
 8001a62:	230a      	movs	r3, #10
 8001a64:	2201      	movs	r2, #1
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f002 fc6b 	bl	8004342 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, &rxByte, 1, ONEWIRE_UART_TIMEOUT);
 8001a6c:	f107 010d 	add.w	r1, r7, #13
 8001a70:	230a      	movs	r3, #10
 8001a72:	2201      	movs	r2, #1
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f002 fcf6 	bl	8004466 <HAL_UART_Receive>
	OneWire_SetBaudrate(huart, ONEWIRE_BAUDRATE);
 8001a7a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ff08 	bl	8001894 <OneWire_SetBaudrate>
	if (rxByte == txByte)
 8001a84:	7b7a      	ldrb	r2, [r7, #13]
 8001a86:	7bbb      	ldrb	r3, [r7, #14]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d101      	bne.n	8001a90 <OneWire_Reset+0x58>
	{
		status = ONEWIRE_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
	...

08001aa8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af04      	add	r7, sp, #16
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	9302      	str	r3, [sp, #8]
 8001ab8:	2301      	movs	r3, #1
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	1dfb      	adds	r3, r7, #7
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2178      	movs	r1, #120	; 0x78
 8001ac6:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <ssd1306_WriteCommand+0x2c>)
 8001ac8:	f001 f8a0 	bl	8002c0c <HAL_I2C_Mem_Write>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	2000020c 	.word	0x2000020c

08001ad8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af04      	add	r7, sp, #16
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aea:	9202      	str	r2, [sp, #8]
 8001aec:	9301      	str	r3, [sp, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2301      	movs	r3, #1
 8001af4:	2240      	movs	r2, #64	; 0x40
 8001af6:	2178      	movs	r1, #120	; 0x78
 8001af8:	4803      	ldr	r0, [pc, #12]	; (8001b08 <ssd1306_WriteData+0x30>)
 8001afa:	f001 f887 	bl	8002c0c <HAL_I2C_Mem_Write>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000020c 	.word	0x2000020c

08001b0c <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001b10:	f7ff ffc3 	bl	8001a9a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001b14:	2064      	movs	r0, #100	; 0x64
 8001b16:	f000 fc4b 	bl	80023b0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f000 f9d6 	bl	8001ecc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001b20:	2020      	movs	r0, #32
 8001b22:	f7ff ffc1 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001b26:	2000      	movs	r0, #0
 8001b28:	f7ff ffbe 	bl	8001aa8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001b2c:	20b0      	movs	r0, #176	; 0xb0
 8001b2e:	f7ff ffbb 	bl	8001aa8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001b32:	20c8      	movs	r0, #200	; 0xc8
 8001b34:	f7ff ffb8 	bl	8001aa8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f7ff ffb5 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001b3e:	2010      	movs	r0, #16
 8001b40:	f7ff ffb2 	bl	8001aa8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001b44:	2040      	movs	r0, #64	; 0x40
 8001b46:	f7ff ffaf 	bl	8001aa8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001b4a:	20ff      	movs	r0, #255	; 0xff
 8001b4c:	f000 f9aa 	bl	8001ea4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001b50:	20a1      	movs	r0, #161	; 0xa1
 8001b52:	f7ff ffa9 	bl	8001aa8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001b56:	20a6      	movs	r0, #166	; 0xa6
 8001b58:	f7ff ffa6 	bl	8001aa8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001b5c:	20a8      	movs	r0, #168	; 0xa8
 8001b5e:	f7ff ffa3 	bl	8001aa8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001b62:	201f      	movs	r0, #31
 8001b64:	f7ff ffa0 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b68:	20a4      	movs	r0, #164	; 0xa4
 8001b6a:	f7ff ff9d 	bl	8001aa8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001b6e:	20d3      	movs	r0, #211	; 0xd3
 8001b70:	f7ff ff9a 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001b74:	2000      	movs	r0, #0
 8001b76:	f7ff ff97 	bl	8001aa8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b7a:	20d5      	movs	r0, #213	; 0xd5
 8001b7c:	f7ff ff94 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001b80:	20f0      	movs	r0, #240	; 0xf0
 8001b82:	f7ff ff91 	bl	8001aa8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001b86:	20d9      	movs	r0, #217	; 0xd9
 8001b88:	f7ff ff8e 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001b8c:	2022      	movs	r0, #34	; 0x22
 8001b8e:	f7ff ff8b 	bl	8001aa8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001b92:	20da      	movs	r0, #218	; 0xda
 8001b94:	f7ff ff88 	bl	8001aa8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8001b98:	2002      	movs	r0, #2
 8001b9a:	f7ff ff85 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001b9e:	20db      	movs	r0, #219	; 0xdb
 8001ba0:	f7ff ff82 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ba4:	2020      	movs	r0, #32
 8001ba6:	f7ff ff7f 	bl	8001aa8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001baa:	208d      	movs	r0, #141	; 0x8d
 8001bac:	f7ff ff7c 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001bb0:	2014      	movs	r0, #20
 8001bb2:	f7ff ff79 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f000 f988 	bl	8001ecc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f000 f80f 	bl	8001be0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001bc2:	f000 f82f 	bl	8001c24 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <ssd1306_Init+0xd0>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <ssd1306_Init+0xd0>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001bd2:	4b02      	ldr	r3, [pc, #8]	; (8001bdc <ssd1306_Init+0xd0>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	711a      	strb	r2, [r3, #4]
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000508 	.word	0x20000508

08001be0 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e00d      	b.n	8001c0c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <ssd1306_Fill+0x1a>
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	e000      	b.n	8001bfc <ssd1306_Fill+0x1c>
 8001bfa:	21ff      	movs	r1, #255	; 0xff
 8001bfc:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <ssd1306_Fill+0x40>)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4413      	add	r3, r2
 8001c02:	460a      	mov	r2, r1
 8001c04:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c12:	d3ed      	bcc.n	8001bf0 <ssd1306_Fill+0x10>
    }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	20000308 	.word	0x20000308

08001c24 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	71fb      	strb	r3, [r7, #7]
 8001c2e:	e016      	b.n	8001c5e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	3b50      	subs	r3, #80	; 0x50
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff36 	bl	8001aa8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7ff ff33 	bl	8001aa8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001c42:	2010      	movs	r0, #16
 8001c44:	f7ff ff30 	bl	8001aa8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	01db      	lsls	r3, r3, #7
 8001c4c:	4a08      	ldr	r2, [pc, #32]	; (8001c70 <ssd1306_UpdateScreen+0x4c>)
 8001c4e:	4413      	add	r3, r2
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff40 	bl	8001ad8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	71fb      	strb	r3, [r7, #7]
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d9e5      	bls.n	8001c30 <ssd1306_UpdateScreen+0xc>
    }
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000308 	.word	0x20000308

08001c74 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	71bb      	strb	r3, [r7, #6]
 8001c82:	4613      	mov	r3, r2
 8001c84:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	db3d      	blt.n	8001d0a <ssd1306_DrawPixel+0x96>
 8001c8e:	79bb      	ldrb	r3, [r7, #6]
 8001c90:	2b1f      	cmp	r3, #31
 8001c92:	d83a      	bhi.n	8001d0a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001c94:	797b      	ldrb	r3, [r7, #5]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d11a      	bne.n	8001cd0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001c9a:	79fa      	ldrb	r2, [r7, #7]
 8001c9c:	79bb      	ldrb	r3, [r7, #6]
 8001c9e:	08db      	lsrs	r3, r3, #3
 8001ca0:	b2d8      	uxtb	r0, r3
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	01db      	lsls	r3, r3, #7
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a1a      	ldr	r2, [pc, #104]	; (8001d14 <ssd1306_DrawPixel+0xa0>)
 8001caa:	5cd3      	ldrb	r3, [r2, r3]
 8001cac:	b25a      	sxtb	r2, r3
 8001cae:	79bb      	ldrb	r3, [r7, #6]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	b25b      	sxtb	r3, r3
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	b259      	sxtb	r1, r3
 8001cc0:	79fa      	ldrb	r2, [r7, #7]
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	01db      	lsls	r3, r3, #7
 8001cc6:	4413      	add	r3, r2
 8001cc8:	b2c9      	uxtb	r1, r1
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <ssd1306_DrawPixel+0xa0>)
 8001ccc:	54d1      	strb	r1, [r2, r3]
 8001cce:	e01d      	b.n	8001d0c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001cd0:	79fa      	ldrb	r2, [r7, #7]
 8001cd2:	79bb      	ldrb	r3, [r7, #6]
 8001cd4:	08db      	lsrs	r3, r3, #3
 8001cd6:	b2d8      	uxtb	r0, r3
 8001cd8:	4603      	mov	r3, r0
 8001cda:	01db      	lsls	r3, r3, #7
 8001cdc:	4413      	add	r3, r2
 8001cde:	4a0d      	ldr	r2, [pc, #52]	; (8001d14 <ssd1306_DrawPixel+0xa0>)
 8001ce0:	5cd3      	ldrb	r3, [r2, r3]
 8001ce2:	b25a      	sxtb	r2, r3
 8001ce4:	79bb      	ldrb	r3, [r7, #6]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	2101      	movs	r1, #1
 8001cec:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf0:	b25b      	sxtb	r3, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	b25b      	sxtb	r3, r3
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	b259      	sxtb	r1, r3
 8001cfa:	79fa      	ldrb	r2, [r7, #7]
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	01db      	lsls	r3, r3, #7
 8001d00:	4413      	add	r3, r2
 8001d02:	b2c9      	uxtb	r1, r1
 8001d04:	4a03      	ldr	r2, [pc, #12]	; (8001d14 <ssd1306_DrawPixel+0xa0>)
 8001d06:	54d1      	strb	r1, [r2, r3]
 8001d08:	e000      	b.n	8001d0c <ssd1306_DrawPixel+0x98>
        return;
 8001d0a:	bf00      	nop
    }
}
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	20000308 	.word	0x20000308

08001d18 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4604      	mov	r4, r0
 8001d20:	1d38      	adds	r0, r7, #4
 8001d22:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d26:	461a      	mov	r2, r3
 8001d28:	4623      	mov	r3, r4
 8001d2a:	73fb      	strb	r3, [r7, #15]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	2b1f      	cmp	r3, #31
 8001d34:	d902      	bls.n	8001d3c <ssd1306_WriteChar+0x24>
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	2b7e      	cmp	r3, #126	; 0x7e
 8001d3a:	d901      	bls.n	8001d40 <ssd1306_WriteChar+0x28>
        return 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e06d      	b.n	8001e1c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001d40:	4b38      	ldr	r3, [pc, #224]	; (8001e24 <ssd1306_WriteChar+0x10c>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	793b      	ldrb	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	2b80      	cmp	r3, #128	; 0x80
 8001d4c:	dc06      	bgt.n	8001d5c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001d4e:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <ssd1306_WriteChar+0x10c>)
 8001d50:	885b      	ldrh	r3, [r3, #2]
 8001d52:	461a      	mov	r2, r3
 8001d54:	797b      	ldrb	r3, [r7, #5]
 8001d56:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001d58:	2b20      	cmp	r3, #32
 8001d5a:	dd01      	ble.n	8001d60 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e05d      	b.n	8001e1c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	e04c      	b.n	8001e00 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
 8001d6a:	3b20      	subs	r3, #32
 8001d6c:	7979      	ldrb	r1, [r7, #5]
 8001d6e:	fb01 f303 	mul.w	r3, r1, r3
 8001d72:	4619      	mov	r1, r3
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	440b      	add	r3, r1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001d80:	2300      	movs	r3, #0
 8001d82:	61bb      	str	r3, [r7, #24]
 8001d84:	e034      	b.n	8001df0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d012      	beq.n	8001dbc <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001d96:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <ssd1306_WriteChar+0x10c>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	4413      	add	r3, r2
 8001da2:	b2d8      	uxtb	r0, r3
 8001da4:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <ssd1306_WriteChar+0x10c>)
 8001da6:	885b      	ldrh	r3, [r3, #2]
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	4413      	add	r3, r2
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	7bba      	ldrb	r2, [r7, #14]
 8001db4:	4619      	mov	r1, r3
 8001db6:	f7ff ff5d 	bl	8001c74 <ssd1306_DrawPixel>
 8001dba:	e016      	b.n	8001dea <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <ssd1306_WriteChar+0x10c>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	b2d8      	uxtb	r0, r3
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <ssd1306_WriteChar+0x10c>)
 8001dcc:	885b      	ldrh	r3, [r3, #2]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	b2d9      	uxtb	r1, r3
 8001dd8:	7bbb      	ldrb	r3, [r7, #14]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	bf0c      	ite	eq
 8001dde:	2301      	moveq	r3, #1
 8001de0:	2300      	movne	r3, #0
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	461a      	mov	r2, r3
 8001de6:	f7ff ff45 	bl	8001c74 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	3301      	adds	r3, #1
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	793b      	ldrb	r3, [r7, #4]
 8001df2:	461a      	mov	r2, r3
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d3c5      	bcc.n	8001d86 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	61fb      	str	r3, [r7, #28]
 8001e00:	797b      	ldrb	r3, [r7, #5]
 8001e02:	461a      	mov	r2, r3
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d3ad      	bcc.n	8001d66 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <ssd1306_WriteChar+0x10c>)
 8001e0c:	881a      	ldrh	r2, [r3, #0]
 8001e0e:	793b      	ldrb	r3, [r7, #4]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	4413      	add	r3, r2
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <ssd1306_WriteChar+0x10c>)
 8001e18:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3724      	adds	r7, #36	; 0x24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd90      	pop	{r4, r7, pc}
 8001e24:	20000508 	.word	0x20000508

08001e28 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	1d38      	adds	r0, r7, #4
 8001e32:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e36:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001e38:	e012      	b.n	8001e60 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	7818      	ldrb	r0, [r3, #0]
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	1d3a      	adds	r2, r7, #4
 8001e42:	ca06      	ldmia	r2, {r1, r2}
 8001e44:	f7ff ff68 	bl	8001d18 <ssd1306_WriteChar>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d002      	beq.n	8001e5a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	e008      	b.n	8001e6c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1e8      	bne.n	8001e3a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	460a      	mov	r2, r1
 8001e7e:	71fb      	strb	r3, [r7, #7]
 8001e80:	4613      	mov	r3, r2
 8001e82:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <ssd1306_SetCursor+0x2c>)
 8001e8a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001e8c:	79bb      	ldrb	r3, [r7, #6]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <ssd1306_SetCursor+0x2c>)
 8001e92:	805a      	strh	r2, [r3, #2]
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000508 	.word	0x20000508

08001ea4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001eae:	2381      	movs	r3, #129	; 0x81
 8001eb0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fdf7 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fdf3 	bl	8001aa8 <ssd1306_WriteCommand>
}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001edc:	23af      	movs	r3, #175	; 0xaf
 8001ede:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <ssd1306_SetDisplayOn+0x38>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	715a      	strb	r2, [r3, #5]
 8001ee6:	e004      	b.n	8001ef2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001ee8:	23ae      	movs	r3, #174	; 0xae
 8001eea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <ssd1306_SetDisplayOn+0x38>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fdd7 	bl	8001aa8 <ssd1306_WriteCommand>
}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000508 	.word	0x20000508

08001f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6193      	str	r3, [r2, #24]
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4a0e      	ldr	r2, [pc, #56]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f30:	61d3      	str	r3, [r2, #28]
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_MspInit+0x60>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <HAL_MspInit+0x60>)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40010000 	.word	0x40010000

08001f6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0310 	add.w	r3, r7, #16
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a15      	ldr	r2, [pc, #84]	; (8001fdc <HAL_I2C_MspInit+0x70>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d123      	bne.n	8001fd4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_I2C_MspInit+0x74>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	4a13      	ldr	r2, [pc, #76]	; (8001fe0 <HAL_I2C_MspInit+0x74>)
 8001f92:	f043 0308 	orr.w	r3, r3, #8
 8001f96:	6193      	str	r3, [r2, #24]
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_I2C_MspInit+0x74>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fa4:	23c0      	movs	r3, #192	; 0xc0
 8001fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fa8:	2312      	movs	r3, #18
 8001faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fac:	2303      	movs	r3, #3
 8001fae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	480b      	ldr	r0, [pc, #44]	; (8001fe4 <HAL_I2C_MspInit+0x78>)
 8001fb8:	f000 fb48 	bl	800264c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_I2C_MspInit+0x74>)
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	4a07      	ldr	r2, [pc, #28]	; (8001fe0 <HAL_I2C_MspInit+0x74>)
 8001fc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fc6:	61d3      	str	r3, [r2, #28]
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_I2C_MspInit+0x74>)
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fd4:	bf00      	nop
 8001fd6:	3720      	adds	r7, #32
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40005400 	.word	0x40005400
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40010c00 	.word	0x40010c00

08001fe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff8:	d113      	bne.n	8002022 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	; (800202c <HAL_TIM_Base_MspInit+0x44>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	4a0b      	ldr	r2, [pc, #44]	; (800202c <HAL_TIM_Base_MspInit+0x44>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	61d3      	str	r3, [r2, #28]
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_TIM_Base_MspInit+0x44>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	2100      	movs	r1, #0
 8002016:	201c      	movs	r0, #28
 8002018:	f000 fae1 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800201c:	201c      	movs	r0, #28
 800201e:	f000 fafa 	bl	8002616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000

08002030 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a16      	ldr	r2, [pc, #88]	; (80020a4 <HAL_UART_MspInit+0x74>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d124      	bne.n	800209a <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002050:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <HAL_UART_MspInit+0x78>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	4a14      	ldr	r2, [pc, #80]	; (80020a8 <HAL_UART_MspInit+0x78>)
 8002056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205a:	6193      	str	r3, [r2, #24]
 800205c:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <HAL_UART_MspInit+0x78>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002068:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <HAL_UART_MspInit+0x78>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <HAL_UART_MspInit+0x78>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	6193      	str	r3, [r2, #24]
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <HAL_UART_MspInit+0x78>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002084:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002086:	2312      	movs	r3, #18
 8002088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208e:	f107 0310 	add.w	r3, r7, #16
 8002092:	4619      	mov	r1, r3
 8002094:	4805      	ldr	r0, [pc, #20]	; (80020ac <HAL_UART_MspInit+0x7c>)
 8002096:	f000 fad9 	bl	800264c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800209a:	bf00      	nop
 800209c:	3720      	adds	r7, #32
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40013800 	.word	0x40013800
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40010800 	.word	0x40010800

080020b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <NMI_Handler+0x4>

080020b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ba:	e7fe      	b.n	80020ba <HardFault_Handler+0x4>

080020bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <MemManage_Handler+0x4>

080020c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020c6:	e7fe      	b.n	80020c6 <BusFault_Handler+0x4>

080020c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020cc:	e7fe      	b.n	80020cc <UsageFault_Handler+0x4>

080020ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr

080020da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr

080020f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f6:	f000 f93f 	bl	8002378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <TIM2_IRQHandler+0x10>)
 8002106:	f001 fd6f 	bl	8003be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000260 	.word	0x20000260

08002114 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
	return 1;
 8002118:	2301      	movs	r3, #1
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <_kill>:

int _kill(int pid, int sig)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800212c:	f002 fb16 	bl	800475c <__errno>
 8002130:	4603      	mov	r3, r0
 8002132:	2216      	movs	r2, #22
 8002134:	601a      	str	r2, [r3, #0]
	return -1;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <_exit>:

void _exit (int status)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800214a:	f04f 31ff 	mov.w	r1, #4294967295
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ffe7 	bl	8002122 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002154:	e7fe      	b.n	8002154 <_exit+0x12>

08002156 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	e00a      	b.n	800217e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002168:	f3af 8000 	nop.w
 800216c:	4601      	mov	r1, r0
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	60ba      	str	r2, [r7, #8]
 8002174:	b2ca      	uxtb	r2, r1
 8002176:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	3301      	adds	r3, #1
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	429a      	cmp	r2, r3
 8002184:	dbf0      	blt.n	8002168 <_read+0x12>
	}

return len;
 8002186:	687b      	ldr	r3, [r7, #4]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	e009      	b.n	80021b6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	60ba      	str	r2, [r7, #8]
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	3301      	adds	r3, #1
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	dbf1      	blt.n	80021a2 <_write+0x12>
	}
	return len;
 80021be:	687b      	ldr	r3, [r7, #4]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <_close>:

int _close(int file)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	return -1;
 80021d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ee:	605a      	str	r2, [r3, #4]
	return 0;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <_isatty>:

int _isatty(int file)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	return 1;
 8002204:	2301      	movs	r3, #1
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
	return 0;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002230:	4a14      	ldr	r2, [pc, #80]	; (8002284 <_sbrk+0x5c>)
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <_sbrk+0x60>)
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <_sbrk+0x64>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <_sbrk+0x64>)
 8002246:	4a12      	ldr	r2, [pc, #72]	; (8002290 <_sbrk+0x68>)
 8002248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <_sbrk+0x64>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	429a      	cmp	r2, r3
 8002256:	d207      	bcs.n	8002268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002258:	f002 fa80 	bl	800475c <__errno>
 800225c:	4603      	mov	r3, r0
 800225e:	220c      	movs	r2, #12
 8002260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	e009      	b.n	800227c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <_sbrk+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <_sbrk+0x64>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	4a05      	ldr	r2, [pc, #20]	; (800228c <_sbrk+0x64>)
 8002278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800227a:	68fb      	ldr	r3, [r7, #12]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20005000 	.word	0x20005000
 8002288:	00000400 	.word	0x00000400
 800228c:	20000510 	.word	0x20000510
 8002290:	20000528 	.word	0x20000528

08002294 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022a0:	480c      	ldr	r0, [pc, #48]	; (80022d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022a2:	490d      	ldr	r1, [pc, #52]	; (80022d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022a4:	4a0d      	ldr	r2, [pc, #52]	; (80022dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a8:	e002      	b.n	80022b0 <LoopCopyDataInit>

080022aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ae:	3304      	adds	r3, #4

080022b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b4:	d3f9      	bcc.n	80022aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022b8:	4c0a      	ldr	r4, [pc, #40]	; (80022e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022bc:	e001      	b.n	80022c2 <LoopFillZerobss>

080022be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c0:	3204      	adds	r2, #4

080022c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c4:	d3fb      	bcc.n	80022be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022c6:	f7ff ffe5 	bl	8002294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ca:	f002 fa4d 	bl	8004768 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022ce:	f7ff f909 	bl	80014e4 <main>
  bx lr
 80022d2:	4770      	bx	lr
  ldr r0, =_sdata
 80022d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80022dc:	08008174 	.word	0x08008174
  ldr r2, =_sbss
 80022e0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80022e4:	20000528 	.word	0x20000528

080022e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022e8:	e7fe      	b.n	80022e8 <ADC1_2_IRQHandler>
	...

080022ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_Init+0x28>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a07      	ldr	r2, [pc, #28]	; (8002314 <HAL_Init+0x28>)
 80022f6:	f043 0310 	orr.w	r3, r3, #16
 80022fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022fc:	2003      	movs	r0, #3
 80022fe:	f000 f963 	bl	80025c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002302:	200f      	movs	r0, #15
 8002304:	f000 f808 	bl	8002318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002308:	f7ff fdfe 	bl	8001f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40022000 	.word	0x40022000

08002318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <HAL_InitTick+0x54>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_InitTick+0x58>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4619      	mov	r1, r3
 800232a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800232e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002332:	fbb2 f3f3 	udiv	r3, r2, r3
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f97b 	bl	8002632 <HAL_SYSTICK_Config>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e00e      	b.n	8002364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b0f      	cmp	r3, #15
 800234a:	d80a      	bhi.n	8002362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800234c:	2200      	movs	r2, #0
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	f04f 30ff 	mov.w	r0, #4294967295
 8002354:	f000 f943 	bl	80025de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002358:	4a06      	ldr	r2, [pc, #24]	; (8002374 <HAL_InitTick+0x5c>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	e000      	b.n	8002364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000014 	.word	0x20000014
 8002370:	2000001c 	.word	0x2000001c
 8002374:	20000018 	.word	0x20000018

08002378 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_IncTick+0x1c>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_IncTick+0x20>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4413      	add	r3, r2
 8002388:	4a03      	ldr	r2, [pc, #12]	; (8002398 <HAL_IncTick+0x20>)
 800238a:	6013      	str	r3, [r2, #0]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	2000001c 	.word	0x2000001c
 8002398:	20000514 	.word	0x20000514

0800239c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return uwTick;
 80023a0:	4b02      	ldr	r3, [pc, #8]	; (80023ac <HAL_GetTick+0x10>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	20000514 	.word	0x20000514

080023b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b8:	f7ff fff0 	bl	800239c <HAL_GetTick>
 80023bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d005      	beq.n	80023d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_Delay+0x44>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023d6:	bf00      	nop
 80023d8:	f7ff ffe0 	bl	800239c <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d8f7      	bhi.n	80023d8 <HAL_Delay+0x28>
  {
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	2000001c 	.word	0x2000001c

080023f8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <HAL_SuspendTick+0x18>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a03      	ldr	r2, [pc, #12]	; (8002410 <HAL_SuspendTick+0x18>)
 8002402:	f023 0302 	bic.w	r3, r3, #2
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	e000e010 	.word	0xe000e010

08002414 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002418:	4b04      	ldr	r3, [pc, #16]	; (800242c <HAL_ResumeTick+0x18>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a03      	ldr	r2, [pc, #12]	; (800242c <HAL_ResumeTick+0x18>)
 800241e:	f043 0302 	orr.w	r3, r3, #2
 8002422:	6013      	str	r3, [r2, #0]
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	e000e010 	.word	0xe000e010

08002430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800244c:	4013      	ands	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800245c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002462:	4a04      	ldr	r2, [pc, #16]	; (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	60d3      	str	r3, [r2, #12]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <__NVIC_GetPriorityGrouping+0x18>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	f003 0307 	and.w	r3, r3, #7
}
 8002486:	4618      	mov	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	db0b      	blt.n	80024be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	f003 021f 	and.w	r2, r3, #31
 80024ac:	4906      	ldr	r1, [pc, #24]	; (80024c8 <__NVIC_EnableIRQ+0x34>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	2001      	movs	r0, #1
 80024b6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	e000e100 	.word	0xe000e100

080024cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	db0a      	blt.n	80024f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	490c      	ldr	r1, [pc, #48]	; (8002518 <__NVIC_SetPriority+0x4c>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	0112      	lsls	r2, r2, #4
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	440b      	add	r3, r1
 80024f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f4:	e00a      	b.n	800250c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4908      	ldr	r1, [pc, #32]	; (800251c <__NVIC_SetPriority+0x50>)
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	3b04      	subs	r3, #4
 8002504:	0112      	lsls	r2, r2, #4
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	440b      	add	r3, r1
 800250a:	761a      	strb	r2, [r3, #24]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000e100 	.word	0xe000e100
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	; 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f1c3 0307 	rsb	r3, r3, #7
 800253a:	2b04      	cmp	r3, #4
 800253c:	bf28      	it	cs
 800253e:	2304      	movcs	r3, #4
 8002540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3304      	adds	r3, #4
 8002546:	2b06      	cmp	r3, #6
 8002548:	d902      	bls.n	8002550 <NVIC_EncodePriority+0x30>
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3b03      	subs	r3, #3
 800254e:	e000      	b.n	8002552 <NVIC_EncodePriority+0x32>
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	f04f 32ff 	mov.w	r2, #4294967295
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	401a      	ands	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002568:	f04f 31ff 	mov.w	r1, #4294967295
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa01 f303 	lsl.w	r3, r1, r3
 8002572:	43d9      	mvns	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	4313      	orrs	r3, r2
         );
}
 800257a:	4618      	mov	r0, r3
 800257c:	3724      	adds	r7, #36	; 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002594:	d301      	bcc.n	800259a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002596:	2301      	movs	r3, #1
 8002598:	e00f      	b.n	80025ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259a:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <SysTick_Config+0x40>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3b01      	subs	r3, #1
 80025a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a2:	210f      	movs	r1, #15
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	f7ff ff90 	bl	80024cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <SysTick_Config+0x40>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <SysTick_Config+0x40>)
 80025b4:	2207      	movs	r2, #7
 80025b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	e000e010 	.word	0xe000e010

080025c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff ff2d 	bl	8002430 <__NVIC_SetPriorityGrouping>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025de:	b580      	push	{r7, lr}
 80025e0:	b086      	sub	sp, #24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4603      	mov	r3, r0
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
 80025ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f0:	f7ff ff42 	bl	8002478 <__NVIC_GetPriorityGrouping>
 80025f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	6978      	ldr	r0, [r7, #20]
 80025fc:	f7ff ff90 	bl	8002520 <NVIC_EncodePriority>
 8002600:	4602      	mov	r2, r0
 8002602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff5f 	bl	80024cc <__NVIC_SetPriority>
}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff35 	bl	8002494 <__NVIC_EnableIRQ>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff ffa2 	bl	8002584 <SysTick_Config>
 8002640:	4603      	mov	r3, r0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800264c:	b480      	push	{r7}
 800264e:	b08b      	sub	sp, #44	; 0x2c
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002656:	2300      	movs	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800265e:	e169      	b.n	8002934 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002660:	2201      	movs	r2, #1
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	69fa      	ldr	r2, [r7, #28]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	429a      	cmp	r2, r3
 800267a:	f040 8158 	bne.w	800292e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	4a9a      	ldr	r2, [pc, #616]	; (80028ec <HAL_GPIO_Init+0x2a0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d05e      	beq.n	8002746 <HAL_GPIO_Init+0xfa>
 8002688:	4a98      	ldr	r2, [pc, #608]	; (80028ec <HAL_GPIO_Init+0x2a0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d875      	bhi.n	800277a <HAL_GPIO_Init+0x12e>
 800268e:	4a98      	ldr	r2, [pc, #608]	; (80028f0 <HAL_GPIO_Init+0x2a4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d058      	beq.n	8002746 <HAL_GPIO_Init+0xfa>
 8002694:	4a96      	ldr	r2, [pc, #600]	; (80028f0 <HAL_GPIO_Init+0x2a4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d86f      	bhi.n	800277a <HAL_GPIO_Init+0x12e>
 800269a:	4a96      	ldr	r2, [pc, #600]	; (80028f4 <HAL_GPIO_Init+0x2a8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d052      	beq.n	8002746 <HAL_GPIO_Init+0xfa>
 80026a0:	4a94      	ldr	r2, [pc, #592]	; (80028f4 <HAL_GPIO_Init+0x2a8>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d869      	bhi.n	800277a <HAL_GPIO_Init+0x12e>
 80026a6:	4a94      	ldr	r2, [pc, #592]	; (80028f8 <HAL_GPIO_Init+0x2ac>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d04c      	beq.n	8002746 <HAL_GPIO_Init+0xfa>
 80026ac:	4a92      	ldr	r2, [pc, #584]	; (80028f8 <HAL_GPIO_Init+0x2ac>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d863      	bhi.n	800277a <HAL_GPIO_Init+0x12e>
 80026b2:	4a92      	ldr	r2, [pc, #584]	; (80028fc <HAL_GPIO_Init+0x2b0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d046      	beq.n	8002746 <HAL_GPIO_Init+0xfa>
 80026b8:	4a90      	ldr	r2, [pc, #576]	; (80028fc <HAL_GPIO_Init+0x2b0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d85d      	bhi.n	800277a <HAL_GPIO_Init+0x12e>
 80026be:	2b12      	cmp	r3, #18
 80026c0:	d82a      	bhi.n	8002718 <HAL_GPIO_Init+0xcc>
 80026c2:	2b12      	cmp	r3, #18
 80026c4:	d859      	bhi.n	800277a <HAL_GPIO_Init+0x12e>
 80026c6:	a201      	add	r2, pc, #4	; (adr r2, 80026cc <HAL_GPIO_Init+0x80>)
 80026c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026cc:	08002747 	.word	0x08002747
 80026d0:	08002721 	.word	0x08002721
 80026d4:	08002733 	.word	0x08002733
 80026d8:	08002775 	.word	0x08002775
 80026dc:	0800277b 	.word	0x0800277b
 80026e0:	0800277b 	.word	0x0800277b
 80026e4:	0800277b 	.word	0x0800277b
 80026e8:	0800277b 	.word	0x0800277b
 80026ec:	0800277b 	.word	0x0800277b
 80026f0:	0800277b 	.word	0x0800277b
 80026f4:	0800277b 	.word	0x0800277b
 80026f8:	0800277b 	.word	0x0800277b
 80026fc:	0800277b 	.word	0x0800277b
 8002700:	0800277b 	.word	0x0800277b
 8002704:	0800277b 	.word	0x0800277b
 8002708:	0800277b 	.word	0x0800277b
 800270c:	0800277b 	.word	0x0800277b
 8002710:	08002729 	.word	0x08002729
 8002714:	0800273d 	.word	0x0800273d
 8002718:	4a79      	ldr	r2, [pc, #484]	; (8002900 <HAL_GPIO_Init+0x2b4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d013      	beq.n	8002746 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800271e:	e02c      	b.n	800277a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	623b      	str	r3, [r7, #32]
          break;
 8002726:	e029      	b.n	800277c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	3304      	adds	r3, #4
 800272e:	623b      	str	r3, [r7, #32]
          break;
 8002730:	e024      	b.n	800277c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	3308      	adds	r3, #8
 8002738:	623b      	str	r3, [r7, #32]
          break;
 800273a:	e01f      	b.n	800277c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	330c      	adds	r3, #12
 8002742:	623b      	str	r3, [r7, #32]
          break;
 8002744:	e01a      	b.n	800277c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d102      	bne.n	8002754 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800274e:	2304      	movs	r3, #4
 8002750:	623b      	str	r3, [r7, #32]
          break;
 8002752:	e013      	b.n	800277c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d105      	bne.n	8002768 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800275c:	2308      	movs	r3, #8
 800275e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	611a      	str	r2, [r3, #16]
          break;
 8002766:	e009      	b.n	800277c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002768:	2308      	movs	r3, #8
 800276a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	615a      	str	r2, [r3, #20]
          break;
 8002772:	e003      	b.n	800277c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002774:	2300      	movs	r3, #0
 8002776:	623b      	str	r3, [r7, #32]
          break;
 8002778:	e000      	b.n	800277c <HAL_GPIO_Init+0x130>
          break;
 800277a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	2bff      	cmp	r3, #255	; 0xff
 8002780:	d801      	bhi.n	8002786 <HAL_GPIO_Init+0x13a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	e001      	b.n	800278a <HAL_GPIO_Init+0x13e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3304      	adds	r3, #4
 800278a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2bff      	cmp	r3, #255	; 0xff
 8002790:	d802      	bhi.n	8002798 <HAL_GPIO_Init+0x14c>
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	e002      	b.n	800279e <HAL_GPIO_Init+0x152>
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	3b08      	subs	r3, #8
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	210f      	movs	r1, #15
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	401a      	ands	r2, r3
 80027b0:	6a39      	ldr	r1, [r7, #32]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	fa01 f303 	lsl.w	r3, r1, r3
 80027b8:	431a      	orrs	r2, r3
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 80b1 	beq.w	800292e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027cc:	4b4d      	ldr	r3, [pc, #308]	; (8002904 <HAL_GPIO_Init+0x2b8>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	4a4c      	ldr	r2, [pc, #304]	; (8002904 <HAL_GPIO_Init+0x2b8>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6193      	str	r3, [r2, #24]
 80027d8:	4b4a      	ldr	r3, [pc, #296]	; (8002904 <HAL_GPIO_Init+0x2b8>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027e4:	4a48      	ldr	r2, [pc, #288]	; (8002908 <HAL_GPIO_Init+0x2bc>)
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	089b      	lsrs	r3, r3, #2
 80027ea:	3302      	adds	r3, #2
 80027ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	220f      	movs	r2, #15
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4013      	ands	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a40      	ldr	r2, [pc, #256]	; (800290c <HAL_GPIO_Init+0x2c0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d013      	beq.n	8002838 <HAL_GPIO_Init+0x1ec>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a3f      	ldr	r2, [pc, #252]	; (8002910 <HAL_GPIO_Init+0x2c4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d00d      	beq.n	8002834 <HAL_GPIO_Init+0x1e8>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a3e      	ldr	r2, [pc, #248]	; (8002914 <HAL_GPIO_Init+0x2c8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d007      	beq.n	8002830 <HAL_GPIO_Init+0x1e4>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a3d      	ldr	r2, [pc, #244]	; (8002918 <HAL_GPIO_Init+0x2cc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d101      	bne.n	800282c <HAL_GPIO_Init+0x1e0>
 8002828:	2303      	movs	r3, #3
 800282a:	e006      	b.n	800283a <HAL_GPIO_Init+0x1ee>
 800282c:	2304      	movs	r3, #4
 800282e:	e004      	b.n	800283a <HAL_GPIO_Init+0x1ee>
 8002830:	2302      	movs	r3, #2
 8002832:	e002      	b.n	800283a <HAL_GPIO_Init+0x1ee>
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <HAL_GPIO_Init+0x1ee>
 8002838:	2300      	movs	r3, #0
 800283a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283c:	f002 0203 	and.w	r2, r2, #3
 8002840:	0092      	lsls	r2, r2, #2
 8002842:	4093      	lsls	r3, r2
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800284a:	492f      	ldr	r1, [pc, #188]	; (8002908 <HAL_GPIO_Init+0x2bc>)
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	3302      	adds	r3, #2
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d006      	beq.n	8002872 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002864:	4b2d      	ldr	r3, [pc, #180]	; (800291c <HAL_GPIO_Init+0x2d0>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	492c      	ldr	r1, [pc, #176]	; (800291c <HAL_GPIO_Init+0x2d0>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]
 8002870:	e006      	b.n	8002880 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002872:	4b2a      	ldr	r3, [pc, #168]	; (800291c <HAL_GPIO_Init+0x2d0>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	43db      	mvns	r3, r3
 800287a:	4928      	ldr	r1, [pc, #160]	; (800291c <HAL_GPIO_Init+0x2d0>)
 800287c:	4013      	ands	r3, r2
 800287e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d006      	beq.n	800289a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800288c:	4b23      	ldr	r3, [pc, #140]	; (800291c <HAL_GPIO_Init+0x2d0>)
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4922      	ldr	r1, [pc, #136]	; (800291c <HAL_GPIO_Init+0x2d0>)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
 8002898:	e006      	b.n	80028a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800289a:	4b20      	ldr	r3, [pc, #128]	; (800291c <HAL_GPIO_Init+0x2d0>)
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	491e      	ldr	r1, [pc, #120]	; (800291c <HAL_GPIO_Init+0x2d0>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d006      	beq.n	80028c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028b4:	4b19      	ldr	r3, [pc, #100]	; (800291c <HAL_GPIO_Init+0x2d0>)
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	4918      	ldr	r1, [pc, #96]	; (800291c <HAL_GPIO_Init+0x2d0>)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	608b      	str	r3, [r1, #8]
 80028c0:	e006      	b.n	80028d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028c2:	4b16      	ldr	r3, [pc, #88]	; (800291c <HAL_GPIO_Init+0x2d0>)
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	4914      	ldr	r1, [pc, #80]	; (800291c <HAL_GPIO_Init+0x2d0>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d021      	beq.n	8002920 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028dc:	4b0f      	ldr	r3, [pc, #60]	; (800291c <HAL_GPIO_Init+0x2d0>)
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	490e      	ldr	r1, [pc, #56]	; (800291c <HAL_GPIO_Init+0x2d0>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60cb      	str	r3, [r1, #12]
 80028e8:	e021      	b.n	800292e <HAL_GPIO_Init+0x2e2>
 80028ea:	bf00      	nop
 80028ec:	10320000 	.word	0x10320000
 80028f0:	10310000 	.word	0x10310000
 80028f4:	10220000 	.word	0x10220000
 80028f8:	10210000 	.word	0x10210000
 80028fc:	10120000 	.word	0x10120000
 8002900:	10110000 	.word	0x10110000
 8002904:	40021000 	.word	0x40021000
 8002908:	40010000 	.word	0x40010000
 800290c:	40010800 	.word	0x40010800
 8002910:	40010c00 	.word	0x40010c00
 8002914:	40011000 	.word	0x40011000
 8002918:	40011400 	.word	0x40011400
 800291c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_GPIO_Init+0x304>)
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	43db      	mvns	r3, r3
 8002928:	4909      	ldr	r1, [pc, #36]	; (8002950 <HAL_GPIO_Init+0x304>)
 800292a:	4013      	ands	r3, r2
 800292c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	3301      	adds	r3, #1
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	fa22 f303 	lsr.w	r3, r2, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	f47f ae8e 	bne.w	8002660 <HAL_GPIO_Init+0x14>
  }
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	372c      	adds	r7, #44	; 0x2c
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	40010400 	.word	0x40010400

08002954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]
 8002960:	4613      	mov	r3, r2
 8002962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002964:	787b      	ldrb	r3, [r7, #1]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002970:	e003      	b.n	800297a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	041a      	lsls	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	611a      	str	r2, [r3, #16]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e12b      	b.n	8002bee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff fade 	bl	8001f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2224      	movs	r2, #36	; 0x24
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0201 	bic.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029e8:	f001 f816 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 80029ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4a81      	ldr	r2, [pc, #516]	; (8002bf8 <HAL_I2C_Init+0x274>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d807      	bhi.n	8002a08 <HAL_I2C_Init+0x84>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4a80      	ldr	r2, [pc, #512]	; (8002bfc <HAL_I2C_Init+0x278>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	bf94      	ite	ls
 8002a00:	2301      	movls	r3, #1
 8002a02:	2300      	movhi	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	e006      	b.n	8002a16 <HAL_I2C_Init+0x92>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4a7d      	ldr	r2, [pc, #500]	; (8002c00 <HAL_I2C_Init+0x27c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	bf94      	ite	ls
 8002a10:	2301      	movls	r3, #1
 8002a12:	2300      	movhi	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e0e7      	b.n	8002bee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4a78      	ldr	r2, [pc, #480]	; (8002c04 <HAL_I2C_Init+0x280>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0c9b      	lsrs	r3, r3, #18
 8002a28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a6a      	ldr	r2, [pc, #424]	; (8002bf8 <HAL_I2C_Init+0x274>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d802      	bhi.n	8002a58 <HAL_I2C_Init+0xd4>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	3301      	adds	r3, #1
 8002a56:	e009      	b.n	8002a6c <HAL_I2C_Init+0xe8>
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a5e:	fb02 f303 	mul.w	r3, r2, r3
 8002a62:	4a69      	ldr	r2, [pc, #420]	; (8002c08 <HAL_I2C_Init+0x284>)
 8002a64:	fba2 2303 	umull	r2, r3, r2, r3
 8002a68:	099b      	lsrs	r3, r3, #6
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	430b      	orrs	r3, r1
 8002a72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	495c      	ldr	r1, [pc, #368]	; (8002bf8 <HAL_I2C_Init+0x274>)
 8002a88:	428b      	cmp	r3, r1
 8002a8a:	d819      	bhi.n	8002ac0 <HAL_I2C_Init+0x13c>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1e59      	subs	r1, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a9a:	1c59      	adds	r1, r3, #1
 8002a9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002aa0:	400b      	ands	r3, r1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HAL_I2C_Init+0x138>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1e59      	subs	r1, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aba:	e051      	b.n	8002b60 <HAL_I2C_Init+0x1dc>
 8002abc:	2304      	movs	r3, #4
 8002abe:	e04f      	b.n	8002b60 <HAL_I2C_Init+0x1dc>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d111      	bne.n	8002aec <HAL_I2C_Init+0x168>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1e58      	subs	r0, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	440b      	add	r3, r1
 8002ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ada:	3301      	adds	r3, #1
 8002adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf0c      	ite	eq
 8002ae4:	2301      	moveq	r3, #1
 8002ae6:	2300      	movne	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	e012      	b.n	8002b12 <HAL_I2C_Init+0x18e>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1e58      	subs	r0, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6859      	ldr	r1, [r3, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	0099      	lsls	r1, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b02:	3301      	adds	r3, #1
 8002b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bf0c      	ite	eq
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	2300      	movne	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Init+0x196>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e022      	b.n	8002b60 <HAL_I2C_Init+0x1dc>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10e      	bne.n	8002b40 <HAL_I2C_Init+0x1bc>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1e58      	subs	r0, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6859      	ldr	r1, [r3, #4]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	440b      	add	r3, r1
 8002b30:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b34:	3301      	adds	r3, #1
 8002b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b3e:	e00f      	b.n	8002b60 <HAL_I2C_Init+0x1dc>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	1e58      	subs	r0, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6859      	ldr	r1, [r3, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	0099      	lsls	r1, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b56:	3301      	adds	r3, #1
 8002b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	6809      	ldr	r1, [r1, #0]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69da      	ldr	r2, [r3, #28]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6911      	ldr	r1, [r2, #16]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	68d2      	ldr	r2, [r2, #12]
 8002b9a:	4311      	orrs	r1, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	000186a0 	.word	0x000186a0
 8002bfc:	001e847f 	.word	0x001e847f
 8002c00:	003d08ff 	.word	0x003d08ff
 8002c04:	431bde83 	.word	0x431bde83
 8002c08:	10624dd3 	.word	0x10624dd3

08002c0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af02      	add	r7, sp, #8
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	4608      	mov	r0, r1
 8002c16:	4611      	mov	r1, r2
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	817b      	strh	r3, [r7, #10]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	813b      	strh	r3, [r7, #8]
 8002c22:	4613      	mov	r3, r2
 8002c24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c26:	f7ff fbb9 	bl	800239c <HAL_GetTick>
 8002c2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	f040 80d9 	bne.w	8002dec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	2319      	movs	r3, #25
 8002c40:	2201      	movs	r2, #1
 8002c42:	496d      	ldr	r1, [pc, #436]	; (8002df8 <HAL_I2C_Mem_Write+0x1ec>)
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 f971 	bl	8002f2c <I2C_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c50:	2302      	movs	r3, #2
 8002c52:	e0cc      	b.n	8002dee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_I2C_Mem_Write+0x56>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e0c5      	b.n	8002dee <HAL_I2C_Mem_Write+0x1e2>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d007      	beq.n	8002c88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2221      	movs	r2, #33	; 0x21
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2240      	movs	r2, #64	; 0x40
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a3a      	ldr	r2, [r7, #32]
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4a4d      	ldr	r2, [pc, #308]	; (8002dfc <HAL_I2C_Mem_Write+0x1f0>)
 8002cc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cca:	88f8      	ldrh	r0, [r7, #6]
 8002ccc:	893a      	ldrh	r2, [r7, #8]
 8002cce:	8979      	ldrh	r1, [r7, #10]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	9301      	str	r3, [sp, #4]
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	4603      	mov	r3, r0
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f890 	bl	8002e00 <I2C_RequestMemoryWrite>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d052      	beq.n	8002d8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e081      	b.n	8002dee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 f9f2 	bl	80030d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00d      	beq.n	8002d16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d107      	bne.n	8002d12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e06b      	b.n	8002dee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	781a      	ldrb	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d11b      	bne.n	8002d8c <HAL_I2C_Mem_Write+0x180>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d017      	beq.n	8002d8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	781a      	ldrb	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1aa      	bne.n	8002cea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f9de 	bl	800315a <I2C_WaitOnBTFFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00d      	beq.n	8002dc0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d107      	bne.n	8002dbc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e016      	b.n	8002dee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	e000      	b.n	8002dee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002dec:	2302      	movs	r3, #2
  }
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	00100002 	.word	0x00100002
 8002dfc:	ffff0000 	.word	0xffff0000

08002e00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	4608      	mov	r0, r1
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4603      	mov	r3, r0
 8002e10:	817b      	strh	r3, [r7, #10]
 8002e12:	460b      	mov	r3, r1
 8002e14:	813b      	strh	r3, [r7, #8]
 8002e16:	4613      	mov	r3, r2
 8002e18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f878 	bl	8002f2c <I2C_WaitOnFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00d      	beq.n	8002e5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e50:	d103      	bne.n	8002e5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e05f      	b.n	8002f1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e5e:	897b      	ldrh	r3, [r7, #10]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	6a3a      	ldr	r2, [r7, #32]
 8002e72:	492d      	ldr	r1, [pc, #180]	; (8002f28 <I2C_RequestMemoryWrite+0x128>)
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f8b0 	bl	8002fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e04c      	b.n	8002f1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9c:	6a39      	ldr	r1, [r7, #32]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f91a 	bl	80030d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d107      	bne.n	8002ec2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e02b      	b.n	8002f1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d105      	bne.n	8002ed8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ecc:	893b      	ldrh	r3, [r7, #8]
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	611a      	str	r2, [r3, #16]
 8002ed6:	e021      	b.n	8002f1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ed8:	893b      	ldrh	r3, [r7, #8]
 8002eda:	0a1b      	lsrs	r3, r3, #8
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee8:	6a39      	ldr	r1, [r7, #32]
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f8f4 	bl	80030d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00d      	beq.n	8002f12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d107      	bne.n	8002f0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e005      	b.n	8002f1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f12:	893b      	ldrh	r3, [r7, #8]
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	00010002 	.word	0x00010002

08002f2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f3c:	e025      	b.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d021      	beq.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f46:	f7ff fa29 	bl	800239c <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d302      	bcc.n	8002f5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d116      	bne.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f043 0220 	orr.w	r2, r3, #32
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e023      	b.n	8002fd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	0c1b      	lsrs	r3, r3, #16
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d10d      	bne.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bf0c      	ite	eq
 8002fa6:	2301      	moveq	r3, #1
 8002fa8:	2300      	movne	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	e00c      	b.n	8002fca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bf0c      	ite	eq
 8002fc2:	2301      	moveq	r3, #1
 8002fc4:	2300      	movne	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d0b6      	beq.n	8002f3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
 8002fe6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fe8:	e051      	b.n	800308e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff8:	d123      	bne.n	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003008:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003012:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f043 0204 	orr.w	r2, r3, #4
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e046      	b.n	80030d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d021      	beq.n	800308e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304a:	f7ff f9a7 	bl	800239c <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	429a      	cmp	r2, r3
 8003058:	d302      	bcc.n	8003060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d116      	bne.n	800308e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f043 0220 	orr.w	r2, r3, #32
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e020      	b.n	80030d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	0c1b      	lsrs	r3, r3, #16
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d10c      	bne.n	80030b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	43da      	mvns	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4013      	ands	r3, r2
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	bf14      	ite	ne
 80030aa:	2301      	movne	r3, #1
 80030ac:	2300      	moveq	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	e00b      	b.n	80030ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	43da      	mvns	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	4013      	ands	r3, r2
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf14      	ite	ne
 80030c4:	2301      	movne	r3, #1
 80030c6:	2300      	moveq	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d18d      	bne.n	8002fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030e4:	e02d      	b.n	8003142 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f878 	bl	80031dc <I2C_IsAcknowledgeFailed>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e02d      	b.n	8003152 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fc:	d021      	beq.n	8003142 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fe:	f7ff f94d 	bl	800239c <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	429a      	cmp	r2, r3
 800310c:	d302      	bcc.n	8003114 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d116      	bne.n	8003142 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f043 0220 	orr.w	r2, r3, #32
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e007      	b.n	8003152 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314c:	2b80      	cmp	r3, #128	; 0x80
 800314e:	d1ca      	bne.n	80030e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003166:	e02d      	b.n	80031c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f837 	bl	80031dc <I2C_IsAcknowledgeFailed>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e02d      	b.n	80031d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317e:	d021      	beq.n	80031c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003180:	f7ff f90c 	bl	800239c <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	429a      	cmp	r2, r3
 800318e:	d302      	bcc.n	8003196 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d116      	bne.n	80031c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	f043 0220 	orr.w	r2, r3, #32
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e007      	b.n	80031d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d1ca      	bne.n	8003168 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f2:	d11b      	bne.n	800322c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	f043 0204 	orr.w	r2, r3, #4
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003244:	4b09      	ldr	r3, [pc, #36]	; (800326c <HAL_PWR_EnterSLEEPMode+0x34>)
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	4a08      	ldr	r2, [pc, #32]	; (800326c <HAL_PWR_EnterSLEEPMode+0x34>)
 800324a:	f023 0304 	bic.w	r3, r3, #4
 800324e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003256:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8003258:	e002      	b.n	8003260 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800325a:	bf40      	sev
    __WFE();
 800325c:	bf20      	wfe
    __WFE();
 800325e:	bf20      	wfe
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e272      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8087 	beq.w	800339e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003290:	4b92      	ldr	r3, [pc, #584]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b04      	cmp	r3, #4
 800329a:	d00c      	beq.n	80032b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800329c:	4b8f      	ldr	r3, [pc, #572]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d112      	bne.n	80032ce <HAL_RCC_OscConfig+0x5e>
 80032a8:	4b8c      	ldr	r3, [pc, #560]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b4:	d10b      	bne.n	80032ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b6:	4b89      	ldr	r3, [pc, #548]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d06c      	beq.n	800339c <HAL_RCC_OscConfig+0x12c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d168      	bne.n	800339c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e24c      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d6:	d106      	bne.n	80032e6 <HAL_RCC_OscConfig+0x76>
 80032d8:	4b80      	ldr	r3, [pc, #512]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a7f      	ldr	r2, [pc, #508]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	e02e      	b.n	8003344 <HAL_RCC_OscConfig+0xd4>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10c      	bne.n	8003308 <HAL_RCC_OscConfig+0x98>
 80032ee:	4b7b      	ldr	r3, [pc, #492]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a7a      	ldr	r2, [pc, #488]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	4b78      	ldr	r3, [pc, #480]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a77      	ldr	r2, [pc, #476]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e01d      	b.n	8003344 <HAL_RCC_OscConfig+0xd4>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003310:	d10c      	bne.n	800332c <HAL_RCC_OscConfig+0xbc>
 8003312:	4b72      	ldr	r3, [pc, #456]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a71      	ldr	r2, [pc, #452]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	4b6f      	ldr	r3, [pc, #444]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a6e      	ldr	r2, [pc, #440]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e00b      	b.n	8003344 <HAL_RCC_OscConfig+0xd4>
 800332c:	4b6b      	ldr	r3, [pc, #428]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a6a      	ldr	r2, [pc, #424]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	4b68      	ldr	r3, [pc, #416]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a67      	ldr	r2, [pc, #412]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 800333e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003342:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d013      	beq.n	8003374 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7ff f826 	bl	800239c <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003354:	f7ff f822 	bl	800239c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	; 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e200      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	4b5d      	ldr	r3, [pc, #372]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0xe4>
 8003372:	e014      	b.n	800339e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7ff f812 	bl	800239c <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800337c:	f7ff f80e 	bl	800239c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	; 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e1ec      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338e:	4b53      	ldr	r3, [pc, #332]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x10c>
 800339a:	e000      	b.n	800339e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d063      	beq.n	8003472 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033aa:	4b4c      	ldr	r3, [pc, #304]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00b      	beq.n	80033ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033b6:	4b49      	ldr	r3, [pc, #292]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d11c      	bne.n	80033fc <HAL_RCC_OscConfig+0x18c>
 80033c2:	4b46      	ldr	r3, [pc, #280]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d116      	bne.n	80033fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ce:	4b43      	ldr	r3, [pc, #268]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_RCC_OscConfig+0x176>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d001      	beq.n	80033e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e1c0      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e6:	4b3d      	ldr	r3, [pc, #244]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4939      	ldr	r1, [pc, #228]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fa:	e03a      	b.n	8003472 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d020      	beq.n	8003446 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003404:	4b36      	ldr	r3, [pc, #216]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340a:	f7fe ffc7 	bl	800239c <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003412:	f7fe ffc3 	bl	800239c <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e1a1      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003424:	4b2d      	ldr	r3, [pc, #180]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003430:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4927      	ldr	r1, [pc, #156]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003440:	4313      	orrs	r3, r2
 8003442:	600b      	str	r3, [r1, #0]
 8003444:	e015      	b.n	8003472 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003446:	4b26      	ldr	r3, [pc, #152]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7fe ffa6 	bl	800239c <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003454:	f7fe ffa2 	bl	800239c <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e180      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d03a      	beq.n	80034f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d019      	beq.n	80034ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003486:	4b17      	ldr	r3, [pc, #92]	; (80034e4 <HAL_RCC_OscConfig+0x274>)
 8003488:	2201      	movs	r2, #1
 800348a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348c:	f7fe ff86 	bl	800239c <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003494:	f7fe ff82 	bl	800239c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e160      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a6:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034b2:	2001      	movs	r0, #1
 80034b4:	f000 fad8 	bl	8003a68 <RCC_Delay>
 80034b8:	e01c      	b.n	80034f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ba:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <HAL_RCC_OscConfig+0x274>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c0:	f7fe ff6c 	bl	800239c <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c6:	e00f      	b.n	80034e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c8:	f7fe ff68 	bl	800239c <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d908      	bls.n	80034e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e146      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	42420000 	.word	0x42420000
 80034e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e8:	4b92      	ldr	r3, [pc, #584]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1e9      	bne.n	80034c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80a6 	beq.w	800364e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003502:	2300      	movs	r3, #0
 8003504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003506:	4b8b      	ldr	r3, [pc, #556]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10d      	bne.n	800352e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003512:	4b88      	ldr	r3, [pc, #544]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	4a87      	ldr	r2, [pc, #540]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800351c:	61d3      	str	r3, [r2, #28]
 800351e:	4b85      	ldr	r3, [pc, #532]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800352a:	2301      	movs	r3, #1
 800352c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352e:	4b82      	ldr	r3, [pc, #520]	; (8003738 <HAL_RCC_OscConfig+0x4c8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d118      	bne.n	800356c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800353a:	4b7f      	ldr	r3, [pc, #508]	; (8003738 <HAL_RCC_OscConfig+0x4c8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a7e      	ldr	r2, [pc, #504]	; (8003738 <HAL_RCC_OscConfig+0x4c8>)
 8003540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003546:	f7fe ff29 	bl	800239c <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354e:	f7fe ff25 	bl	800239c <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b64      	cmp	r3, #100	; 0x64
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e103      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	4b75      	ldr	r3, [pc, #468]	; (8003738 <HAL_RCC_OscConfig+0x4c8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d106      	bne.n	8003582 <HAL_RCC_OscConfig+0x312>
 8003574:	4b6f      	ldr	r3, [pc, #444]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	4a6e      	ldr	r2, [pc, #440]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800357a:	f043 0301 	orr.w	r3, r3, #1
 800357e:	6213      	str	r3, [r2, #32]
 8003580:	e02d      	b.n	80035de <HAL_RCC_OscConfig+0x36e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10c      	bne.n	80035a4 <HAL_RCC_OscConfig+0x334>
 800358a:	4b6a      	ldr	r3, [pc, #424]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	4a69      	ldr	r2, [pc, #420]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	6213      	str	r3, [r2, #32]
 8003596:	4b67      	ldr	r3, [pc, #412]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4a66      	ldr	r2, [pc, #408]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800359c:	f023 0304 	bic.w	r3, r3, #4
 80035a0:	6213      	str	r3, [r2, #32]
 80035a2:	e01c      	b.n	80035de <HAL_RCC_OscConfig+0x36e>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b05      	cmp	r3, #5
 80035aa:	d10c      	bne.n	80035c6 <HAL_RCC_OscConfig+0x356>
 80035ac:	4b61      	ldr	r3, [pc, #388]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	4a60      	ldr	r2, [pc, #384]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035b2:	f043 0304 	orr.w	r3, r3, #4
 80035b6:	6213      	str	r3, [r2, #32]
 80035b8:	4b5e      	ldr	r3, [pc, #376]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	4a5d      	ldr	r2, [pc, #372]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	6213      	str	r3, [r2, #32]
 80035c4:	e00b      	b.n	80035de <HAL_RCC_OscConfig+0x36e>
 80035c6:	4b5b      	ldr	r3, [pc, #364]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	4a5a      	ldr	r2, [pc, #360]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	f023 0301 	bic.w	r3, r3, #1
 80035d0:	6213      	str	r3, [r2, #32]
 80035d2:	4b58      	ldr	r3, [pc, #352]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	4a57      	ldr	r2, [pc, #348]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	f023 0304 	bic.w	r3, r3, #4
 80035dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d015      	beq.n	8003612 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e6:	f7fe fed9 	bl	800239c <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ec:	e00a      	b.n	8003604 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ee:	f7fe fed5 	bl	800239c <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e0b1      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003604:	4b4b      	ldr	r3, [pc, #300]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0ee      	beq.n	80035ee <HAL_RCC_OscConfig+0x37e>
 8003610:	e014      	b.n	800363c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003612:	f7fe fec3 	bl	800239c <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003618:	e00a      	b.n	8003630 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361a:	f7fe febf 	bl	800239c <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f241 3288 	movw	r2, #5000	; 0x1388
 8003628:	4293      	cmp	r3, r2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e09b      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003630:	4b40      	ldr	r3, [pc, #256]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1ee      	bne.n	800361a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800363c:	7dfb      	ldrb	r3, [r7, #23]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d105      	bne.n	800364e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003642:	4b3c      	ldr	r3, [pc, #240]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	4a3b      	ldr	r2, [pc, #236]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800364c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 8087 	beq.w	8003766 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003658:	4b36      	ldr	r3, [pc, #216]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 030c 	and.w	r3, r3, #12
 8003660:	2b08      	cmp	r3, #8
 8003662:	d061      	beq.n	8003728 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d146      	bne.n	80036fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366c:	4b33      	ldr	r3, [pc, #204]	; (800373c <HAL_RCC_OscConfig+0x4cc>)
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003672:	f7fe fe93 	bl	800239c <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367a:	f7fe fe8f 	bl	800239c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e06d      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368c:	4b29      	ldr	r3, [pc, #164]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f0      	bne.n	800367a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a0:	d108      	bne.n	80036b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036a2:	4b24      	ldr	r3, [pc, #144]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	4921      	ldr	r1, [pc, #132]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b4:	4b1f      	ldr	r3, [pc, #124]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a19      	ldr	r1, [r3, #32]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	430b      	orrs	r3, r1
 80036c6:	491b      	ldr	r1, [pc, #108]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <HAL_RCC_OscConfig+0x4cc>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d2:	f7fe fe63 	bl	800239c <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036da:	f7fe fe5f 	bl	800239c <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e03d      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036ec:	4b11      	ldr	r3, [pc, #68]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x46a>
 80036f8:	e035      	b.n	8003766 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fa:	4b10      	ldr	r3, [pc, #64]	; (800373c <HAL_RCC_OscConfig+0x4cc>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7fe fe4c 	bl	800239c <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003708:	f7fe fe48 	bl	800239c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e026      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800371a:	4b06      	ldr	r3, [pc, #24]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x498>
 8003726:	e01e      	b.n	8003766 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d107      	bne.n	8003740 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e019      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
 8003734:	40021000 	.word	0x40021000
 8003738:	40007000 	.word	0x40007000
 800373c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_OscConfig+0x500>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	429a      	cmp	r2, r3
 8003752:	d106      	bne.n	8003762 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375e:	429a      	cmp	r2, r3
 8003760:	d001      	beq.n	8003766 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000

08003774 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0d0      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003788:	4b6a      	ldr	r3, [pc, #424]	; (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d910      	bls.n	80037b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003796:	4b67      	ldr	r3, [pc, #412]	; (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 0207 	bic.w	r2, r3, #7
 800379e:	4965      	ldr	r1, [pc, #404]	; (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b63      	ldr	r3, [pc, #396]	; (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0b8      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d020      	beq.n	8003806 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d0:	4b59      	ldr	r3, [pc, #356]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4a58      	ldr	r2, [pc, #352]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80037d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e8:	4b53      	ldr	r3, [pc, #332]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4a52      	ldr	r2, [pc, #328]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f4:	4b50      	ldr	r3, [pc, #320]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	494d      	ldr	r1, [pc, #308]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	4313      	orrs	r3, r2
 8003804:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d040      	beq.n	8003894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d107      	bne.n	800382a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b47      	ldr	r3, [pc, #284]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d115      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e07f      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d107      	bne.n	8003842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003832:	4b41      	ldr	r3, [pc, #260]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e073      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003842:	4b3d      	ldr	r3, [pc, #244]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e06b      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003852:	4b39      	ldr	r3, [pc, #228]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f023 0203 	bic.w	r2, r3, #3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4936      	ldr	r1, [pc, #216]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003864:	f7fe fd9a 	bl	800239c <HAL_GetTick>
 8003868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386a:	e00a      	b.n	8003882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800386c:	f7fe fd96 	bl	800239c <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	; 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e053      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	4b2d      	ldr	r3, [pc, #180]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f003 020c 	and.w	r2, r3, #12
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	429a      	cmp	r2, r3
 8003892:	d1eb      	bne.n	800386c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003894:	4b27      	ldr	r3, [pc, #156]	; (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d210      	bcs.n	80038c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a2:	4b24      	ldr	r3, [pc, #144]	; (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f023 0207 	bic.w	r2, r3, #7
 80038aa:	4922      	ldr	r1, [pc, #136]	; (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b20      	ldr	r3, [pc, #128]	; (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e032      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d0:	4b19      	ldr	r3, [pc, #100]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4916      	ldr	r1, [pc, #88]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038ee:	4b12      	ldr	r3, [pc, #72]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	490e      	ldr	r1, [pc, #56]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003902:	f000 f821 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 8003906:	4602      	mov	r2, r0
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	490a      	ldr	r1, [pc, #40]	; (800393c <HAL_RCC_ClockConfig+0x1c8>)
 8003914:	5ccb      	ldrb	r3, [r1, r3]
 8003916:	fa22 f303 	lsr.w	r3, r2, r3
 800391a:	4a09      	ldr	r2, [pc, #36]	; (8003940 <HAL_RCC_ClockConfig+0x1cc>)
 800391c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800391e:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_RCC_ClockConfig+0x1d0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fe fcf8 	bl	8002318 <HAL_InitTick>

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40022000 	.word	0x40022000
 8003938:	40021000 	.word	0x40021000
 800393c:	08007d7c 	.word	0x08007d7c
 8003940:	20000014 	.word	0x20000014
 8003944:	20000018 	.word	0x20000018

08003948 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003948:	b490      	push	{r4, r7}
 800394a:	b08a      	sub	sp, #40	; 0x28
 800394c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800394e:	4b29      	ldr	r3, [pc, #164]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003950:	1d3c      	adds	r4, r7, #4
 8003952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003958:	f240 2301 	movw	r3, #513	; 0x201
 800395c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	2300      	movs	r3, #0
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	2300      	movs	r3, #0
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003972:	4b21      	ldr	r3, [pc, #132]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b04      	cmp	r3, #4
 8003980:	d002      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0x40>
 8003982:	2b08      	cmp	r3, #8
 8003984:	d003      	beq.n	800398e <HAL_RCC_GetSysClockFreq+0x46>
 8003986:	e02b      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003988:	4b1c      	ldr	r3, [pc, #112]	; (80039fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800398a:	623b      	str	r3, [r7, #32]
      break;
 800398c:	e02b      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	0c9b      	lsrs	r3, r3, #18
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	3328      	adds	r3, #40	; 0x28
 8003998:	443b      	add	r3, r7
 800399a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800399e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d012      	beq.n	80039d0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039aa:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	0c5b      	lsrs	r3, r3, #17
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	3328      	adds	r3, #40	; 0x28
 80039b6:	443b      	add	r3, r7
 80039b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	4a0e      	ldr	r2, [pc, #56]	; (80039fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80039c2:	fb03 f202 	mul.w	r2, r3, r2
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
 80039ce:	e004      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	4a0b      	ldr	r2, [pc, #44]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039d4:	fb02 f303 	mul.w	r3, r2, r3
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	623b      	str	r3, [r7, #32]
      break;
 80039de:	e002      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80039e2:	623b      	str	r3, [r7, #32]
      break;
 80039e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e6:	6a3b      	ldr	r3, [r7, #32]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3728      	adds	r7, #40	; 0x28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc90      	pop	{r4, r7}
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	08007600 	.word	0x08007600
 80039f8:	40021000 	.word	0x40021000
 80039fc:	007a1200 	.word	0x007a1200
 8003a00:	003d0900 	.word	0x003d0900

08003a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a08:	4b02      	ldr	r3, [pc, #8]	; (8003a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	20000014 	.word	0x20000014

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a1c:	f7ff fff2 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4903      	ldr	r1, [pc, #12]	; (8003a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	08007d8c 	.word	0x08007d8c

08003a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a44:	f7ff ffde 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	0adb      	lsrs	r3, r3, #11
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	4903      	ldr	r1, [pc, #12]	; (8003a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a56:	5ccb      	ldrb	r3, [r1, r3]
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000
 8003a64:	08007d8c 	.word	0x08007d8c

08003a68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <RCC_Delay+0x34>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <RCC_Delay+0x38>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	0a5b      	lsrs	r3, r3, #9
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a84:	bf00      	nop
  }
  while (Delay --);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1e5a      	subs	r2, r3, #1
 8003a8a:	60fa      	str	r2, [r7, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f9      	bne.n	8003a84 <RCC_Delay+0x1c>
}
 8003a90:	bf00      	nop
 8003a92:	bf00      	nop
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr
 8003a9c:	20000014 	.word	0x20000014
 8003aa0:	10624dd3 	.word	0x10624dd3

08003aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e041      	b.n	8003b3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fe fa8c 	bl	8001fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f000 fa70 	bl	8003fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d001      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e03a      	b.n	8003bd2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a18      	ldr	r2, [pc, #96]	; (8003bdc <HAL_TIM_Base_Start_IT+0x98>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00e      	beq.n	8003b9c <HAL_TIM_Base_Start_IT+0x58>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b86:	d009      	beq.n	8003b9c <HAL_TIM_Base_Start_IT+0x58>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d004      	beq.n	8003b9c <HAL_TIM_Base_Start_IT+0x58>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d111      	bne.n	8003bc0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b06      	cmp	r3, #6
 8003bac:	d010      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0201 	orr.w	r2, r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bbe:	e007      	b.n	8003bd0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr
 8003bdc:	40012c00 	.word	0x40012c00
 8003be0:	40000400 	.word	0x40000400
 8003be4:	40000800 	.word	0x40000800

08003be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d122      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d11b      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0202 	mvn.w	r2, #2
 8003c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f9b1 	bl	8003f92 <HAL_TIM_IC_CaptureCallback>
 8003c30:	e005      	b.n	8003c3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f9a4 	bl	8003f80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f9b3 	bl	8003fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d122      	bne.n	8003c98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d11b      	bne.n	8003c98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0204 	mvn.w	r2, #4
 8003c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f987 	bl	8003f92 <HAL_TIM_IC_CaptureCallback>
 8003c84:	e005      	b.n	8003c92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f97a 	bl	8003f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f989 	bl	8003fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d122      	bne.n	8003cec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d11b      	bne.n	8003cec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0208 	mvn.w	r2, #8
 8003cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f95d 	bl	8003f92 <HAL_TIM_IC_CaptureCallback>
 8003cd8:	e005      	b.n	8003ce6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f950 	bl	8003f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f95f 	bl	8003fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	2b10      	cmp	r3, #16
 8003cf8:	d122      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	2b10      	cmp	r3, #16
 8003d06:	d11b      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0210 	mvn.w	r2, #16
 8003d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2208      	movs	r2, #8
 8003d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f933 	bl	8003f92 <HAL_TIM_IC_CaptureCallback>
 8003d2c:	e005      	b.n	8003d3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f926 	bl	8003f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f935 	bl	8003fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d10e      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d107      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0201 	mvn.w	r2, #1
 8003d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fd fb12 	bl	8001390 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d76:	2b80      	cmp	r3, #128	; 0x80
 8003d78:	d10e      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d84:	2b80      	cmp	r3, #128	; 0x80
 8003d86:	d107      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fa77 	bl	8004286 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da2:	2b40      	cmp	r3, #64	; 0x40
 8003da4:	d10e      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db0:	2b40      	cmp	r3, #64	; 0x40
 8003db2:	d107      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f8f9 	bl	8003fb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b20      	cmp	r3, #32
 8003dd0:	d10e      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d107      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0220 	mvn.w	r2, #32
 8003de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fa42 	bl	8004274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003df0:	bf00      	nop
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_TIM_ConfigClockSource+0x18>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e0b3      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x180>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e48:	d03e      	beq.n	8003ec8 <HAL_TIM_ConfigClockSource+0xd0>
 8003e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e4e:	f200 8087 	bhi.w	8003f60 <HAL_TIM_ConfigClockSource+0x168>
 8003e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e56:	f000 8085 	beq.w	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5e:	d87f      	bhi.n	8003f60 <HAL_TIM_ConfigClockSource+0x168>
 8003e60:	2b70      	cmp	r3, #112	; 0x70
 8003e62:	d01a      	beq.n	8003e9a <HAL_TIM_ConfigClockSource+0xa2>
 8003e64:	2b70      	cmp	r3, #112	; 0x70
 8003e66:	d87b      	bhi.n	8003f60 <HAL_TIM_ConfigClockSource+0x168>
 8003e68:	2b60      	cmp	r3, #96	; 0x60
 8003e6a:	d050      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x116>
 8003e6c:	2b60      	cmp	r3, #96	; 0x60
 8003e6e:	d877      	bhi.n	8003f60 <HAL_TIM_ConfigClockSource+0x168>
 8003e70:	2b50      	cmp	r3, #80	; 0x50
 8003e72:	d03c      	beq.n	8003eee <HAL_TIM_ConfigClockSource+0xf6>
 8003e74:	2b50      	cmp	r3, #80	; 0x50
 8003e76:	d873      	bhi.n	8003f60 <HAL_TIM_ConfigClockSource+0x168>
 8003e78:	2b40      	cmp	r3, #64	; 0x40
 8003e7a:	d058      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0x136>
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d86f      	bhi.n	8003f60 <HAL_TIM_ConfigClockSource+0x168>
 8003e80:	2b30      	cmp	r3, #48	; 0x30
 8003e82:	d064      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0x156>
 8003e84:	2b30      	cmp	r3, #48	; 0x30
 8003e86:	d86b      	bhi.n	8003f60 <HAL_TIM_ConfigClockSource+0x168>
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	d060      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0x156>
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d867      	bhi.n	8003f60 <HAL_TIM_ConfigClockSource+0x168>
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d05c      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0x156>
 8003e94:	2b10      	cmp	r3, #16
 8003e96:	d05a      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e98:	e062      	b.n	8003f60 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6899      	ldr	r1, [r3, #8]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f000 f966 	bl	800417a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ebc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	609a      	str	r2, [r3, #8]
      break;
 8003ec6:	e04e      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	6899      	ldr	r1, [r3, #8]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f000 f94f 	bl	800417a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eea:	609a      	str	r2, [r3, #8]
      break;
 8003eec:	e03b      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6859      	ldr	r1, [r3, #4]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f000 f8c6 	bl	800408c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2150      	movs	r1, #80	; 0x50
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 f91d 	bl	8004146 <TIM_ITRx_SetConfig>
      break;
 8003f0c:	e02b      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6859      	ldr	r1, [r3, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f000 f8e4 	bl	80040e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2160      	movs	r1, #96	; 0x60
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 f90d 	bl	8004146 <TIM_ITRx_SetConfig>
      break;
 8003f2c:	e01b      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6859      	ldr	r1, [r3, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f000 f8a6 	bl	800408c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2140      	movs	r1, #64	; 0x40
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 f8fd 	bl	8004146 <TIM_ITRx_SetConfig>
      break;
 8003f4c:	e00b      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4619      	mov	r1, r3
 8003f58:	4610      	mov	r0, r2
 8003f5a:	f000 f8f4 	bl	8004146 <TIM_ITRx_SetConfig>
        break;
 8003f5e:	e002      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f60:	bf00      	nop
 8003f62:	e000      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr

08003f92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr

08003fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a29      	ldr	r2, [pc, #164]	; (8004080 <TIM_Base_SetConfig+0xb8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00b      	beq.n	8003ff8 <TIM_Base_SetConfig+0x30>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe6:	d007      	beq.n	8003ff8 <TIM_Base_SetConfig+0x30>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a26      	ldr	r2, [pc, #152]	; (8004084 <TIM_Base_SetConfig+0xbc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d003      	beq.n	8003ff8 <TIM_Base_SetConfig+0x30>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a25      	ldr	r2, [pc, #148]	; (8004088 <TIM_Base_SetConfig+0xc0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d108      	bne.n	800400a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a1c      	ldr	r2, [pc, #112]	; (8004080 <TIM_Base_SetConfig+0xb8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00b      	beq.n	800402a <TIM_Base_SetConfig+0x62>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004018:	d007      	beq.n	800402a <TIM_Base_SetConfig+0x62>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a19      	ldr	r2, [pc, #100]	; (8004084 <TIM_Base_SetConfig+0xbc>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d003      	beq.n	800402a <TIM_Base_SetConfig+0x62>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a18      	ldr	r2, [pc, #96]	; (8004088 <TIM_Base_SetConfig+0xc0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d108      	bne.n	800403c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a07      	ldr	r2, [pc, #28]	; (8004080 <TIM_Base_SetConfig+0xb8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d103      	bne.n	8004070 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	615a      	str	r2, [r3, #20]
}
 8004076:	bf00      	nop
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr
 8004080:	40012c00 	.word	0x40012c00
 8004084:	40000400 	.word	0x40000400
 8004088:	40000800 	.word	0x40000800

0800408c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	f023 0201 	bic.w	r2, r3, #1
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f023 030a 	bic.w	r3, r3, #10
 80040c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	621a      	str	r2, [r3, #32]
}
 80040de:	bf00      	nop
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	f023 0210 	bic.w	r2, r3, #16
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004112:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	031b      	lsls	r3, r3, #12
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	4313      	orrs	r3, r2
 800411c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004124:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	621a      	str	r2, [r3, #32]
}
 800413c:	bf00      	nop
 800413e:	371c      	adds	r7, #28
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr

08004146 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004146:	b480      	push	{r7}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	f043 0307 	orr.w	r3, r3, #7
 8004168:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	609a      	str	r2, [r3, #8]
}
 8004170:	bf00      	nop
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	bc80      	pop	{r7}
 8004178:	4770      	bx	lr

0800417a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800417a:	b480      	push	{r7}
 800417c:	b087      	sub	sp, #28
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004194:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	021a      	lsls	r2, r3, #8
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	431a      	orrs	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	609a      	str	r2, [r3, #8]
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e046      	b.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a16      	ldr	r2, [pc, #88]	; (8004268 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00e      	beq.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421c:	d009      	beq.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a12      	ldr	r2, [pc, #72]	; (800426c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d004      	beq.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a10      	ldr	r2, [pc, #64]	; (8004270 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d10c      	bne.n	800424c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004238:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	4313      	orrs	r3, r2
 8004242:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr
 8004268:	40012c00 	.word	0x40012c00
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800

08004274 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr

08004286 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr

08004298 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e047      	b.n	800433a <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fd feb6 	bl	8002030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2224      	movs	r2, #36	; 0x24
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f9af 	bl	8004640 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695a      	ldr	r2, [r3, #20]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004300:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695a      	ldr	r2, [r3, #20]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0208 	orr.w	r2, r2, #8
 8004310:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004320:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b08a      	sub	sp, #40	; 0x28
 8004346:	af02      	add	r7, sp, #8
 8004348:	60f8      	str	r0, [r7, #12]
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	603b      	str	r3, [r7, #0]
 800434e:	4613      	mov	r3, r2
 8004350:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b20      	cmp	r3, #32
 8004360:	d17c      	bne.n	800445c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_UART_Transmit+0x2c>
 8004368:	88fb      	ldrh	r3, [r7, #6]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e075      	b.n	800445e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_UART_Transmit+0x3e>
 800437c:	2302      	movs	r3, #2
 800437e:	e06e      	b.n	800445e <HAL_UART_Transmit+0x11c>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2221      	movs	r2, #33	; 0x21
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004396:	f7fe f801 	bl	800239c <HAL_GetTick>
 800439a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	88fa      	ldrh	r2, [r7, #6]
 80043a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	88fa      	ldrh	r2, [r7, #6]
 80043a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b0:	d108      	bne.n	80043c4 <HAL_UART_Transmit+0x82>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d104      	bne.n	80043c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	e003      	b.n	80043cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043d4:	e02a      	b.n	800442c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2200      	movs	r2, #0
 80043de:	2180      	movs	r1, #128	; 0x80
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 f8e2 	bl	80045aa <UART_WaitOnFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e036      	b.n	800445e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10b      	bne.n	800440e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004404:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	3302      	adds	r3, #2
 800440a:	61bb      	str	r3, [r7, #24]
 800440c:	e007      	b.n	800441e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	781a      	ldrb	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	3301      	adds	r3, #1
 800441c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1cf      	bne.n	80043d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2200      	movs	r2, #0
 800443e:	2140      	movs	r1, #64	; 0x40
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 f8b2 	bl	80045aa <UART_WaitOnFlagUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e006      	b.n	800445e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	e000      	b.n	800445e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800445c:	2302      	movs	r3, #2
  }
}
 800445e:	4618      	mov	r0, r3
 8004460:	3720      	adds	r7, #32
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b08a      	sub	sp, #40	; 0x28
 800446a:	af02      	add	r7, sp, #8
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	603b      	str	r3, [r7, #0]
 8004472:	4613      	mov	r3, r2
 8004474:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b20      	cmp	r3, #32
 8004484:	f040 808c 	bne.w	80045a0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <HAL_UART_Receive+0x2e>
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e084      	b.n	80045a2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d101      	bne.n	80044a6 <HAL_UART_Receive+0x40>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e07d      	b.n	80045a2 <HAL_UART_Receive+0x13c>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2222      	movs	r2, #34	; 0x22
 80044b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044c2:	f7fd ff6b 	bl	800239c <HAL_GetTick>
 80044c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	88fa      	ldrh	r2, [r7, #6]
 80044cc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	88fa      	ldrh	r2, [r7, #6]
 80044d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044dc:	d108      	bne.n	80044f0 <HAL_UART_Receive+0x8a>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d104      	bne.n	80044f0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	e003      	b.n	80044f8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044f4:	2300      	movs	r3, #0
 80044f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004500:	e043      	b.n	800458a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2200      	movs	r2, #0
 800450a:	2120      	movs	r1, #32
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f84c 	bl	80045aa <UART_WaitOnFlagUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e042      	b.n	80045a2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10c      	bne.n	800453c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	b29b      	uxth	r3, r3
 800452a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800452e:	b29a      	uxth	r2, r3
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	3302      	adds	r3, #2
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	e01f      	b.n	800457c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004544:	d007      	beq.n	8004556 <HAL_UART_Receive+0xf0>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10a      	bne.n	8004564 <HAL_UART_Receive+0xfe>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	b2da      	uxtb	r2, r3
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	e008      	b.n	8004576 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004570:	b2da      	uxtb	r2, r3
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	3301      	adds	r3, #1
 800457a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1b6      	bne.n	8004502 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	e000      	b.n	80045a2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80045a0:	2302      	movs	r3, #2
  }
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	603b      	str	r3, [r7, #0]
 80045b6:	4613      	mov	r3, r2
 80045b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ba:	e02c      	b.n	8004616 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c2:	d028      	beq.n	8004616 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <UART_WaitOnFlagUntilTimeout+0x30>
 80045ca:	f7fd fee7 	bl	800239c <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d21d      	bcs.n	8004616 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045e8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695a      	ldr	r2, [r3, #20]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0201 	bic.w	r2, r2, #1
 80045f8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e00f      	b.n	8004636 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4013      	ands	r3, r2
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	429a      	cmp	r2, r3
 8004624:	bf0c      	ite	eq
 8004626:	2301      	moveq	r3, #1
 8004628:	2300      	movne	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	461a      	mov	r2, r3
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	429a      	cmp	r2, r3
 8004632:	d0c3      	beq.n	80045bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	4313      	orrs	r3, r2
 800466e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800467a:	f023 030c 	bic.w	r3, r3, #12
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	430b      	orrs	r3, r1
 8004686:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699a      	ldr	r2, [r3, #24]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a2c      	ldr	r2, [pc, #176]	; (8004754 <UART_SetConfig+0x114>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d103      	bne.n	80046b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046a8:	f7ff f9ca 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	e002      	b.n	80046b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046b0:	f7ff f9b2 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 80046b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	009a      	lsls	r2, r3, #2
 80046c0:	441a      	add	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	4a22      	ldr	r2, [pc, #136]	; (8004758 <UART_SetConfig+0x118>)
 80046ce:	fba2 2303 	umull	r2, r3, r2, r3
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	0119      	lsls	r1, r3, #4
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	009a      	lsls	r2, r3, #2
 80046e0:	441a      	add	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046ec:	4b1a      	ldr	r3, [pc, #104]	; (8004758 <UART_SetConfig+0x118>)
 80046ee:	fba3 0302 	umull	r0, r3, r3, r2
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	2064      	movs	r0, #100	; 0x64
 80046f6:	fb00 f303 	mul.w	r3, r0, r3
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	3332      	adds	r3, #50	; 0x32
 8004700:	4a15      	ldr	r2, [pc, #84]	; (8004758 <UART_SetConfig+0x118>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800470c:	4419      	add	r1, r3
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	009a      	lsls	r2, r3, #2
 8004718:	441a      	add	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	fbb2 f2f3 	udiv	r2, r2, r3
 8004724:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <UART_SetConfig+0x118>)
 8004726:	fba3 0302 	umull	r0, r3, r3, r2
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	2064      	movs	r0, #100	; 0x64
 800472e:	fb00 f303 	mul.w	r3, r0, r3
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	3332      	adds	r3, #50	; 0x32
 8004738:	4a07      	ldr	r2, [pc, #28]	; (8004758 <UART_SetConfig+0x118>)
 800473a:	fba2 2303 	umull	r2, r3, r2, r3
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	f003 020f 	and.w	r2, r3, #15
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	440a      	add	r2, r1
 800474a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800474c:	bf00      	nop
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40013800 	.word	0x40013800
 8004758:	51eb851f 	.word	0x51eb851f

0800475c <__errno>:
 800475c:	4b01      	ldr	r3, [pc, #4]	; (8004764 <__errno+0x8>)
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000020 	.word	0x20000020

08004768 <__libc_init_array>:
 8004768:	b570      	push	{r4, r5, r6, lr}
 800476a:	2600      	movs	r6, #0
 800476c:	4d0c      	ldr	r5, [pc, #48]	; (80047a0 <__libc_init_array+0x38>)
 800476e:	4c0d      	ldr	r4, [pc, #52]	; (80047a4 <__libc_init_array+0x3c>)
 8004770:	1b64      	subs	r4, r4, r5
 8004772:	10a4      	asrs	r4, r4, #2
 8004774:	42a6      	cmp	r6, r4
 8004776:	d109      	bne.n	800478c <__libc_init_array+0x24>
 8004778:	f002 fefa 	bl	8007570 <_init>
 800477c:	2600      	movs	r6, #0
 800477e:	4d0a      	ldr	r5, [pc, #40]	; (80047a8 <__libc_init_array+0x40>)
 8004780:	4c0a      	ldr	r4, [pc, #40]	; (80047ac <__libc_init_array+0x44>)
 8004782:	1b64      	subs	r4, r4, r5
 8004784:	10a4      	asrs	r4, r4, #2
 8004786:	42a6      	cmp	r6, r4
 8004788:	d105      	bne.n	8004796 <__libc_init_array+0x2e>
 800478a:	bd70      	pop	{r4, r5, r6, pc}
 800478c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004790:	4798      	blx	r3
 8004792:	3601      	adds	r6, #1
 8004794:	e7ee      	b.n	8004774 <__libc_init_array+0xc>
 8004796:	f855 3b04 	ldr.w	r3, [r5], #4
 800479a:	4798      	blx	r3
 800479c:	3601      	adds	r6, #1
 800479e:	e7f2      	b.n	8004786 <__libc_init_array+0x1e>
 80047a0:	0800816c 	.word	0x0800816c
 80047a4:	0800816c 	.word	0x0800816c
 80047a8:	0800816c 	.word	0x0800816c
 80047ac:	08008170 	.word	0x08008170

080047b0 <memcpy>:
 80047b0:	440a      	add	r2, r1
 80047b2:	4291      	cmp	r1, r2
 80047b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80047b8:	d100      	bne.n	80047bc <memcpy+0xc>
 80047ba:	4770      	bx	lr
 80047bc:	b510      	push	{r4, lr}
 80047be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047c2:	4291      	cmp	r1, r2
 80047c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047c8:	d1f9      	bne.n	80047be <memcpy+0xe>
 80047ca:	bd10      	pop	{r4, pc}

080047cc <memmove>:
 80047cc:	4288      	cmp	r0, r1
 80047ce:	b510      	push	{r4, lr}
 80047d0:	eb01 0402 	add.w	r4, r1, r2
 80047d4:	d902      	bls.n	80047dc <memmove+0x10>
 80047d6:	4284      	cmp	r4, r0
 80047d8:	4623      	mov	r3, r4
 80047da:	d807      	bhi.n	80047ec <memmove+0x20>
 80047dc:	1e43      	subs	r3, r0, #1
 80047de:	42a1      	cmp	r1, r4
 80047e0:	d008      	beq.n	80047f4 <memmove+0x28>
 80047e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047ea:	e7f8      	b.n	80047de <memmove+0x12>
 80047ec:	4601      	mov	r1, r0
 80047ee:	4402      	add	r2, r0
 80047f0:	428a      	cmp	r2, r1
 80047f2:	d100      	bne.n	80047f6 <memmove+0x2a>
 80047f4:	bd10      	pop	{r4, pc}
 80047f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047fe:	e7f7      	b.n	80047f0 <memmove+0x24>

08004800 <memset>:
 8004800:	4603      	mov	r3, r0
 8004802:	4402      	add	r2, r0
 8004804:	4293      	cmp	r3, r2
 8004806:	d100      	bne.n	800480a <memset+0xa>
 8004808:	4770      	bx	lr
 800480a:	f803 1b01 	strb.w	r1, [r3], #1
 800480e:	e7f9      	b.n	8004804 <memset+0x4>

08004810 <__cvt>:
 8004810:	2b00      	cmp	r3, #0
 8004812:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004816:	461f      	mov	r7, r3
 8004818:	bfbb      	ittet	lt
 800481a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800481e:	461f      	movlt	r7, r3
 8004820:	2300      	movge	r3, #0
 8004822:	232d      	movlt	r3, #45	; 0x2d
 8004824:	b088      	sub	sp, #32
 8004826:	4614      	mov	r4, r2
 8004828:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800482a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800482c:	7013      	strb	r3, [r2, #0]
 800482e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004830:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004834:	f023 0820 	bic.w	r8, r3, #32
 8004838:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800483c:	d005      	beq.n	800484a <__cvt+0x3a>
 800483e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004842:	d100      	bne.n	8004846 <__cvt+0x36>
 8004844:	3501      	adds	r5, #1
 8004846:	2302      	movs	r3, #2
 8004848:	e000      	b.n	800484c <__cvt+0x3c>
 800484a:	2303      	movs	r3, #3
 800484c:	aa07      	add	r2, sp, #28
 800484e:	9204      	str	r2, [sp, #16]
 8004850:	aa06      	add	r2, sp, #24
 8004852:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004856:	e9cd 3500 	strd	r3, r5, [sp]
 800485a:	4622      	mov	r2, r4
 800485c:	463b      	mov	r3, r7
 800485e:	f000 fce3 	bl	8005228 <_dtoa_r>
 8004862:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004866:	4606      	mov	r6, r0
 8004868:	d102      	bne.n	8004870 <__cvt+0x60>
 800486a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800486c:	07db      	lsls	r3, r3, #31
 800486e:	d522      	bpl.n	80048b6 <__cvt+0xa6>
 8004870:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004874:	eb06 0905 	add.w	r9, r6, r5
 8004878:	d110      	bne.n	800489c <__cvt+0x8c>
 800487a:	7833      	ldrb	r3, [r6, #0]
 800487c:	2b30      	cmp	r3, #48	; 0x30
 800487e:	d10a      	bne.n	8004896 <__cvt+0x86>
 8004880:	2200      	movs	r2, #0
 8004882:	2300      	movs	r3, #0
 8004884:	4620      	mov	r0, r4
 8004886:	4639      	mov	r1, r7
 8004888:	f7fc f88e 	bl	80009a8 <__aeabi_dcmpeq>
 800488c:	b918      	cbnz	r0, 8004896 <__cvt+0x86>
 800488e:	f1c5 0501 	rsb	r5, r5, #1
 8004892:	f8ca 5000 	str.w	r5, [sl]
 8004896:	f8da 3000 	ldr.w	r3, [sl]
 800489a:	4499      	add	r9, r3
 800489c:	2200      	movs	r2, #0
 800489e:	2300      	movs	r3, #0
 80048a0:	4620      	mov	r0, r4
 80048a2:	4639      	mov	r1, r7
 80048a4:	f7fc f880 	bl	80009a8 <__aeabi_dcmpeq>
 80048a8:	b108      	cbz	r0, 80048ae <__cvt+0x9e>
 80048aa:	f8cd 901c 	str.w	r9, [sp, #28]
 80048ae:	2230      	movs	r2, #48	; 0x30
 80048b0:	9b07      	ldr	r3, [sp, #28]
 80048b2:	454b      	cmp	r3, r9
 80048b4:	d307      	bcc.n	80048c6 <__cvt+0xb6>
 80048b6:	4630      	mov	r0, r6
 80048b8:	9b07      	ldr	r3, [sp, #28]
 80048ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80048bc:	1b9b      	subs	r3, r3, r6
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	b008      	add	sp, #32
 80048c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048c6:	1c59      	adds	r1, r3, #1
 80048c8:	9107      	str	r1, [sp, #28]
 80048ca:	701a      	strb	r2, [r3, #0]
 80048cc:	e7f0      	b.n	80048b0 <__cvt+0xa0>

080048ce <__exponent>:
 80048ce:	4603      	mov	r3, r0
 80048d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048d2:	2900      	cmp	r1, #0
 80048d4:	f803 2b02 	strb.w	r2, [r3], #2
 80048d8:	bfb6      	itet	lt
 80048da:	222d      	movlt	r2, #45	; 0x2d
 80048dc:	222b      	movge	r2, #43	; 0x2b
 80048de:	4249      	neglt	r1, r1
 80048e0:	2909      	cmp	r1, #9
 80048e2:	7042      	strb	r2, [r0, #1]
 80048e4:	dd2b      	ble.n	800493e <__exponent+0x70>
 80048e6:	f10d 0407 	add.w	r4, sp, #7
 80048ea:	46a4      	mov	ip, r4
 80048ec:	270a      	movs	r7, #10
 80048ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80048f2:	460a      	mov	r2, r1
 80048f4:	46a6      	mov	lr, r4
 80048f6:	fb07 1516 	mls	r5, r7, r6, r1
 80048fa:	2a63      	cmp	r2, #99	; 0x63
 80048fc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004900:	4631      	mov	r1, r6
 8004902:	f104 34ff 	add.w	r4, r4, #4294967295
 8004906:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800490a:	dcf0      	bgt.n	80048ee <__exponent+0x20>
 800490c:	3130      	adds	r1, #48	; 0x30
 800490e:	f1ae 0502 	sub.w	r5, lr, #2
 8004912:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004916:	4629      	mov	r1, r5
 8004918:	1c44      	adds	r4, r0, #1
 800491a:	4561      	cmp	r1, ip
 800491c:	d30a      	bcc.n	8004934 <__exponent+0x66>
 800491e:	f10d 0209 	add.w	r2, sp, #9
 8004922:	eba2 020e 	sub.w	r2, r2, lr
 8004926:	4565      	cmp	r5, ip
 8004928:	bf88      	it	hi
 800492a:	2200      	movhi	r2, #0
 800492c:	4413      	add	r3, r2
 800492e:	1a18      	subs	r0, r3, r0
 8004930:	b003      	add	sp, #12
 8004932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004934:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004938:	f804 2f01 	strb.w	r2, [r4, #1]!
 800493c:	e7ed      	b.n	800491a <__exponent+0x4c>
 800493e:	2330      	movs	r3, #48	; 0x30
 8004940:	3130      	adds	r1, #48	; 0x30
 8004942:	7083      	strb	r3, [r0, #2]
 8004944:	70c1      	strb	r1, [r0, #3]
 8004946:	1d03      	adds	r3, r0, #4
 8004948:	e7f1      	b.n	800492e <__exponent+0x60>
	...

0800494c <_printf_float>:
 800494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004950:	b091      	sub	sp, #68	; 0x44
 8004952:	460c      	mov	r4, r1
 8004954:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004958:	4616      	mov	r6, r2
 800495a:	461f      	mov	r7, r3
 800495c:	4605      	mov	r5, r0
 800495e:	f001 fa51 	bl	8005e04 <_localeconv_r>
 8004962:	6803      	ldr	r3, [r0, #0]
 8004964:	4618      	mov	r0, r3
 8004966:	9309      	str	r3, [sp, #36]	; 0x24
 8004968:	f7fb fbf2 	bl	8000150 <strlen>
 800496c:	2300      	movs	r3, #0
 800496e:	930e      	str	r3, [sp, #56]	; 0x38
 8004970:	f8d8 3000 	ldr.w	r3, [r8]
 8004974:	900a      	str	r0, [sp, #40]	; 0x28
 8004976:	3307      	adds	r3, #7
 8004978:	f023 0307 	bic.w	r3, r3, #7
 800497c:	f103 0208 	add.w	r2, r3, #8
 8004980:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004984:	f8d4 b000 	ldr.w	fp, [r4]
 8004988:	f8c8 2000 	str.w	r2, [r8]
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004994:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004998:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800499c:	930b      	str	r3, [sp, #44]	; 0x2c
 800499e:	f04f 32ff 	mov.w	r2, #4294967295
 80049a2:	4640      	mov	r0, r8
 80049a4:	4b9c      	ldr	r3, [pc, #624]	; (8004c18 <_printf_float+0x2cc>)
 80049a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049a8:	f7fc f830 	bl	8000a0c <__aeabi_dcmpun>
 80049ac:	bb70      	cbnz	r0, 8004a0c <_printf_float+0xc0>
 80049ae:	f04f 32ff 	mov.w	r2, #4294967295
 80049b2:	4640      	mov	r0, r8
 80049b4:	4b98      	ldr	r3, [pc, #608]	; (8004c18 <_printf_float+0x2cc>)
 80049b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049b8:	f7fc f80a 	bl	80009d0 <__aeabi_dcmple>
 80049bc:	bb30      	cbnz	r0, 8004a0c <_printf_float+0xc0>
 80049be:	2200      	movs	r2, #0
 80049c0:	2300      	movs	r3, #0
 80049c2:	4640      	mov	r0, r8
 80049c4:	4651      	mov	r1, sl
 80049c6:	f7fb fff9 	bl	80009bc <__aeabi_dcmplt>
 80049ca:	b110      	cbz	r0, 80049d2 <_printf_float+0x86>
 80049cc:	232d      	movs	r3, #45	; 0x2d
 80049ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049d2:	4b92      	ldr	r3, [pc, #584]	; (8004c1c <_printf_float+0x2d0>)
 80049d4:	4892      	ldr	r0, [pc, #584]	; (8004c20 <_printf_float+0x2d4>)
 80049d6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80049da:	bf94      	ite	ls
 80049dc:	4698      	movls	r8, r3
 80049de:	4680      	movhi	r8, r0
 80049e0:	2303      	movs	r3, #3
 80049e2:	f04f 0a00 	mov.w	sl, #0
 80049e6:	6123      	str	r3, [r4, #16]
 80049e8:	f02b 0304 	bic.w	r3, fp, #4
 80049ec:	6023      	str	r3, [r4, #0]
 80049ee:	4633      	mov	r3, r6
 80049f0:	4621      	mov	r1, r4
 80049f2:	4628      	mov	r0, r5
 80049f4:	9700      	str	r7, [sp, #0]
 80049f6:	aa0f      	add	r2, sp, #60	; 0x3c
 80049f8:	f000 f9d4 	bl	8004da4 <_printf_common>
 80049fc:	3001      	adds	r0, #1
 80049fe:	f040 8090 	bne.w	8004b22 <_printf_float+0x1d6>
 8004a02:	f04f 30ff 	mov.w	r0, #4294967295
 8004a06:	b011      	add	sp, #68	; 0x44
 8004a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0c:	4642      	mov	r2, r8
 8004a0e:	4653      	mov	r3, sl
 8004a10:	4640      	mov	r0, r8
 8004a12:	4651      	mov	r1, sl
 8004a14:	f7fb fffa 	bl	8000a0c <__aeabi_dcmpun>
 8004a18:	b148      	cbz	r0, 8004a2e <_printf_float+0xe2>
 8004a1a:	f1ba 0f00 	cmp.w	sl, #0
 8004a1e:	bfb8      	it	lt
 8004a20:	232d      	movlt	r3, #45	; 0x2d
 8004a22:	4880      	ldr	r0, [pc, #512]	; (8004c24 <_printf_float+0x2d8>)
 8004a24:	bfb8      	it	lt
 8004a26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a2a:	4b7f      	ldr	r3, [pc, #508]	; (8004c28 <_printf_float+0x2dc>)
 8004a2c:	e7d3      	b.n	80049d6 <_printf_float+0x8a>
 8004a2e:	6863      	ldr	r3, [r4, #4]
 8004a30:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	d142      	bne.n	8004abe <_printf_float+0x172>
 8004a38:	2306      	movs	r3, #6
 8004a3a:	6063      	str	r3, [r4, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	9206      	str	r2, [sp, #24]
 8004a40:	aa0e      	add	r2, sp, #56	; 0x38
 8004a42:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004a46:	aa0d      	add	r2, sp, #52	; 0x34
 8004a48:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004a4c:	9203      	str	r2, [sp, #12]
 8004a4e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004a52:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004a56:	6023      	str	r3, [r4, #0]
 8004a58:	6863      	ldr	r3, [r4, #4]
 8004a5a:	4642      	mov	r2, r8
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	4628      	mov	r0, r5
 8004a60:	4653      	mov	r3, sl
 8004a62:	910b      	str	r1, [sp, #44]	; 0x2c
 8004a64:	f7ff fed4 	bl	8004810 <__cvt>
 8004a68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a6a:	4680      	mov	r8, r0
 8004a6c:	2947      	cmp	r1, #71	; 0x47
 8004a6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a70:	d108      	bne.n	8004a84 <_printf_float+0x138>
 8004a72:	1cc8      	adds	r0, r1, #3
 8004a74:	db02      	blt.n	8004a7c <_printf_float+0x130>
 8004a76:	6863      	ldr	r3, [r4, #4]
 8004a78:	4299      	cmp	r1, r3
 8004a7a:	dd40      	ble.n	8004afe <_printf_float+0x1b2>
 8004a7c:	f1a9 0902 	sub.w	r9, r9, #2
 8004a80:	fa5f f989 	uxtb.w	r9, r9
 8004a84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004a88:	d81f      	bhi.n	8004aca <_printf_float+0x17e>
 8004a8a:	464a      	mov	r2, r9
 8004a8c:	3901      	subs	r1, #1
 8004a8e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a92:	910d      	str	r1, [sp, #52]	; 0x34
 8004a94:	f7ff ff1b 	bl	80048ce <__exponent>
 8004a98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a9a:	4682      	mov	sl, r0
 8004a9c:	1813      	adds	r3, r2, r0
 8004a9e:	2a01      	cmp	r2, #1
 8004aa0:	6123      	str	r3, [r4, #16]
 8004aa2:	dc02      	bgt.n	8004aaa <_printf_float+0x15e>
 8004aa4:	6822      	ldr	r2, [r4, #0]
 8004aa6:	07d2      	lsls	r2, r2, #31
 8004aa8:	d501      	bpl.n	8004aae <_printf_float+0x162>
 8004aaa:	3301      	adds	r3, #1
 8004aac:	6123      	str	r3, [r4, #16]
 8004aae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d09b      	beq.n	80049ee <_printf_float+0xa2>
 8004ab6:	232d      	movs	r3, #45	; 0x2d
 8004ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004abc:	e797      	b.n	80049ee <_printf_float+0xa2>
 8004abe:	2947      	cmp	r1, #71	; 0x47
 8004ac0:	d1bc      	bne.n	8004a3c <_printf_float+0xf0>
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1ba      	bne.n	8004a3c <_printf_float+0xf0>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e7b7      	b.n	8004a3a <_printf_float+0xee>
 8004aca:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004ace:	d118      	bne.n	8004b02 <_printf_float+0x1b6>
 8004ad0:	2900      	cmp	r1, #0
 8004ad2:	6863      	ldr	r3, [r4, #4]
 8004ad4:	dd0b      	ble.n	8004aee <_printf_float+0x1a2>
 8004ad6:	6121      	str	r1, [r4, #16]
 8004ad8:	b913      	cbnz	r3, 8004ae0 <_printf_float+0x194>
 8004ada:	6822      	ldr	r2, [r4, #0]
 8004adc:	07d0      	lsls	r0, r2, #31
 8004ade:	d502      	bpl.n	8004ae6 <_printf_float+0x19a>
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	440b      	add	r3, r1
 8004ae4:	6123      	str	r3, [r4, #16]
 8004ae6:	f04f 0a00 	mov.w	sl, #0
 8004aea:	65a1      	str	r1, [r4, #88]	; 0x58
 8004aec:	e7df      	b.n	8004aae <_printf_float+0x162>
 8004aee:	b913      	cbnz	r3, 8004af6 <_printf_float+0x1aa>
 8004af0:	6822      	ldr	r2, [r4, #0]
 8004af2:	07d2      	lsls	r2, r2, #31
 8004af4:	d501      	bpl.n	8004afa <_printf_float+0x1ae>
 8004af6:	3302      	adds	r3, #2
 8004af8:	e7f4      	b.n	8004ae4 <_printf_float+0x198>
 8004afa:	2301      	movs	r3, #1
 8004afc:	e7f2      	b.n	8004ae4 <_printf_float+0x198>
 8004afe:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004b02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b04:	4299      	cmp	r1, r3
 8004b06:	db05      	blt.n	8004b14 <_printf_float+0x1c8>
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	6121      	str	r1, [r4, #16]
 8004b0c:	07d8      	lsls	r0, r3, #31
 8004b0e:	d5ea      	bpl.n	8004ae6 <_printf_float+0x19a>
 8004b10:	1c4b      	adds	r3, r1, #1
 8004b12:	e7e7      	b.n	8004ae4 <_printf_float+0x198>
 8004b14:	2900      	cmp	r1, #0
 8004b16:	bfcc      	ite	gt
 8004b18:	2201      	movgt	r2, #1
 8004b1a:	f1c1 0202 	rsble	r2, r1, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	e7e0      	b.n	8004ae4 <_printf_float+0x198>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	055a      	lsls	r2, r3, #21
 8004b26:	d407      	bmi.n	8004b38 <_printf_float+0x1ec>
 8004b28:	6923      	ldr	r3, [r4, #16]
 8004b2a:	4642      	mov	r2, r8
 8004b2c:	4631      	mov	r1, r6
 8004b2e:	4628      	mov	r0, r5
 8004b30:	47b8      	blx	r7
 8004b32:	3001      	adds	r0, #1
 8004b34:	d12b      	bne.n	8004b8e <_printf_float+0x242>
 8004b36:	e764      	b.n	8004a02 <_printf_float+0xb6>
 8004b38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b3c:	f240 80dd 	bls.w	8004cfa <_printf_float+0x3ae>
 8004b40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b44:	2200      	movs	r2, #0
 8004b46:	2300      	movs	r3, #0
 8004b48:	f7fb ff2e 	bl	80009a8 <__aeabi_dcmpeq>
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	d033      	beq.n	8004bb8 <_printf_float+0x26c>
 8004b50:	2301      	movs	r3, #1
 8004b52:	4631      	mov	r1, r6
 8004b54:	4628      	mov	r0, r5
 8004b56:	4a35      	ldr	r2, [pc, #212]	; (8004c2c <_printf_float+0x2e0>)
 8004b58:	47b8      	blx	r7
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	f43f af51 	beq.w	8004a02 <_printf_float+0xb6>
 8004b60:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b64:	429a      	cmp	r2, r3
 8004b66:	db02      	blt.n	8004b6e <_printf_float+0x222>
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	07d8      	lsls	r0, r3, #31
 8004b6c:	d50f      	bpl.n	8004b8e <_printf_float+0x242>
 8004b6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b72:	4631      	mov	r1, r6
 8004b74:	4628      	mov	r0, r5
 8004b76:	47b8      	blx	r7
 8004b78:	3001      	adds	r0, #1
 8004b7a:	f43f af42 	beq.w	8004a02 <_printf_float+0xb6>
 8004b7e:	f04f 0800 	mov.w	r8, #0
 8004b82:	f104 091a 	add.w	r9, r4, #26
 8004b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	4543      	cmp	r3, r8
 8004b8c:	dc09      	bgt.n	8004ba2 <_printf_float+0x256>
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	079b      	lsls	r3, r3, #30
 8004b92:	f100 8102 	bmi.w	8004d9a <_printf_float+0x44e>
 8004b96:	68e0      	ldr	r0, [r4, #12]
 8004b98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b9a:	4298      	cmp	r0, r3
 8004b9c:	bfb8      	it	lt
 8004b9e:	4618      	movlt	r0, r3
 8004ba0:	e731      	b.n	8004a06 <_printf_float+0xba>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	464a      	mov	r2, r9
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	4628      	mov	r0, r5
 8004baa:	47b8      	blx	r7
 8004bac:	3001      	adds	r0, #1
 8004bae:	f43f af28 	beq.w	8004a02 <_printf_float+0xb6>
 8004bb2:	f108 0801 	add.w	r8, r8, #1
 8004bb6:	e7e6      	b.n	8004b86 <_printf_float+0x23a>
 8004bb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	dc38      	bgt.n	8004c30 <_printf_float+0x2e4>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	4631      	mov	r1, r6
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	4a19      	ldr	r2, [pc, #100]	; (8004c2c <_printf_float+0x2e0>)
 8004bc6:	47b8      	blx	r7
 8004bc8:	3001      	adds	r0, #1
 8004bca:	f43f af1a 	beq.w	8004a02 <_printf_float+0xb6>
 8004bce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	d102      	bne.n	8004bdc <_printf_float+0x290>
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	07d9      	lsls	r1, r3, #31
 8004bda:	d5d8      	bpl.n	8004b8e <_printf_float+0x242>
 8004bdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004be0:	4631      	mov	r1, r6
 8004be2:	4628      	mov	r0, r5
 8004be4:	47b8      	blx	r7
 8004be6:	3001      	adds	r0, #1
 8004be8:	f43f af0b 	beq.w	8004a02 <_printf_float+0xb6>
 8004bec:	f04f 0900 	mov.w	r9, #0
 8004bf0:	f104 0a1a 	add.w	sl, r4, #26
 8004bf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bf6:	425b      	negs	r3, r3
 8004bf8:	454b      	cmp	r3, r9
 8004bfa:	dc01      	bgt.n	8004c00 <_printf_float+0x2b4>
 8004bfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bfe:	e794      	b.n	8004b2a <_printf_float+0x1de>
 8004c00:	2301      	movs	r3, #1
 8004c02:	4652      	mov	r2, sl
 8004c04:	4631      	mov	r1, r6
 8004c06:	4628      	mov	r0, r5
 8004c08:	47b8      	blx	r7
 8004c0a:	3001      	adds	r0, #1
 8004c0c:	f43f aef9 	beq.w	8004a02 <_printf_float+0xb6>
 8004c10:	f109 0901 	add.w	r9, r9, #1
 8004c14:	e7ee      	b.n	8004bf4 <_printf_float+0x2a8>
 8004c16:	bf00      	nop
 8004c18:	7fefffff 	.word	0x7fefffff
 8004c1c:	08007d98 	.word	0x08007d98
 8004c20:	08007d9c 	.word	0x08007d9c
 8004c24:	08007da4 	.word	0x08007da4
 8004c28:	08007da0 	.word	0x08007da0
 8004c2c:	08007da8 	.word	0x08007da8
 8004c30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c34:	429a      	cmp	r2, r3
 8004c36:	bfa8      	it	ge
 8004c38:	461a      	movge	r2, r3
 8004c3a:	2a00      	cmp	r2, #0
 8004c3c:	4691      	mov	r9, r2
 8004c3e:	dc37      	bgt.n	8004cb0 <_printf_float+0x364>
 8004c40:	f04f 0b00 	mov.w	fp, #0
 8004c44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c48:	f104 021a 	add.w	r2, r4, #26
 8004c4c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004c50:	ebaa 0309 	sub.w	r3, sl, r9
 8004c54:	455b      	cmp	r3, fp
 8004c56:	dc33      	bgt.n	8004cc0 <_printf_float+0x374>
 8004c58:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	db3b      	blt.n	8004cd8 <_printf_float+0x38c>
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	07da      	lsls	r2, r3, #31
 8004c64:	d438      	bmi.n	8004cd8 <_printf_float+0x38c>
 8004c66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c68:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c6a:	eba3 020a 	sub.w	r2, r3, sl
 8004c6e:	eba3 0901 	sub.w	r9, r3, r1
 8004c72:	4591      	cmp	r9, r2
 8004c74:	bfa8      	it	ge
 8004c76:	4691      	movge	r9, r2
 8004c78:	f1b9 0f00 	cmp.w	r9, #0
 8004c7c:	dc34      	bgt.n	8004ce8 <_printf_float+0x39c>
 8004c7e:	f04f 0800 	mov.w	r8, #0
 8004c82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c86:	f104 0a1a 	add.w	sl, r4, #26
 8004c8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c8e:	1a9b      	subs	r3, r3, r2
 8004c90:	eba3 0309 	sub.w	r3, r3, r9
 8004c94:	4543      	cmp	r3, r8
 8004c96:	f77f af7a 	ble.w	8004b8e <_printf_float+0x242>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	4652      	mov	r2, sl
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	47b8      	blx	r7
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	f43f aeac 	beq.w	8004a02 <_printf_float+0xb6>
 8004caa:	f108 0801 	add.w	r8, r8, #1
 8004cae:	e7ec      	b.n	8004c8a <_printf_float+0x33e>
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	4631      	mov	r1, r6
 8004cb4:	4642      	mov	r2, r8
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	47b8      	blx	r7
 8004cba:	3001      	adds	r0, #1
 8004cbc:	d1c0      	bne.n	8004c40 <_printf_float+0x2f4>
 8004cbe:	e6a0      	b.n	8004a02 <_printf_float+0xb6>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4631      	mov	r1, r6
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	920b      	str	r2, [sp, #44]	; 0x2c
 8004cc8:	47b8      	blx	r7
 8004cca:	3001      	adds	r0, #1
 8004ccc:	f43f ae99 	beq.w	8004a02 <_printf_float+0xb6>
 8004cd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cd2:	f10b 0b01 	add.w	fp, fp, #1
 8004cd6:	e7b9      	b.n	8004c4c <_printf_float+0x300>
 8004cd8:	4631      	mov	r1, r6
 8004cda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cde:	4628      	mov	r0, r5
 8004ce0:	47b8      	blx	r7
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	d1bf      	bne.n	8004c66 <_printf_float+0x31a>
 8004ce6:	e68c      	b.n	8004a02 <_printf_float+0xb6>
 8004ce8:	464b      	mov	r3, r9
 8004cea:	4631      	mov	r1, r6
 8004cec:	4628      	mov	r0, r5
 8004cee:	eb08 020a 	add.w	r2, r8, sl
 8004cf2:	47b8      	blx	r7
 8004cf4:	3001      	adds	r0, #1
 8004cf6:	d1c2      	bne.n	8004c7e <_printf_float+0x332>
 8004cf8:	e683      	b.n	8004a02 <_printf_float+0xb6>
 8004cfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cfc:	2a01      	cmp	r2, #1
 8004cfe:	dc01      	bgt.n	8004d04 <_printf_float+0x3b8>
 8004d00:	07db      	lsls	r3, r3, #31
 8004d02:	d537      	bpl.n	8004d74 <_printf_float+0x428>
 8004d04:	2301      	movs	r3, #1
 8004d06:	4642      	mov	r2, r8
 8004d08:	4631      	mov	r1, r6
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	47b8      	blx	r7
 8004d0e:	3001      	adds	r0, #1
 8004d10:	f43f ae77 	beq.w	8004a02 <_printf_float+0xb6>
 8004d14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d18:	4631      	mov	r1, r6
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	47b8      	blx	r7
 8004d1e:	3001      	adds	r0, #1
 8004d20:	f43f ae6f 	beq.w	8004a02 <_printf_float+0xb6>
 8004d24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f7fb fe3c 	bl	80009a8 <__aeabi_dcmpeq>
 8004d30:	b9d8      	cbnz	r0, 8004d6a <_printf_float+0x41e>
 8004d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d34:	f108 0201 	add.w	r2, r8, #1
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	4631      	mov	r1, r6
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	47b8      	blx	r7
 8004d40:	3001      	adds	r0, #1
 8004d42:	d10e      	bne.n	8004d62 <_printf_float+0x416>
 8004d44:	e65d      	b.n	8004a02 <_printf_float+0xb6>
 8004d46:	2301      	movs	r3, #1
 8004d48:	464a      	mov	r2, r9
 8004d4a:	4631      	mov	r1, r6
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	47b8      	blx	r7
 8004d50:	3001      	adds	r0, #1
 8004d52:	f43f ae56 	beq.w	8004a02 <_printf_float+0xb6>
 8004d56:	f108 0801 	add.w	r8, r8, #1
 8004d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	4543      	cmp	r3, r8
 8004d60:	dcf1      	bgt.n	8004d46 <_printf_float+0x3fa>
 8004d62:	4653      	mov	r3, sl
 8004d64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d68:	e6e0      	b.n	8004b2c <_printf_float+0x1e0>
 8004d6a:	f04f 0800 	mov.w	r8, #0
 8004d6e:	f104 091a 	add.w	r9, r4, #26
 8004d72:	e7f2      	b.n	8004d5a <_printf_float+0x40e>
 8004d74:	2301      	movs	r3, #1
 8004d76:	4642      	mov	r2, r8
 8004d78:	e7df      	b.n	8004d3a <_printf_float+0x3ee>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	464a      	mov	r2, r9
 8004d7e:	4631      	mov	r1, r6
 8004d80:	4628      	mov	r0, r5
 8004d82:	47b8      	blx	r7
 8004d84:	3001      	adds	r0, #1
 8004d86:	f43f ae3c 	beq.w	8004a02 <_printf_float+0xb6>
 8004d8a:	f108 0801 	add.w	r8, r8, #1
 8004d8e:	68e3      	ldr	r3, [r4, #12]
 8004d90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004d92:	1a5b      	subs	r3, r3, r1
 8004d94:	4543      	cmp	r3, r8
 8004d96:	dcf0      	bgt.n	8004d7a <_printf_float+0x42e>
 8004d98:	e6fd      	b.n	8004b96 <_printf_float+0x24a>
 8004d9a:	f04f 0800 	mov.w	r8, #0
 8004d9e:	f104 0919 	add.w	r9, r4, #25
 8004da2:	e7f4      	b.n	8004d8e <_printf_float+0x442>

08004da4 <_printf_common>:
 8004da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004da8:	4616      	mov	r6, r2
 8004daa:	4699      	mov	r9, r3
 8004dac:	688a      	ldr	r2, [r1, #8]
 8004dae:	690b      	ldr	r3, [r1, #16]
 8004db0:	4607      	mov	r7, r0
 8004db2:	4293      	cmp	r3, r2
 8004db4:	bfb8      	it	lt
 8004db6:	4613      	movlt	r3, r2
 8004db8:	6033      	str	r3, [r6, #0]
 8004dba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dbe:	460c      	mov	r4, r1
 8004dc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004dc4:	b10a      	cbz	r2, 8004dca <_printf_common+0x26>
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	6033      	str	r3, [r6, #0]
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	0699      	lsls	r1, r3, #26
 8004dce:	bf42      	ittt	mi
 8004dd0:	6833      	ldrmi	r3, [r6, #0]
 8004dd2:	3302      	addmi	r3, #2
 8004dd4:	6033      	strmi	r3, [r6, #0]
 8004dd6:	6825      	ldr	r5, [r4, #0]
 8004dd8:	f015 0506 	ands.w	r5, r5, #6
 8004ddc:	d106      	bne.n	8004dec <_printf_common+0x48>
 8004dde:	f104 0a19 	add.w	sl, r4, #25
 8004de2:	68e3      	ldr	r3, [r4, #12]
 8004de4:	6832      	ldr	r2, [r6, #0]
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	42ab      	cmp	r3, r5
 8004dea:	dc28      	bgt.n	8004e3e <_printf_common+0x9a>
 8004dec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004df0:	1e13      	subs	r3, r2, #0
 8004df2:	6822      	ldr	r2, [r4, #0]
 8004df4:	bf18      	it	ne
 8004df6:	2301      	movne	r3, #1
 8004df8:	0692      	lsls	r2, r2, #26
 8004dfa:	d42d      	bmi.n	8004e58 <_printf_common+0xb4>
 8004dfc:	4649      	mov	r1, r9
 8004dfe:	4638      	mov	r0, r7
 8004e00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e04:	47c0      	blx	r8
 8004e06:	3001      	adds	r0, #1
 8004e08:	d020      	beq.n	8004e4c <_printf_common+0xa8>
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	68e5      	ldr	r5, [r4, #12]
 8004e0e:	f003 0306 	and.w	r3, r3, #6
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	bf18      	it	ne
 8004e16:	2500      	movne	r5, #0
 8004e18:	6832      	ldr	r2, [r6, #0]
 8004e1a:	f04f 0600 	mov.w	r6, #0
 8004e1e:	68a3      	ldr	r3, [r4, #8]
 8004e20:	bf08      	it	eq
 8004e22:	1aad      	subeq	r5, r5, r2
 8004e24:	6922      	ldr	r2, [r4, #16]
 8004e26:	bf08      	it	eq
 8004e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	bfc4      	itt	gt
 8004e30:	1a9b      	subgt	r3, r3, r2
 8004e32:	18ed      	addgt	r5, r5, r3
 8004e34:	341a      	adds	r4, #26
 8004e36:	42b5      	cmp	r5, r6
 8004e38:	d11a      	bne.n	8004e70 <_printf_common+0xcc>
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	e008      	b.n	8004e50 <_printf_common+0xac>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4652      	mov	r2, sl
 8004e42:	4649      	mov	r1, r9
 8004e44:	4638      	mov	r0, r7
 8004e46:	47c0      	blx	r8
 8004e48:	3001      	adds	r0, #1
 8004e4a:	d103      	bne.n	8004e54 <_printf_common+0xb0>
 8004e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e54:	3501      	adds	r5, #1
 8004e56:	e7c4      	b.n	8004de2 <_printf_common+0x3e>
 8004e58:	2030      	movs	r0, #48	; 0x30
 8004e5a:	18e1      	adds	r1, r4, r3
 8004e5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e66:	4422      	add	r2, r4
 8004e68:	3302      	adds	r3, #2
 8004e6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e6e:	e7c5      	b.n	8004dfc <_printf_common+0x58>
 8004e70:	2301      	movs	r3, #1
 8004e72:	4622      	mov	r2, r4
 8004e74:	4649      	mov	r1, r9
 8004e76:	4638      	mov	r0, r7
 8004e78:	47c0      	blx	r8
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	d0e6      	beq.n	8004e4c <_printf_common+0xa8>
 8004e7e:	3601      	adds	r6, #1
 8004e80:	e7d9      	b.n	8004e36 <_printf_common+0x92>
	...

08004e84 <_printf_i>:
 8004e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e88:	7e0f      	ldrb	r7, [r1, #24]
 8004e8a:	4691      	mov	r9, r2
 8004e8c:	2f78      	cmp	r7, #120	; 0x78
 8004e8e:	4680      	mov	r8, r0
 8004e90:	460c      	mov	r4, r1
 8004e92:	469a      	mov	sl, r3
 8004e94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e9a:	d807      	bhi.n	8004eac <_printf_i+0x28>
 8004e9c:	2f62      	cmp	r7, #98	; 0x62
 8004e9e:	d80a      	bhi.n	8004eb6 <_printf_i+0x32>
 8004ea0:	2f00      	cmp	r7, #0
 8004ea2:	f000 80d9 	beq.w	8005058 <_printf_i+0x1d4>
 8004ea6:	2f58      	cmp	r7, #88	; 0x58
 8004ea8:	f000 80a4 	beq.w	8004ff4 <_printf_i+0x170>
 8004eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004eb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004eb4:	e03a      	b.n	8004f2c <_printf_i+0xa8>
 8004eb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004eba:	2b15      	cmp	r3, #21
 8004ebc:	d8f6      	bhi.n	8004eac <_printf_i+0x28>
 8004ebe:	a101      	add	r1, pc, #4	; (adr r1, 8004ec4 <_printf_i+0x40>)
 8004ec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ec4:	08004f1d 	.word	0x08004f1d
 8004ec8:	08004f31 	.word	0x08004f31
 8004ecc:	08004ead 	.word	0x08004ead
 8004ed0:	08004ead 	.word	0x08004ead
 8004ed4:	08004ead 	.word	0x08004ead
 8004ed8:	08004ead 	.word	0x08004ead
 8004edc:	08004f31 	.word	0x08004f31
 8004ee0:	08004ead 	.word	0x08004ead
 8004ee4:	08004ead 	.word	0x08004ead
 8004ee8:	08004ead 	.word	0x08004ead
 8004eec:	08004ead 	.word	0x08004ead
 8004ef0:	0800503f 	.word	0x0800503f
 8004ef4:	08004f61 	.word	0x08004f61
 8004ef8:	08005021 	.word	0x08005021
 8004efc:	08004ead 	.word	0x08004ead
 8004f00:	08004ead 	.word	0x08004ead
 8004f04:	08005061 	.word	0x08005061
 8004f08:	08004ead 	.word	0x08004ead
 8004f0c:	08004f61 	.word	0x08004f61
 8004f10:	08004ead 	.word	0x08004ead
 8004f14:	08004ead 	.word	0x08004ead
 8004f18:	08005029 	.word	0x08005029
 8004f1c:	682b      	ldr	r3, [r5, #0]
 8004f1e:	1d1a      	adds	r2, r3, #4
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	602a      	str	r2, [r5, #0]
 8004f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e0a4      	b.n	800507a <_printf_i+0x1f6>
 8004f30:	6820      	ldr	r0, [r4, #0]
 8004f32:	6829      	ldr	r1, [r5, #0]
 8004f34:	0606      	lsls	r6, r0, #24
 8004f36:	f101 0304 	add.w	r3, r1, #4
 8004f3a:	d50a      	bpl.n	8004f52 <_printf_i+0xce>
 8004f3c:	680e      	ldr	r6, [r1, #0]
 8004f3e:	602b      	str	r3, [r5, #0]
 8004f40:	2e00      	cmp	r6, #0
 8004f42:	da03      	bge.n	8004f4c <_printf_i+0xc8>
 8004f44:	232d      	movs	r3, #45	; 0x2d
 8004f46:	4276      	negs	r6, r6
 8004f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f4c:	230a      	movs	r3, #10
 8004f4e:	485e      	ldr	r0, [pc, #376]	; (80050c8 <_printf_i+0x244>)
 8004f50:	e019      	b.n	8004f86 <_printf_i+0x102>
 8004f52:	680e      	ldr	r6, [r1, #0]
 8004f54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f58:	602b      	str	r3, [r5, #0]
 8004f5a:	bf18      	it	ne
 8004f5c:	b236      	sxthne	r6, r6
 8004f5e:	e7ef      	b.n	8004f40 <_printf_i+0xbc>
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	6820      	ldr	r0, [r4, #0]
 8004f64:	1d19      	adds	r1, r3, #4
 8004f66:	6029      	str	r1, [r5, #0]
 8004f68:	0601      	lsls	r1, r0, #24
 8004f6a:	d501      	bpl.n	8004f70 <_printf_i+0xec>
 8004f6c:	681e      	ldr	r6, [r3, #0]
 8004f6e:	e002      	b.n	8004f76 <_printf_i+0xf2>
 8004f70:	0646      	lsls	r6, r0, #25
 8004f72:	d5fb      	bpl.n	8004f6c <_printf_i+0xe8>
 8004f74:	881e      	ldrh	r6, [r3, #0]
 8004f76:	2f6f      	cmp	r7, #111	; 0x6f
 8004f78:	bf0c      	ite	eq
 8004f7a:	2308      	moveq	r3, #8
 8004f7c:	230a      	movne	r3, #10
 8004f7e:	4852      	ldr	r0, [pc, #328]	; (80050c8 <_printf_i+0x244>)
 8004f80:	2100      	movs	r1, #0
 8004f82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f86:	6865      	ldr	r5, [r4, #4]
 8004f88:	2d00      	cmp	r5, #0
 8004f8a:	bfa8      	it	ge
 8004f8c:	6821      	ldrge	r1, [r4, #0]
 8004f8e:	60a5      	str	r5, [r4, #8]
 8004f90:	bfa4      	itt	ge
 8004f92:	f021 0104 	bicge.w	r1, r1, #4
 8004f96:	6021      	strge	r1, [r4, #0]
 8004f98:	b90e      	cbnz	r6, 8004f9e <_printf_i+0x11a>
 8004f9a:	2d00      	cmp	r5, #0
 8004f9c:	d04d      	beq.n	800503a <_printf_i+0x1b6>
 8004f9e:	4615      	mov	r5, r2
 8004fa0:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fa4:	fb03 6711 	mls	r7, r3, r1, r6
 8004fa8:	5dc7      	ldrb	r7, [r0, r7]
 8004faa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004fae:	4637      	mov	r7, r6
 8004fb0:	42bb      	cmp	r3, r7
 8004fb2:	460e      	mov	r6, r1
 8004fb4:	d9f4      	bls.n	8004fa0 <_printf_i+0x11c>
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d10b      	bne.n	8004fd2 <_printf_i+0x14e>
 8004fba:	6823      	ldr	r3, [r4, #0]
 8004fbc:	07de      	lsls	r6, r3, #31
 8004fbe:	d508      	bpl.n	8004fd2 <_printf_i+0x14e>
 8004fc0:	6923      	ldr	r3, [r4, #16]
 8004fc2:	6861      	ldr	r1, [r4, #4]
 8004fc4:	4299      	cmp	r1, r3
 8004fc6:	bfde      	ittt	le
 8004fc8:	2330      	movle	r3, #48	; 0x30
 8004fca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004fce:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004fd2:	1b52      	subs	r2, r2, r5
 8004fd4:	6122      	str	r2, [r4, #16]
 8004fd6:	464b      	mov	r3, r9
 8004fd8:	4621      	mov	r1, r4
 8004fda:	4640      	mov	r0, r8
 8004fdc:	f8cd a000 	str.w	sl, [sp]
 8004fe0:	aa03      	add	r2, sp, #12
 8004fe2:	f7ff fedf 	bl	8004da4 <_printf_common>
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	d14c      	bne.n	8005084 <_printf_i+0x200>
 8004fea:	f04f 30ff 	mov.w	r0, #4294967295
 8004fee:	b004      	add	sp, #16
 8004ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff4:	4834      	ldr	r0, [pc, #208]	; (80050c8 <_printf_i+0x244>)
 8004ff6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ffa:	6829      	ldr	r1, [r5, #0]
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	f851 6b04 	ldr.w	r6, [r1], #4
 8005002:	6029      	str	r1, [r5, #0]
 8005004:	061d      	lsls	r5, r3, #24
 8005006:	d514      	bpl.n	8005032 <_printf_i+0x1ae>
 8005008:	07df      	lsls	r7, r3, #31
 800500a:	bf44      	itt	mi
 800500c:	f043 0320 	orrmi.w	r3, r3, #32
 8005010:	6023      	strmi	r3, [r4, #0]
 8005012:	b91e      	cbnz	r6, 800501c <_printf_i+0x198>
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	f023 0320 	bic.w	r3, r3, #32
 800501a:	6023      	str	r3, [r4, #0]
 800501c:	2310      	movs	r3, #16
 800501e:	e7af      	b.n	8004f80 <_printf_i+0xfc>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	f043 0320 	orr.w	r3, r3, #32
 8005026:	6023      	str	r3, [r4, #0]
 8005028:	2378      	movs	r3, #120	; 0x78
 800502a:	4828      	ldr	r0, [pc, #160]	; (80050cc <_printf_i+0x248>)
 800502c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005030:	e7e3      	b.n	8004ffa <_printf_i+0x176>
 8005032:	0659      	lsls	r1, r3, #25
 8005034:	bf48      	it	mi
 8005036:	b2b6      	uxthmi	r6, r6
 8005038:	e7e6      	b.n	8005008 <_printf_i+0x184>
 800503a:	4615      	mov	r5, r2
 800503c:	e7bb      	b.n	8004fb6 <_printf_i+0x132>
 800503e:	682b      	ldr	r3, [r5, #0]
 8005040:	6826      	ldr	r6, [r4, #0]
 8005042:	1d18      	adds	r0, r3, #4
 8005044:	6961      	ldr	r1, [r4, #20]
 8005046:	6028      	str	r0, [r5, #0]
 8005048:	0635      	lsls	r5, r6, #24
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	d501      	bpl.n	8005052 <_printf_i+0x1ce>
 800504e:	6019      	str	r1, [r3, #0]
 8005050:	e002      	b.n	8005058 <_printf_i+0x1d4>
 8005052:	0670      	lsls	r0, r6, #25
 8005054:	d5fb      	bpl.n	800504e <_printf_i+0x1ca>
 8005056:	8019      	strh	r1, [r3, #0]
 8005058:	2300      	movs	r3, #0
 800505a:	4615      	mov	r5, r2
 800505c:	6123      	str	r3, [r4, #16]
 800505e:	e7ba      	b.n	8004fd6 <_printf_i+0x152>
 8005060:	682b      	ldr	r3, [r5, #0]
 8005062:	2100      	movs	r1, #0
 8005064:	1d1a      	adds	r2, r3, #4
 8005066:	602a      	str	r2, [r5, #0]
 8005068:	681d      	ldr	r5, [r3, #0]
 800506a:	6862      	ldr	r2, [r4, #4]
 800506c:	4628      	mov	r0, r5
 800506e:	f000 fed5 	bl	8005e1c <memchr>
 8005072:	b108      	cbz	r0, 8005078 <_printf_i+0x1f4>
 8005074:	1b40      	subs	r0, r0, r5
 8005076:	6060      	str	r0, [r4, #4]
 8005078:	6863      	ldr	r3, [r4, #4]
 800507a:	6123      	str	r3, [r4, #16]
 800507c:	2300      	movs	r3, #0
 800507e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005082:	e7a8      	b.n	8004fd6 <_printf_i+0x152>
 8005084:	462a      	mov	r2, r5
 8005086:	4649      	mov	r1, r9
 8005088:	4640      	mov	r0, r8
 800508a:	6923      	ldr	r3, [r4, #16]
 800508c:	47d0      	blx	sl
 800508e:	3001      	adds	r0, #1
 8005090:	d0ab      	beq.n	8004fea <_printf_i+0x166>
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	079b      	lsls	r3, r3, #30
 8005096:	d413      	bmi.n	80050c0 <_printf_i+0x23c>
 8005098:	68e0      	ldr	r0, [r4, #12]
 800509a:	9b03      	ldr	r3, [sp, #12]
 800509c:	4298      	cmp	r0, r3
 800509e:	bfb8      	it	lt
 80050a0:	4618      	movlt	r0, r3
 80050a2:	e7a4      	b.n	8004fee <_printf_i+0x16a>
 80050a4:	2301      	movs	r3, #1
 80050a6:	4632      	mov	r2, r6
 80050a8:	4649      	mov	r1, r9
 80050aa:	4640      	mov	r0, r8
 80050ac:	47d0      	blx	sl
 80050ae:	3001      	adds	r0, #1
 80050b0:	d09b      	beq.n	8004fea <_printf_i+0x166>
 80050b2:	3501      	adds	r5, #1
 80050b4:	68e3      	ldr	r3, [r4, #12]
 80050b6:	9903      	ldr	r1, [sp, #12]
 80050b8:	1a5b      	subs	r3, r3, r1
 80050ba:	42ab      	cmp	r3, r5
 80050bc:	dcf2      	bgt.n	80050a4 <_printf_i+0x220>
 80050be:	e7eb      	b.n	8005098 <_printf_i+0x214>
 80050c0:	2500      	movs	r5, #0
 80050c2:	f104 0619 	add.w	r6, r4, #25
 80050c6:	e7f5      	b.n	80050b4 <_printf_i+0x230>
 80050c8:	08007daa 	.word	0x08007daa
 80050cc:	08007dbb 	.word	0x08007dbb

080050d0 <siprintf>:
 80050d0:	b40e      	push	{r1, r2, r3}
 80050d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050d6:	b500      	push	{lr}
 80050d8:	b09c      	sub	sp, #112	; 0x70
 80050da:	ab1d      	add	r3, sp, #116	; 0x74
 80050dc:	9002      	str	r0, [sp, #8]
 80050de:	9006      	str	r0, [sp, #24]
 80050e0:	9107      	str	r1, [sp, #28]
 80050e2:	9104      	str	r1, [sp, #16]
 80050e4:	4808      	ldr	r0, [pc, #32]	; (8005108 <siprintf+0x38>)
 80050e6:	4909      	ldr	r1, [pc, #36]	; (800510c <siprintf+0x3c>)
 80050e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80050ec:	9105      	str	r1, [sp, #20]
 80050ee:	6800      	ldr	r0, [r0, #0]
 80050f0:	a902      	add	r1, sp, #8
 80050f2:	9301      	str	r3, [sp, #4]
 80050f4:	f001 fb6e 	bl	80067d4 <_svfiprintf_r>
 80050f8:	2200      	movs	r2, #0
 80050fa:	9b02      	ldr	r3, [sp, #8]
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	b01c      	add	sp, #112	; 0x70
 8005100:	f85d eb04 	ldr.w	lr, [sp], #4
 8005104:	b003      	add	sp, #12
 8005106:	4770      	bx	lr
 8005108:	20000020 	.word	0x20000020
 800510c:	ffff0208 	.word	0xffff0208

08005110 <quorem>:
 8005110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005114:	6903      	ldr	r3, [r0, #16]
 8005116:	690c      	ldr	r4, [r1, #16]
 8005118:	4607      	mov	r7, r0
 800511a:	42a3      	cmp	r3, r4
 800511c:	f2c0 8082 	blt.w	8005224 <quorem+0x114>
 8005120:	3c01      	subs	r4, #1
 8005122:	f100 0514 	add.w	r5, r0, #20
 8005126:	f101 0814 	add.w	r8, r1, #20
 800512a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800512e:	9301      	str	r3, [sp, #4]
 8005130:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005134:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005138:	3301      	adds	r3, #1
 800513a:	429a      	cmp	r2, r3
 800513c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005140:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005144:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005148:	d331      	bcc.n	80051ae <quorem+0x9e>
 800514a:	f04f 0e00 	mov.w	lr, #0
 800514e:	4640      	mov	r0, r8
 8005150:	46ac      	mov	ip, r5
 8005152:	46f2      	mov	sl, lr
 8005154:	f850 2b04 	ldr.w	r2, [r0], #4
 8005158:	b293      	uxth	r3, r2
 800515a:	fb06 e303 	mla	r3, r6, r3, lr
 800515e:	0c12      	lsrs	r2, r2, #16
 8005160:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005164:	b29b      	uxth	r3, r3
 8005166:	fb06 e202 	mla	r2, r6, r2, lr
 800516a:	ebaa 0303 	sub.w	r3, sl, r3
 800516e:	f8dc a000 	ldr.w	sl, [ip]
 8005172:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005176:	fa1f fa8a 	uxth.w	sl, sl
 800517a:	4453      	add	r3, sl
 800517c:	f8dc a000 	ldr.w	sl, [ip]
 8005180:	b292      	uxth	r2, r2
 8005182:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005186:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800518a:	b29b      	uxth	r3, r3
 800518c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005190:	4581      	cmp	r9, r0
 8005192:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005196:	f84c 3b04 	str.w	r3, [ip], #4
 800519a:	d2db      	bcs.n	8005154 <quorem+0x44>
 800519c:	f855 300b 	ldr.w	r3, [r5, fp]
 80051a0:	b92b      	cbnz	r3, 80051ae <quorem+0x9e>
 80051a2:	9b01      	ldr	r3, [sp, #4]
 80051a4:	3b04      	subs	r3, #4
 80051a6:	429d      	cmp	r5, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	d32f      	bcc.n	800520c <quorem+0xfc>
 80051ac:	613c      	str	r4, [r7, #16]
 80051ae:	4638      	mov	r0, r7
 80051b0:	f001 f8c0 	bl	8006334 <__mcmp>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	db25      	blt.n	8005204 <quorem+0xf4>
 80051b8:	4628      	mov	r0, r5
 80051ba:	f04f 0c00 	mov.w	ip, #0
 80051be:	3601      	adds	r6, #1
 80051c0:	f858 1b04 	ldr.w	r1, [r8], #4
 80051c4:	f8d0 e000 	ldr.w	lr, [r0]
 80051c8:	b28b      	uxth	r3, r1
 80051ca:	ebac 0303 	sub.w	r3, ip, r3
 80051ce:	fa1f f28e 	uxth.w	r2, lr
 80051d2:	4413      	add	r3, r2
 80051d4:	0c0a      	lsrs	r2, r1, #16
 80051d6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80051da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051de:	b29b      	uxth	r3, r3
 80051e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051e4:	45c1      	cmp	r9, r8
 80051e6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80051ea:	f840 3b04 	str.w	r3, [r0], #4
 80051ee:	d2e7      	bcs.n	80051c0 <quorem+0xb0>
 80051f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051f8:	b922      	cbnz	r2, 8005204 <quorem+0xf4>
 80051fa:	3b04      	subs	r3, #4
 80051fc:	429d      	cmp	r5, r3
 80051fe:	461a      	mov	r2, r3
 8005200:	d30a      	bcc.n	8005218 <quorem+0x108>
 8005202:	613c      	str	r4, [r7, #16]
 8005204:	4630      	mov	r0, r6
 8005206:	b003      	add	sp, #12
 8005208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800520c:	6812      	ldr	r2, [r2, #0]
 800520e:	3b04      	subs	r3, #4
 8005210:	2a00      	cmp	r2, #0
 8005212:	d1cb      	bne.n	80051ac <quorem+0x9c>
 8005214:	3c01      	subs	r4, #1
 8005216:	e7c6      	b.n	80051a6 <quorem+0x96>
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	3b04      	subs	r3, #4
 800521c:	2a00      	cmp	r2, #0
 800521e:	d1f0      	bne.n	8005202 <quorem+0xf2>
 8005220:	3c01      	subs	r4, #1
 8005222:	e7eb      	b.n	80051fc <quorem+0xec>
 8005224:	2000      	movs	r0, #0
 8005226:	e7ee      	b.n	8005206 <quorem+0xf6>

08005228 <_dtoa_r>:
 8005228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800522c:	4616      	mov	r6, r2
 800522e:	461f      	mov	r7, r3
 8005230:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005232:	b099      	sub	sp, #100	; 0x64
 8005234:	4605      	mov	r5, r0
 8005236:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800523a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800523e:	b974      	cbnz	r4, 800525e <_dtoa_r+0x36>
 8005240:	2010      	movs	r0, #16
 8005242:	f000 fde3 	bl	8005e0c <malloc>
 8005246:	4602      	mov	r2, r0
 8005248:	6268      	str	r0, [r5, #36]	; 0x24
 800524a:	b920      	cbnz	r0, 8005256 <_dtoa_r+0x2e>
 800524c:	21ea      	movs	r1, #234	; 0xea
 800524e:	4ba8      	ldr	r3, [pc, #672]	; (80054f0 <_dtoa_r+0x2c8>)
 8005250:	48a8      	ldr	r0, [pc, #672]	; (80054f4 <_dtoa_r+0x2cc>)
 8005252:	f001 fbcf 	bl	80069f4 <__assert_func>
 8005256:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800525a:	6004      	str	r4, [r0, #0]
 800525c:	60c4      	str	r4, [r0, #12]
 800525e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005260:	6819      	ldr	r1, [r3, #0]
 8005262:	b151      	cbz	r1, 800527a <_dtoa_r+0x52>
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	2301      	movs	r3, #1
 8005268:	4093      	lsls	r3, r2
 800526a:	604a      	str	r2, [r1, #4]
 800526c:	608b      	str	r3, [r1, #8]
 800526e:	4628      	mov	r0, r5
 8005270:	f000 fe22 	bl	8005eb8 <_Bfree>
 8005274:	2200      	movs	r2, #0
 8005276:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	1e3b      	subs	r3, r7, #0
 800527c:	bfaf      	iteee	ge
 800527e:	2300      	movge	r3, #0
 8005280:	2201      	movlt	r2, #1
 8005282:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005286:	9305      	strlt	r3, [sp, #20]
 8005288:	bfa8      	it	ge
 800528a:	f8c8 3000 	strge.w	r3, [r8]
 800528e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005292:	4b99      	ldr	r3, [pc, #612]	; (80054f8 <_dtoa_r+0x2d0>)
 8005294:	bfb8      	it	lt
 8005296:	f8c8 2000 	strlt.w	r2, [r8]
 800529a:	ea33 0309 	bics.w	r3, r3, r9
 800529e:	d119      	bne.n	80052d4 <_dtoa_r+0xac>
 80052a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80052a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80052ac:	4333      	orrs	r3, r6
 80052ae:	f000 857f 	beq.w	8005db0 <_dtoa_r+0xb88>
 80052b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80052b4:	b953      	cbnz	r3, 80052cc <_dtoa_r+0xa4>
 80052b6:	4b91      	ldr	r3, [pc, #580]	; (80054fc <_dtoa_r+0x2d4>)
 80052b8:	e022      	b.n	8005300 <_dtoa_r+0xd8>
 80052ba:	4b91      	ldr	r3, [pc, #580]	; (8005500 <_dtoa_r+0x2d8>)
 80052bc:	9303      	str	r3, [sp, #12]
 80052be:	3308      	adds	r3, #8
 80052c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80052c2:	6013      	str	r3, [r2, #0]
 80052c4:	9803      	ldr	r0, [sp, #12]
 80052c6:	b019      	add	sp, #100	; 0x64
 80052c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052cc:	4b8b      	ldr	r3, [pc, #556]	; (80054fc <_dtoa_r+0x2d4>)
 80052ce:	9303      	str	r3, [sp, #12]
 80052d0:	3303      	adds	r3, #3
 80052d2:	e7f5      	b.n	80052c0 <_dtoa_r+0x98>
 80052d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80052d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80052dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052e0:	2200      	movs	r2, #0
 80052e2:	2300      	movs	r3, #0
 80052e4:	f7fb fb60 	bl	80009a8 <__aeabi_dcmpeq>
 80052e8:	4680      	mov	r8, r0
 80052ea:	b158      	cbz	r0, 8005304 <_dtoa_r+0xdc>
 80052ec:	2301      	movs	r3, #1
 80052ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 8558 	beq.w	8005daa <_dtoa_r+0xb82>
 80052fa:	4882      	ldr	r0, [pc, #520]	; (8005504 <_dtoa_r+0x2dc>)
 80052fc:	6018      	str	r0, [r3, #0]
 80052fe:	1e43      	subs	r3, r0, #1
 8005300:	9303      	str	r3, [sp, #12]
 8005302:	e7df      	b.n	80052c4 <_dtoa_r+0x9c>
 8005304:	ab16      	add	r3, sp, #88	; 0x58
 8005306:	9301      	str	r3, [sp, #4]
 8005308:	ab17      	add	r3, sp, #92	; 0x5c
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	4628      	mov	r0, r5
 800530e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005312:	f001 f8b7 	bl	8006484 <__d2b>
 8005316:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800531a:	4683      	mov	fp, r0
 800531c:	2c00      	cmp	r4, #0
 800531e:	d07f      	beq.n	8005420 <_dtoa_r+0x1f8>
 8005320:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005326:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800532a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800532e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005332:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005336:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800533a:	2200      	movs	r2, #0
 800533c:	4b72      	ldr	r3, [pc, #456]	; (8005508 <_dtoa_r+0x2e0>)
 800533e:	f7fa ff13 	bl	8000168 <__aeabi_dsub>
 8005342:	a365      	add	r3, pc, #404	; (adr r3, 80054d8 <_dtoa_r+0x2b0>)
 8005344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005348:	f7fb f8c6 	bl	80004d8 <__aeabi_dmul>
 800534c:	a364      	add	r3, pc, #400	; (adr r3, 80054e0 <_dtoa_r+0x2b8>)
 800534e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005352:	f7fa ff0b 	bl	800016c <__adddf3>
 8005356:	4606      	mov	r6, r0
 8005358:	4620      	mov	r0, r4
 800535a:	460f      	mov	r7, r1
 800535c:	f7fb f852 	bl	8000404 <__aeabi_i2d>
 8005360:	a361      	add	r3, pc, #388	; (adr r3, 80054e8 <_dtoa_r+0x2c0>)
 8005362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005366:	f7fb f8b7 	bl	80004d8 <__aeabi_dmul>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4630      	mov	r0, r6
 8005370:	4639      	mov	r1, r7
 8005372:	f7fa fefb 	bl	800016c <__adddf3>
 8005376:	4606      	mov	r6, r0
 8005378:	460f      	mov	r7, r1
 800537a:	f7fb fb5d 	bl	8000a38 <__aeabi_d2iz>
 800537e:	2200      	movs	r2, #0
 8005380:	4682      	mov	sl, r0
 8005382:	2300      	movs	r3, #0
 8005384:	4630      	mov	r0, r6
 8005386:	4639      	mov	r1, r7
 8005388:	f7fb fb18 	bl	80009bc <__aeabi_dcmplt>
 800538c:	b148      	cbz	r0, 80053a2 <_dtoa_r+0x17a>
 800538e:	4650      	mov	r0, sl
 8005390:	f7fb f838 	bl	8000404 <__aeabi_i2d>
 8005394:	4632      	mov	r2, r6
 8005396:	463b      	mov	r3, r7
 8005398:	f7fb fb06 	bl	80009a8 <__aeabi_dcmpeq>
 800539c:	b908      	cbnz	r0, 80053a2 <_dtoa_r+0x17a>
 800539e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053a2:	f1ba 0f16 	cmp.w	sl, #22
 80053a6:	d858      	bhi.n	800545a <_dtoa_r+0x232>
 80053a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053ac:	4b57      	ldr	r3, [pc, #348]	; (800550c <_dtoa_r+0x2e4>)
 80053ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80053b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b6:	f7fb fb01 	bl	80009bc <__aeabi_dcmplt>
 80053ba:	2800      	cmp	r0, #0
 80053bc:	d04f      	beq.n	800545e <_dtoa_r+0x236>
 80053be:	2300      	movs	r3, #0
 80053c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80053c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80053c8:	1b1c      	subs	r4, r3, r4
 80053ca:	1e63      	subs	r3, r4, #1
 80053cc:	9309      	str	r3, [sp, #36]	; 0x24
 80053ce:	bf49      	itett	mi
 80053d0:	f1c4 0301 	rsbmi	r3, r4, #1
 80053d4:	2300      	movpl	r3, #0
 80053d6:	9306      	strmi	r3, [sp, #24]
 80053d8:	2300      	movmi	r3, #0
 80053da:	bf54      	ite	pl
 80053dc:	9306      	strpl	r3, [sp, #24]
 80053de:	9309      	strmi	r3, [sp, #36]	; 0x24
 80053e0:	f1ba 0f00 	cmp.w	sl, #0
 80053e4:	db3d      	blt.n	8005462 <_dtoa_r+0x23a>
 80053e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80053ec:	4453      	add	r3, sl
 80053ee:	9309      	str	r3, [sp, #36]	; 0x24
 80053f0:	2300      	movs	r3, #0
 80053f2:	930a      	str	r3, [sp, #40]	; 0x28
 80053f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053f6:	2b09      	cmp	r3, #9
 80053f8:	f200 808c 	bhi.w	8005514 <_dtoa_r+0x2ec>
 80053fc:	2b05      	cmp	r3, #5
 80053fe:	bfc4      	itt	gt
 8005400:	3b04      	subgt	r3, #4
 8005402:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005404:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005406:	bfc8      	it	gt
 8005408:	2400      	movgt	r4, #0
 800540a:	f1a3 0302 	sub.w	r3, r3, #2
 800540e:	bfd8      	it	le
 8005410:	2401      	movle	r4, #1
 8005412:	2b03      	cmp	r3, #3
 8005414:	f200 808a 	bhi.w	800552c <_dtoa_r+0x304>
 8005418:	e8df f003 	tbb	[pc, r3]
 800541c:	5b4d4f2d 	.word	0x5b4d4f2d
 8005420:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005424:	441c      	add	r4, r3
 8005426:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800542a:	2b20      	cmp	r3, #32
 800542c:	bfc3      	ittte	gt
 800542e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005432:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005436:	fa09 f303 	lslgt.w	r3, r9, r3
 800543a:	f1c3 0320 	rsble	r3, r3, #32
 800543e:	bfc6      	itte	gt
 8005440:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005444:	4318      	orrgt	r0, r3
 8005446:	fa06 f003 	lslle.w	r0, r6, r3
 800544a:	f7fa ffcb 	bl	80003e4 <__aeabi_ui2d>
 800544e:	2301      	movs	r3, #1
 8005450:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005454:	3c01      	subs	r4, #1
 8005456:	9313      	str	r3, [sp, #76]	; 0x4c
 8005458:	e76f      	b.n	800533a <_dtoa_r+0x112>
 800545a:	2301      	movs	r3, #1
 800545c:	e7b2      	b.n	80053c4 <_dtoa_r+0x19c>
 800545e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005460:	e7b1      	b.n	80053c6 <_dtoa_r+0x19e>
 8005462:	9b06      	ldr	r3, [sp, #24]
 8005464:	eba3 030a 	sub.w	r3, r3, sl
 8005468:	9306      	str	r3, [sp, #24]
 800546a:	f1ca 0300 	rsb	r3, sl, #0
 800546e:	930a      	str	r3, [sp, #40]	; 0x28
 8005470:	2300      	movs	r3, #0
 8005472:	930e      	str	r3, [sp, #56]	; 0x38
 8005474:	e7be      	b.n	80053f4 <_dtoa_r+0x1cc>
 8005476:	2300      	movs	r3, #0
 8005478:	930b      	str	r3, [sp, #44]	; 0x2c
 800547a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800547c:	2b00      	cmp	r3, #0
 800547e:	dc58      	bgt.n	8005532 <_dtoa_r+0x30a>
 8005480:	f04f 0901 	mov.w	r9, #1
 8005484:	464b      	mov	r3, r9
 8005486:	f8cd 9020 	str.w	r9, [sp, #32]
 800548a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800548e:	2200      	movs	r2, #0
 8005490:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005492:	6042      	str	r2, [r0, #4]
 8005494:	2204      	movs	r2, #4
 8005496:	f102 0614 	add.w	r6, r2, #20
 800549a:	429e      	cmp	r6, r3
 800549c:	6841      	ldr	r1, [r0, #4]
 800549e:	d94e      	bls.n	800553e <_dtoa_r+0x316>
 80054a0:	4628      	mov	r0, r5
 80054a2:	f000 fcc9 	bl	8005e38 <_Balloc>
 80054a6:	9003      	str	r0, [sp, #12]
 80054a8:	2800      	cmp	r0, #0
 80054aa:	d14c      	bne.n	8005546 <_dtoa_r+0x31e>
 80054ac:	4602      	mov	r2, r0
 80054ae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80054b2:	4b17      	ldr	r3, [pc, #92]	; (8005510 <_dtoa_r+0x2e8>)
 80054b4:	e6cc      	b.n	8005250 <_dtoa_r+0x28>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e7de      	b.n	8005478 <_dtoa_r+0x250>
 80054ba:	2300      	movs	r3, #0
 80054bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80054be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80054c0:	eb0a 0903 	add.w	r9, sl, r3
 80054c4:	f109 0301 	add.w	r3, r9, #1
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	9308      	str	r3, [sp, #32]
 80054cc:	bfb8      	it	lt
 80054ce:	2301      	movlt	r3, #1
 80054d0:	e7dd      	b.n	800548e <_dtoa_r+0x266>
 80054d2:	2301      	movs	r3, #1
 80054d4:	e7f2      	b.n	80054bc <_dtoa_r+0x294>
 80054d6:	bf00      	nop
 80054d8:	636f4361 	.word	0x636f4361
 80054dc:	3fd287a7 	.word	0x3fd287a7
 80054e0:	8b60c8b3 	.word	0x8b60c8b3
 80054e4:	3fc68a28 	.word	0x3fc68a28
 80054e8:	509f79fb 	.word	0x509f79fb
 80054ec:	3fd34413 	.word	0x3fd34413
 80054f0:	08007dd9 	.word	0x08007dd9
 80054f4:	08007df0 	.word	0x08007df0
 80054f8:	7ff00000 	.word	0x7ff00000
 80054fc:	08007dd5 	.word	0x08007dd5
 8005500:	08007dcc 	.word	0x08007dcc
 8005504:	08007da9 	.word	0x08007da9
 8005508:	3ff80000 	.word	0x3ff80000
 800550c:	08007ee0 	.word	0x08007ee0
 8005510:	08007e4b 	.word	0x08007e4b
 8005514:	2401      	movs	r4, #1
 8005516:	2300      	movs	r3, #0
 8005518:	940b      	str	r4, [sp, #44]	; 0x2c
 800551a:	9322      	str	r3, [sp, #136]	; 0x88
 800551c:	f04f 39ff 	mov.w	r9, #4294967295
 8005520:	2200      	movs	r2, #0
 8005522:	2312      	movs	r3, #18
 8005524:	f8cd 9020 	str.w	r9, [sp, #32]
 8005528:	9223      	str	r2, [sp, #140]	; 0x8c
 800552a:	e7b0      	b.n	800548e <_dtoa_r+0x266>
 800552c:	2301      	movs	r3, #1
 800552e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005530:	e7f4      	b.n	800551c <_dtoa_r+0x2f4>
 8005532:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005536:	464b      	mov	r3, r9
 8005538:	f8cd 9020 	str.w	r9, [sp, #32]
 800553c:	e7a7      	b.n	800548e <_dtoa_r+0x266>
 800553e:	3101      	adds	r1, #1
 8005540:	6041      	str	r1, [r0, #4]
 8005542:	0052      	lsls	r2, r2, #1
 8005544:	e7a7      	b.n	8005496 <_dtoa_r+0x26e>
 8005546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005548:	9a03      	ldr	r2, [sp, #12]
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	9b08      	ldr	r3, [sp, #32]
 800554e:	2b0e      	cmp	r3, #14
 8005550:	f200 80a8 	bhi.w	80056a4 <_dtoa_r+0x47c>
 8005554:	2c00      	cmp	r4, #0
 8005556:	f000 80a5 	beq.w	80056a4 <_dtoa_r+0x47c>
 800555a:	f1ba 0f00 	cmp.w	sl, #0
 800555e:	dd34      	ble.n	80055ca <_dtoa_r+0x3a2>
 8005560:	4a9a      	ldr	r2, [pc, #616]	; (80057cc <_dtoa_r+0x5a4>)
 8005562:	f00a 030f 	and.w	r3, sl, #15
 8005566:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800556a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800556e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005572:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005576:	ea4f 142a 	mov.w	r4, sl, asr #4
 800557a:	d016      	beq.n	80055aa <_dtoa_r+0x382>
 800557c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005580:	4b93      	ldr	r3, [pc, #588]	; (80057d0 <_dtoa_r+0x5a8>)
 8005582:	2703      	movs	r7, #3
 8005584:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005588:	f7fb f8d0 	bl	800072c <__aeabi_ddiv>
 800558c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005590:	f004 040f 	and.w	r4, r4, #15
 8005594:	4e8e      	ldr	r6, [pc, #568]	; (80057d0 <_dtoa_r+0x5a8>)
 8005596:	b954      	cbnz	r4, 80055ae <_dtoa_r+0x386>
 8005598:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800559c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055a0:	f7fb f8c4 	bl	800072c <__aeabi_ddiv>
 80055a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055a8:	e029      	b.n	80055fe <_dtoa_r+0x3d6>
 80055aa:	2702      	movs	r7, #2
 80055ac:	e7f2      	b.n	8005594 <_dtoa_r+0x36c>
 80055ae:	07e1      	lsls	r1, r4, #31
 80055b0:	d508      	bpl.n	80055c4 <_dtoa_r+0x39c>
 80055b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80055ba:	f7fa ff8d 	bl	80004d8 <__aeabi_dmul>
 80055be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055c2:	3701      	adds	r7, #1
 80055c4:	1064      	asrs	r4, r4, #1
 80055c6:	3608      	adds	r6, #8
 80055c8:	e7e5      	b.n	8005596 <_dtoa_r+0x36e>
 80055ca:	f000 80a5 	beq.w	8005718 <_dtoa_r+0x4f0>
 80055ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055d2:	f1ca 0400 	rsb	r4, sl, #0
 80055d6:	4b7d      	ldr	r3, [pc, #500]	; (80057cc <_dtoa_r+0x5a4>)
 80055d8:	f004 020f 	and.w	r2, r4, #15
 80055dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e4:	f7fa ff78 	bl	80004d8 <__aeabi_dmul>
 80055e8:	2702      	movs	r7, #2
 80055ea:	2300      	movs	r3, #0
 80055ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055f0:	4e77      	ldr	r6, [pc, #476]	; (80057d0 <_dtoa_r+0x5a8>)
 80055f2:	1124      	asrs	r4, r4, #4
 80055f4:	2c00      	cmp	r4, #0
 80055f6:	f040 8084 	bne.w	8005702 <_dtoa_r+0x4da>
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1d2      	bne.n	80055a4 <_dtoa_r+0x37c>
 80055fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 808b 	beq.w	800571c <_dtoa_r+0x4f4>
 8005606:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800560a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800560e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005612:	2200      	movs	r2, #0
 8005614:	4b6f      	ldr	r3, [pc, #444]	; (80057d4 <_dtoa_r+0x5ac>)
 8005616:	f7fb f9d1 	bl	80009bc <__aeabi_dcmplt>
 800561a:	2800      	cmp	r0, #0
 800561c:	d07e      	beq.n	800571c <_dtoa_r+0x4f4>
 800561e:	9b08      	ldr	r3, [sp, #32]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d07b      	beq.n	800571c <_dtoa_r+0x4f4>
 8005624:	f1b9 0f00 	cmp.w	r9, #0
 8005628:	dd38      	ble.n	800569c <_dtoa_r+0x474>
 800562a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800562e:	2200      	movs	r2, #0
 8005630:	4b69      	ldr	r3, [pc, #420]	; (80057d8 <_dtoa_r+0x5b0>)
 8005632:	f7fa ff51 	bl	80004d8 <__aeabi_dmul>
 8005636:	464c      	mov	r4, r9
 8005638:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800563c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005640:	3701      	adds	r7, #1
 8005642:	4638      	mov	r0, r7
 8005644:	f7fa fede 	bl	8000404 <__aeabi_i2d>
 8005648:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800564c:	f7fa ff44 	bl	80004d8 <__aeabi_dmul>
 8005650:	2200      	movs	r2, #0
 8005652:	4b62      	ldr	r3, [pc, #392]	; (80057dc <_dtoa_r+0x5b4>)
 8005654:	f7fa fd8a 	bl	800016c <__adddf3>
 8005658:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800565c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005660:	9611      	str	r6, [sp, #68]	; 0x44
 8005662:	2c00      	cmp	r4, #0
 8005664:	d15d      	bne.n	8005722 <_dtoa_r+0x4fa>
 8005666:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800566a:	2200      	movs	r2, #0
 800566c:	4b5c      	ldr	r3, [pc, #368]	; (80057e0 <_dtoa_r+0x5b8>)
 800566e:	f7fa fd7b 	bl	8000168 <__aeabi_dsub>
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800567a:	4633      	mov	r3, r6
 800567c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800567e:	f7fb f9bb 	bl	80009f8 <__aeabi_dcmpgt>
 8005682:	2800      	cmp	r0, #0
 8005684:	f040 829c 	bne.w	8005bc0 <_dtoa_r+0x998>
 8005688:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800568c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800568e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005692:	f7fb f993 	bl	80009bc <__aeabi_dcmplt>
 8005696:	2800      	cmp	r0, #0
 8005698:	f040 8290 	bne.w	8005bbc <_dtoa_r+0x994>
 800569c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80056a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80056a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f2c0 8152 	blt.w	8005950 <_dtoa_r+0x728>
 80056ac:	f1ba 0f0e 	cmp.w	sl, #14
 80056b0:	f300 814e 	bgt.w	8005950 <_dtoa_r+0x728>
 80056b4:	4b45      	ldr	r3, [pc, #276]	; (80057cc <_dtoa_r+0x5a4>)
 80056b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80056ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80056be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80056c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f280 80db 	bge.w	8005880 <_dtoa_r+0x658>
 80056ca:	9b08      	ldr	r3, [sp, #32]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f300 80d7 	bgt.w	8005880 <_dtoa_r+0x658>
 80056d2:	f040 8272 	bne.w	8005bba <_dtoa_r+0x992>
 80056d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056da:	2200      	movs	r2, #0
 80056dc:	4b40      	ldr	r3, [pc, #256]	; (80057e0 <_dtoa_r+0x5b8>)
 80056de:	f7fa fefb 	bl	80004d8 <__aeabi_dmul>
 80056e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056e6:	f7fb f97d 	bl	80009e4 <__aeabi_dcmpge>
 80056ea:	9c08      	ldr	r4, [sp, #32]
 80056ec:	4626      	mov	r6, r4
 80056ee:	2800      	cmp	r0, #0
 80056f0:	f040 8248 	bne.w	8005b84 <_dtoa_r+0x95c>
 80056f4:	2331      	movs	r3, #49	; 0x31
 80056f6:	9f03      	ldr	r7, [sp, #12]
 80056f8:	f10a 0a01 	add.w	sl, sl, #1
 80056fc:	f807 3b01 	strb.w	r3, [r7], #1
 8005700:	e244      	b.n	8005b8c <_dtoa_r+0x964>
 8005702:	07e2      	lsls	r2, r4, #31
 8005704:	d505      	bpl.n	8005712 <_dtoa_r+0x4ea>
 8005706:	e9d6 2300 	ldrd	r2, r3, [r6]
 800570a:	f7fa fee5 	bl	80004d8 <__aeabi_dmul>
 800570e:	2301      	movs	r3, #1
 8005710:	3701      	adds	r7, #1
 8005712:	1064      	asrs	r4, r4, #1
 8005714:	3608      	adds	r6, #8
 8005716:	e76d      	b.n	80055f4 <_dtoa_r+0x3cc>
 8005718:	2702      	movs	r7, #2
 800571a:	e770      	b.n	80055fe <_dtoa_r+0x3d6>
 800571c:	46d0      	mov	r8, sl
 800571e:	9c08      	ldr	r4, [sp, #32]
 8005720:	e78f      	b.n	8005642 <_dtoa_r+0x41a>
 8005722:	9903      	ldr	r1, [sp, #12]
 8005724:	4b29      	ldr	r3, [pc, #164]	; (80057cc <_dtoa_r+0x5a4>)
 8005726:	4421      	add	r1, r4
 8005728:	9112      	str	r1, [sp, #72]	; 0x48
 800572a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800572c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005730:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005734:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005738:	2900      	cmp	r1, #0
 800573a:	d055      	beq.n	80057e8 <_dtoa_r+0x5c0>
 800573c:	2000      	movs	r0, #0
 800573e:	4929      	ldr	r1, [pc, #164]	; (80057e4 <_dtoa_r+0x5bc>)
 8005740:	f7fa fff4 	bl	800072c <__aeabi_ddiv>
 8005744:	463b      	mov	r3, r7
 8005746:	4632      	mov	r2, r6
 8005748:	f7fa fd0e 	bl	8000168 <__aeabi_dsub>
 800574c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005750:	9f03      	ldr	r7, [sp, #12]
 8005752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005756:	f7fb f96f 	bl	8000a38 <__aeabi_d2iz>
 800575a:	4604      	mov	r4, r0
 800575c:	f7fa fe52 	bl	8000404 <__aeabi_i2d>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005768:	f7fa fcfe 	bl	8000168 <__aeabi_dsub>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	3430      	adds	r4, #48	; 0x30
 8005772:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005776:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800577a:	f807 4b01 	strb.w	r4, [r7], #1
 800577e:	f7fb f91d 	bl	80009bc <__aeabi_dcmplt>
 8005782:	2800      	cmp	r0, #0
 8005784:	d174      	bne.n	8005870 <_dtoa_r+0x648>
 8005786:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800578a:	2000      	movs	r0, #0
 800578c:	4911      	ldr	r1, [pc, #68]	; (80057d4 <_dtoa_r+0x5ac>)
 800578e:	f7fa fceb 	bl	8000168 <__aeabi_dsub>
 8005792:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005796:	f7fb f911 	bl	80009bc <__aeabi_dcmplt>
 800579a:	2800      	cmp	r0, #0
 800579c:	f040 80b7 	bne.w	800590e <_dtoa_r+0x6e6>
 80057a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057a2:	429f      	cmp	r7, r3
 80057a4:	f43f af7a 	beq.w	800569c <_dtoa_r+0x474>
 80057a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057ac:	2200      	movs	r2, #0
 80057ae:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <_dtoa_r+0x5b0>)
 80057b0:	f7fa fe92 	bl	80004d8 <__aeabi_dmul>
 80057b4:	2200      	movs	r2, #0
 80057b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057be:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <_dtoa_r+0x5b0>)
 80057c0:	f7fa fe8a 	bl	80004d8 <__aeabi_dmul>
 80057c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057c8:	e7c3      	b.n	8005752 <_dtoa_r+0x52a>
 80057ca:	bf00      	nop
 80057cc:	08007ee0 	.word	0x08007ee0
 80057d0:	08007eb8 	.word	0x08007eb8
 80057d4:	3ff00000 	.word	0x3ff00000
 80057d8:	40240000 	.word	0x40240000
 80057dc:	401c0000 	.word	0x401c0000
 80057e0:	40140000 	.word	0x40140000
 80057e4:	3fe00000 	.word	0x3fe00000
 80057e8:	4630      	mov	r0, r6
 80057ea:	4639      	mov	r1, r7
 80057ec:	f7fa fe74 	bl	80004d8 <__aeabi_dmul>
 80057f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057f6:	9c03      	ldr	r4, [sp, #12]
 80057f8:	9314      	str	r3, [sp, #80]	; 0x50
 80057fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057fe:	f7fb f91b 	bl	8000a38 <__aeabi_d2iz>
 8005802:	9015      	str	r0, [sp, #84]	; 0x54
 8005804:	f7fa fdfe 	bl	8000404 <__aeabi_i2d>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005810:	f7fa fcaa 	bl	8000168 <__aeabi_dsub>
 8005814:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005816:	4606      	mov	r6, r0
 8005818:	3330      	adds	r3, #48	; 0x30
 800581a:	f804 3b01 	strb.w	r3, [r4], #1
 800581e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005820:	460f      	mov	r7, r1
 8005822:	429c      	cmp	r4, r3
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	d124      	bne.n	8005874 <_dtoa_r+0x64c>
 800582a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800582e:	4bb0      	ldr	r3, [pc, #704]	; (8005af0 <_dtoa_r+0x8c8>)
 8005830:	f7fa fc9c 	bl	800016c <__adddf3>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	4630      	mov	r0, r6
 800583a:	4639      	mov	r1, r7
 800583c:	f7fb f8dc 	bl	80009f8 <__aeabi_dcmpgt>
 8005840:	2800      	cmp	r0, #0
 8005842:	d163      	bne.n	800590c <_dtoa_r+0x6e4>
 8005844:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005848:	2000      	movs	r0, #0
 800584a:	49a9      	ldr	r1, [pc, #676]	; (8005af0 <_dtoa_r+0x8c8>)
 800584c:	f7fa fc8c 	bl	8000168 <__aeabi_dsub>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	4630      	mov	r0, r6
 8005856:	4639      	mov	r1, r7
 8005858:	f7fb f8b0 	bl	80009bc <__aeabi_dcmplt>
 800585c:	2800      	cmp	r0, #0
 800585e:	f43f af1d 	beq.w	800569c <_dtoa_r+0x474>
 8005862:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005864:	1e7b      	subs	r3, r7, #1
 8005866:	9314      	str	r3, [sp, #80]	; 0x50
 8005868:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800586c:	2b30      	cmp	r3, #48	; 0x30
 800586e:	d0f8      	beq.n	8005862 <_dtoa_r+0x63a>
 8005870:	46c2      	mov	sl, r8
 8005872:	e03b      	b.n	80058ec <_dtoa_r+0x6c4>
 8005874:	4b9f      	ldr	r3, [pc, #636]	; (8005af4 <_dtoa_r+0x8cc>)
 8005876:	f7fa fe2f 	bl	80004d8 <__aeabi_dmul>
 800587a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800587e:	e7bc      	b.n	80057fa <_dtoa_r+0x5d2>
 8005880:	9f03      	ldr	r7, [sp, #12]
 8005882:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005886:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800588a:	4640      	mov	r0, r8
 800588c:	4649      	mov	r1, r9
 800588e:	f7fa ff4d 	bl	800072c <__aeabi_ddiv>
 8005892:	f7fb f8d1 	bl	8000a38 <__aeabi_d2iz>
 8005896:	4604      	mov	r4, r0
 8005898:	f7fa fdb4 	bl	8000404 <__aeabi_i2d>
 800589c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058a0:	f7fa fe1a 	bl	80004d8 <__aeabi_dmul>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4640      	mov	r0, r8
 80058aa:	4649      	mov	r1, r9
 80058ac:	f7fa fc5c 	bl	8000168 <__aeabi_dsub>
 80058b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80058b4:	f807 6b01 	strb.w	r6, [r7], #1
 80058b8:	9e03      	ldr	r6, [sp, #12]
 80058ba:	f8dd c020 	ldr.w	ip, [sp, #32]
 80058be:	1bbe      	subs	r6, r7, r6
 80058c0:	45b4      	cmp	ip, r6
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	d136      	bne.n	8005936 <_dtoa_r+0x70e>
 80058c8:	f7fa fc50 	bl	800016c <__adddf3>
 80058cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058d0:	4680      	mov	r8, r0
 80058d2:	4689      	mov	r9, r1
 80058d4:	f7fb f890 	bl	80009f8 <__aeabi_dcmpgt>
 80058d8:	bb58      	cbnz	r0, 8005932 <_dtoa_r+0x70a>
 80058da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058de:	4640      	mov	r0, r8
 80058e0:	4649      	mov	r1, r9
 80058e2:	f7fb f861 	bl	80009a8 <__aeabi_dcmpeq>
 80058e6:	b108      	cbz	r0, 80058ec <_dtoa_r+0x6c4>
 80058e8:	07e1      	lsls	r1, r4, #31
 80058ea:	d422      	bmi.n	8005932 <_dtoa_r+0x70a>
 80058ec:	4628      	mov	r0, r5
 80058ee:	4659      	mov	r1, fp
 80058f0:	f000 fae2 	bl	8005eb8 <_Bfree>
 80058f4:	2300      	movs	r3, #0
 80058f6:	703b      	strb	r3, [r7, #0]
 80058f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80058fa:	f10a 0001 	add.w	r0, sl, #1
 80058fe:	6018      	str	r0, [r3, #0]
 8005900:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005902:	2b00      	cmp	r3, #0
 8005904:	f43f acde 	beq.w	80052c4 <_dtoa_r+0x9c>
 8005908:	601f      	str	r7, [r3, #0]
 800590a:	e4db      	b.n	80052c4 <_dtoa_r+0x9c>
 800590c:	4627      	mov	r7, r4
 800590e:	463b      	mov	r3, r7
 8005910:	461f      	mov	r7, r3
 8005912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005916:	2a39      	cmp	r2, #57	; 0x39
 8005918:	d107      	bne.n	800592a <_dtoa_r+0x702>
 800591a:	9a03      	ldr	r2, [sp, #12]
 800591c:	429a      	cmp	r2, r3
 800591e:	d1f7      	bne.n	8005910 <_dtoa_r+0x6e8>
 8005920:	2230      	movs	r2, #48	; 0x30
 8005922:	9903      	ldr	r1, [sp, #12]
 8005924:	f108 0801 	add.w	r8, r8, #1
 8005928:	700a      	strb	r2, [r1, #0]
 800592a:	781a      	ldrb	r2, [r3, #0]
 800592c:	3201      	adds	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	e79e      	b.n	8005870 <_dtoa_r+0x648>
 8005932:	46d0      	mov	r8, sl
 8005934:	e7eb      	b.n	800590e <_dtoa_r+0x6e6>
 8005936:	2200      	movs	r2, #0
 8005938:	4b6e      	ldr	r3, [pc, #440]	; (8005af4 <_dtoa_r+0x8cc>)
 800593a:	f7fa fdcd 	bl	80004d8 <__aeabi_dmul>
 800593e:	2200      	movs	r2, #0
 8005940:	2300      	movs	r3, #0
 8005942:	4680      	mov	r8, r0
 8005944:	4689      	mov	r9, r1
 8005946:	f7fb f82f 	bl	80009a8 <__aeabi_dcmpeq>
 800594a:	2800      	cmp	r0, #0
 800594c:	d09b      	beq.n	8005886 <_dtoa_r+0x65e>
 800594e:	e7cd      	b.n	80058ec <_dtoa_r+0x6c4>
 8005950:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005952:	2a00      	cmp	r2, #0
 8005954:	f000 80d0 	beq.w	8005af8 <_dtoa_r+0x8d0>
 8005958:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800595a:	2a01      	cmp	r2, #1
 800595c:	f300 80ae 	bgt.w	8005abc <_dtoa_r+0x894>
 8005960:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005962:	2a00      	cmp	r2, #0
 8005964:	f000 80a6 	beq.w	8005ab4 <_dtoa_r+0x88c>
 8005968:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800596c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800596e:	9f06      	ldr	r7, [sp, #24]
 8005970:	9a06      	ldr	r2, [sp, #24]
 8005972:	2101      	movs	r1, #1
 8005974:	441a      	add	r2, r3
 8005976:	9206      	str	r2, [sp, #24]
 8005978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800597a:	4628      	mov	r0, r5
 800597c:	441a      	add	r2, r3
 800597e:	9209      	str	r2, [sp, #36]	; 0x24
 8005980:	f000 fb50 	bl	8006024 <__i2b>
 8005984:	4606      	mov	r6, r0
 8005986:	2f00      	cmp	r7, #0
 8005988:	dd0c      	ble.n	80059a4 <_dtoa_r+0x77c>
 800598a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800598c:	2b00      	cmp	r3, #0
 800598e:	dd09      	ble.n	80059a4 <_dtoa_r+0x77c>
 8005990:	42bb      	cmp	r3, r7
 8005992:	bfa8      	it	ge
 8005994:	463b      	movge	r3, r7
 8005996:	9a06      	ldr	r2, [sp, #24]
 8005998:	1aff      	subs	r7, r7, r3
 800599a:	1ad2      	subs	r2, r2, r3
 800599c:	9206      	str	r2, [sp, #24]
 800599e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	9309      	str	r3, [sp, #36]	; 0x24
 80059a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059a6:	b1f3      	cbz	r3, 80059e6 <_dtoa_r+0x7be>
 80059a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 80a8 	beq.w	8005b00 <_dtoa_r+0x8d8>
 80059b0:	2c00      	cmp	r4, #0
 80059b2:	dd10      	ble.n	80059d6 <_dtoa_r+0x7ae>
 80059b4:	4631      	mov	r1, r6
 80059b6:	4622      	mov	r2, r4
 80059b8:	4628      	mov	r0, r5
 80059ba:	f000 fbf1 	bl	80061a0 <__pow5mult>
 80059be:	465a      	mov	r2, fp
 80059c0:	4601      	mov	r1, r0
 80059c2:	4606      	mov	r6, r0
 80059c4:	4628      	mov	r0, r5
 80059c6:	f000 fb43 	bl	8006050 <__multiply>
 80059ca:	4680      	mov	r8, r0
 80059cc:	4659      	mov	r1, fp
 80059ce:	4628      	mov	r0, r5
 80059d0:	f000 fa72 	bl	8005eb8 <_Bfree>
 80059d4:	46c3      	mov	fp, r8
 80059d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d8:	1b1a      	subs	r2, r3, r4
 80059da:	d004      	beq.n	80059e6 <_dtoa_r+0x7be>
 80059dc:	4659      	mov	r1, fp
 80059de:	4628      	mov	r0, r5
 80059e0:	f000 fbde 	bl	80061a0 <__pow5mult>
 80059e4:	4683      	mov	fp, r0
 80059e6:	2101      	movs	r1, #1
 80059e8:	4628      	mov	r0, r5
 80059ea:	f000 fb1b 	bl	8006024 <__i2b>
 80059ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059f0:	4604      	mov	r4, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f340 8086 	ble.w	8005b04 <_dtoa_r+0x8dc>
 80059f8:	461a      	mov	r2, r3
 80059fa:	4601      	mov	r1, r0
 80059fc:	4628      	mov	r0, r5
 80059fe:	f000 fbcf 	bl	80061a0 <__pow5mult>
 8005a02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a04:	4604      	mov	r4, r0
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	dd7f      	ble.n	8005b0a <_dtoa_r+0x8e2>
 8005a0a:	f04f 0800 	mov.w	r8, #0
 8005a0e:	6923      	ldr	r3, [r4, #16]
 8005a10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a14:	6918      	ldr	r0, [r3, #16]
 8005a16:	f000 fab7 	bl	8005f88 <__hi0bits>
 8005a1a:	f1c0 0020 	rsb	r0, r0, #32
 8005a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a20:	4418      	add	r0, r3
 8005a22:	f010 001f 	ands.w	r0, r0, #31
 8005a26:	f000 8092 	beq.w	8005b4e <_dtoa_r+0x926>
 8005a2a:	f1c0 0320 	rsb	r3, r0, #32
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	f340 808a 	ble.w	8005b48 <_dtoa_r+0x920>
 8005a34:	f1c0 001c 	rsb	r0, r0, #28
 8005a38:	9b06      	ldr	r3, [sp, #24]
 8005a3a:	4407      	add	r7, r0
 8005a3c:	4403      	add	r3, r0
 8005a3e:	9306      	str	r3, [sp, #24]
 8005a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a42:	4403      	add	r3, r0
 8005a44:	9309      	str	r3, [sp, #36]	; 0x24
 8005a46:	9b06      	ldr	r3, [sp, #24]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	dd05      	ble.n	8005a58 <_dtoa_r+0x830>
 8005a4c:	4659      	mov	r1, fp
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4628      	mov	r0, r5
 8005a52:	f000 fbff 	bl	8006254 <__lshift>
 8005a56:	4683      	mov	fp, r0
 8005a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	dd05      	ble.n	8005a6a <_dtoa_r+0x842>
 8005a5e:	4621      	mov	r1, r4
 8005a60:	461a      	mov	r2, r3
 8005a62:	4628      	mov	r0, r5
 8005a64:	f000 fbf6 	bl	8006254 <__lshift>
 8005a68:	4604      	mov	r4, r0
 8005a6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d070      	beq.n	8005b52 <_dtoa_r+0x92a>
 8005a70:	4621      	mov	r1, r4
 8005a72:	4658      	mov	r0, fp
 8005a74:	f000 fc5e 	bl	8006334 <__mcmp>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	da6a      	bge.n	8005b52 <_dtoa_r+0x92a>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	4659      	mov	r1, fp
 8005a80:	220a      	movs	r2, #10
 8005a82:	4628      	mov	r0, r5
 8005a84:	f000 fa3a 	bl	8005efc <__multadd>
 8005a88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a8a:	4683      	mov	fp, r0
 8005a8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 8194 	beq.w	8005dbe <_dtoa_r+0xb96>
 8005a96:	4631      	mov	r1, r6
 8005a98:	2300      	movs	r3, #0
 8005a9a:	220a      	movs	r2, #10
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	f000 fa2d 	bl	8005efc <__multadd>
 8005aa2:	f1b9 0f00 	cmp.w	r9, #0
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	f300 8093 	bgt.w	8005bd2 <_dtoa_r+0x9aa>
 8005aac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	dc57      	bgt.n	8005b62 <_dtoa_r+0x93a>
 8005ab2:	e08e      	b.n	8005bd2 <_dtoa_r+0x9aa>
 8005ab4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ab6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005aba:	e757      	b.n	800596c <_dtoa_r+0x744>
 8005abc:	9b08      	ldr	r3, [sp, #32]
 8005abe:	1e5c      	subs	r4, r3, #1
 8005ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac2:	42a3      	cmp	r3, r4
 8005ac4:	bfb7      	itett	lt
 8005ac6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005ac8:	1b1c      	subge	r4, r3, r4
 8005aca:	1ae2      	sublt	r2, r4, r3
 8005acc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005ace:	bfbe      	ittt	lt
 8005ad0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005ad2:	189b      	addlt	r3, r3, r2
 8005ad4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005ad6:	9b08      	ldr	r3, [sp, #32]
 8005ad8:	bfb8      	it	lt
 8005ada:	2400      	movlt	r4, #0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	bfbb      	ittet	lt
 8005ae0:	9b06      	ldrlt	r3, [sp, #24]
 8005ae2:	9a08      	ldrlt	r2, [sp, #32]
 8005ae4:	9f06      	ldrge	r7, [sp, #24]
 8005ae6:	1a9f      	sublt	r7, r3, r2
 8005ae8:	bfac      	ite	ge
 8005aea:	9b08      	ldrge	r3, [sp, #32]
 8005aec:	2300      	movlt	r3, #0
 8005aee:	e73f      	b.n	8005970 <_dtoa_r+0x748>
 8005af0:	3fe00000 	.word	0x3fe00000
 8005af4:	40240000 	.word	0x40240000
 8005af8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005afa:	9f06      	ldr	r7, [sp, #24]
 8005afc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005afe:	e742      	b.n	8005986 <_dtoa_r+0x75e>
 8005b00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b02:	e76b      	b.n	80059dc <_dtoa_r+0x7b4>
 8005b04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	dc19      	bgt.n	8005b3e <_dtoa_r+0x916>
 8005b0a:	9b04      	ldr	r3, [sp, #16]
 8005b0c:	b9bb      	cbnz	r3, 8005b3e <_dtoa_r+0x916>
 8005b0e:	9b05      	ldr	r3, [sp, #20]
 8005b10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b14:	b99b      	cbnz	r3, 8005b3e <_dtoa_r+0x916>
 8005b16:	9b05      	ldr	r3, [sp, #20]
 8005b18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b1c:	0d1b      	lsrs	r3, r3, #20
 8005b1e:	051b      	lsls	r3, r3, #20
 8005b20:	b183      	cbz	r3, 8005b44 <_dtoa_r+0x91c>
 8005b22:	f04f 0801 	mov.w	r8, #1
 8005b26:	9b06      	ldr	r3, [sp, #24]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	9306      	str	r3, [sp, #24]
 8005b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b2e:	3301      	adds	r3, #1
 8005b30:	9309      	str	r3, [sp, #36]	; 0x24
 8005b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f47f af6a 	bne.w	8005a0e <_dtoa_r+0x7e6>
 8005b3a:	2001      	movs	r0, #1
 8005b3c:	e76f      	b.n	8005a1e <_dtoa_r+0x7f6>
 8005b3e:	f04f 0800 	mov.w	r8, #0
 8005b42:	e7f6      	b.n	8005b32 <_dtoa_r+0x90a>
 8005b44:	4698      	mov	r8, r3
 8005b46:	e7f4      	b.n	8005b32 <_dtoa_r+0x90a>
 8005b48:	f43f af7d 	beq.w	8005a46 <_dtoa_r+0x81e>
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	301c      	adds	r0, #28
 8005b50:	e772      	b.n	8005a38 <_dtoa_r+0x810>
 8005b52:	9b08      	ldr	r3, [sp, #32]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	dc36      	bgt.n	8005bc6 <_dtoa_r+0x99e>
 8005b58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	dd33      	ble.n	8005bc6 <_dtoa_r+0x99e>
 8005b5e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b62:	f1b9 0f00 	cmp.w	r9, #0
 8005b66:	d10d      	bne.n	8005b84 <_dtoa_r+0x95c>
 8005b68:	4621      	mov	r1, r4
 8005b6a:	464b      	mov	r3, r9
 8005b6c:	2205      	movs	r2, #5
 8005b6e:	4628      	mov	r0, r5
 8005b70:	f000 f9c4 	bl	8005efc <__multadd>
 8005b74:	4601      	mov	r1, r0
 8005b76:	4604      	mov	r4, r0
 8005b78:	4658      	mov	r0, fp
 8005b7a:	f000 fbdb 	bl	8006334 <__mcmp>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	f73f adb8 	bgt.w	80056f4 <_dtoa_r+0x4cc>
 8005b84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b86:	9f03      	ldr	r7, [sp, #12]
 8005b88:	ea6f 0a03 	mvn.w	sl, r3
 8005b8c:	f04f 0800 	mov.w	r8, #0
 8005b90:	4621      	mov	r1, r4
 8005b92:	4628      	mov	r0, r5
 8005b94:	f000 f990 	bl	8005eb8 <_Bfree>
 8005b98:	2e00      	cmp	r6, #0
 8005b9a:	f43f aea7 	beq.w	80058ec <_dtoa_r+0x6c4>
 8005b9e:	f1b8 0f00 	cmp.w	r8, #0
 8005ba2:	d005      	beq.n	8005bb0 <_dtoa_r+0x988>
 8005ba4:	45b0      	cmp	r8, r6
 8005ba6:	d003      	beq.n	8005bb0 <_dtoa_r+0x988>
 8005ba8:	4641      	mov	r1, r8
 8005baa:	4628      	mov	r0, r5
 8005bac:	f000 f984 	bl	8005eb8 <_Bfree>
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	f000 f980 	bl	8005eb8 <_Bfree>
 8005bb8:	e698      	b.n	80058ec <_dtoa_r+0x6c4>
 8005bba:	2400      	movs	r4, #0
 8005bbc:	4626      	mov	r6, r4
 8005bbe:	e7e1      	b.n	8005b84 <_dtoa_r+0x95c>
 8005bc0:	46c2      	mov	sl, r8
 8005bc2:	4626      	mov	r6, r4
 8005bc4:	e596      	b.n	80056f4 <_dtoa_r+0x4cc>
 8005bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 80fd 	beq.w	8005dcc <_dtoa_r+0xba4>
 8005bd2:	2f00      	cmp	r7, #0
 8005bd4:	dd05      	ble.n	8005be2 <_dtoa_r+0x9ba>
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	463a      	mov	r2, r7
 8005bda:	4628      	mov	r0, r5
 8005bdc:	f000 fb3a 	bl	8006254 <__lshift>
 8005be0:	4606      	mov	r6, r0
 8005be2:	f1b8 0f00 	cmp.w	r8, #0
 8005be6:	d05c      	beq.n	8005ca2 <_dtoa_r+0xa7a>
 8005be8:	4628      	mov	r0, r5
 8005bea:	6871      	ldr	r1, [r6, #4]
 8005bec:	f000 f924 	bl	8005e38 <_Balloc>
 8005bf0:	4607      	mov	r7, r0
 8005bf2:	b928      	cbnz	r0, 8005c00 <_dtoa_r+0x9d8>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005bfa:	4b7f      	ldr	r3, [pc, #508]	; (8005df8 <_dtoa_r+0xbd0>)
 8005bfc:	f7ff bb28 	b.w	8005250 <_dtoa_r+0x28>
 8005c00:	6932      	ldr	r2, [r6, #16]
 8005c02:	f106 010c 	add.w	r1, r6, #12
 8005c06:	3202      	adds	r2, #2
 8005c08:	0092      	lsls	r2, r2, #2
 8005c0a:	300c      	adds	r0, #12
 8005c0c:	f7fe fdd0 	bl	80047b0 <memcpy>
 8005c10:	2201      	movs	r2, #1
 8005c12:	4639      	mov	r1, r7
 8005c14:	4628      	mov	r0, r5
 8005c16:	f000 fb1d 	bl	8006254 <__lshift>
 8005c1a:	46b0      	mov	r8, r6
 8005c1c:	4606      	mov	r6, r0
 8005c1e:	9b03      	ldr	r3, [sp, #12]
 8005c20:	3301      	adds	r3, #1
 8005c22:	9308      	str	r3, [sp, #32]
 8005c24:	9b03      	ldr	r3, [sp, #12]
 8005c26:	444b      	add	r3, r9
 8005c28:	930a      	str	r3, [sp, #40]	; 0x28
 8005c2a:	9b04      	ldr	r3, [sp, #16]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	9309      	str	r3, [sp, #36]	; 0x24
 8005c32:	9b08      	ldr	r3, [sp, #32]
 8005c34:	4621      	mov	r1, r4
 8005c36:	3b01      	subs	r3, #1
 8005c38:	4658      	mov	r0, fp
 8005c3a:	9304      	str	r3, [sp, #16]
 8005c3c:	f7ff fa68 	bl	8005110 <quorem>
 8005c40:	4603      	mov	r3, r0
 8005c42:	4641      	mov	r1, r8
 8005c44:	3330      	adds	r3, #48	; 0x30
 8005c46:	9006      	str	r0, [sp, #24]
 8005c48:	4658      	mov	r0, fp
 8005c4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c4c:	f000 fb72 	bl	8006334 <__mcmp>
 8005c50:	4632      	mov	r2, r6
 8005c52:	4681      	mov	r9, r0
 8005c54:	4621      	mov	r1, r4
 8005c56:	4628      	mov	r0, r5
 8005c58:	f000 fb88 	bl	800636c <__mdiff>
 8005c5c:	68c2      	ldr	r2, [r0, #12]
 8005c5e:	4607      	mov	r7, r0
 8005c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c62:	bb02      	cbnz	r2, 8005ca6 <_dtoa_r+0xa7e>
 8005c64:	4601      	mov	r1, r0
 8005c66:	4658      	mov	r0, fp
 8005c68:	f000 fb64 	bl	8006334 <__mcmp>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c70:	4639      	mov	r1, r7
 8005c72:	4628      	mov	r0, r5
 8005c74:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005c78:	f000 f91e 	bl	8005eb8 <_Bfree>
 8005c7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c80:	9f08      	ldr	r7, [sp, #32]
 8005c82:	ea43 0102 	orr.w	r1, r3, r2
 8005c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c88:	430b      	orrs	r3, r1
 8005c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c8c:	d10d      	bne.n	8005caa <_dtoa_r+0xa82>
 8005c8e:	2b39      	cmp	r3, #57	; 0x39
 8005c90:	d029      	beq.n	8005ce6 <_dtoa_r+0xabe>
 8005c92:	f1b9 0f00 	cmp.w	r9, #0
 8005c96:	dd01      	ble.n	8005c9c <_dtoa_r+0xa74>
 8005c98:	9b06      	ldr	r3, [sp, #24]
 8005c9a:	3331      	adds	r3, #49	; 0x31
 8005c9c:	9a04      	ldr	r2, [sp, #16]
 8005c9e:	7013      	strb	r3, [r2, #0]
 8005ca0:	e776      	b.n	8005b90 <_dtoa_r+0x968>
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	e7b9      	b.n	8005c1a <_dtoa_r+0x9f2>
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	e7e2      	b.n	8005c70 <_dtoa_r+0xa48>
 8005caa:	f1b9 0f00 	cmp.w	r9, #0
 8005cae:	db06      	blt.n	8005cbe <_dtoa_r+0xa96>
 8005cb0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005cb2:	ea41 0909 	orr.w	r9, r1, r9
 8005cb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cb8:	ea59 0101 	orrs.w	r1, r9, r1
 8005cbc:	d120      	bne.n	8005d00 <_dtoa_r+0xad8>
 8005cbe:	2a00      	cmp	r2, #0
 8005cc0:	ddec      	ble.n	8005c9c <_dtoa_r+0xa74>
 8005cc2:	4659      	mov	r1, fp
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	9308      	str	r3, [sp, #32]
 8005cca:	f000 fac3 	bl	8006254 <__lshift>
 8005cce:	4621      	mov	r1, r4
 8005cd0:	4683      	mov	fp, r0
 8005cd2:	f000 fb2f 	bl	8006334 <__mcmp>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	9b08      	ldr	r3, [sp, #32]
 8005cda:	dc02      	bgt.n	8005ce2 <_dtoa_r+0xaba>
 8005cdc:	d1de      	bne.n	8005c9c <_dtoa_r+0xa74>
 8005cde:	07da      	lsls	r2, r3, #31
 8005ce0:	d5dc      	bpl.n	8005c9c <_dtoa_r+0xa74>
 8005ce2:	2b39      	cmp	r3, #57	; 0x39
 8005ce4:	d1d8      	bne.n	8005c98 <_dtoa_r+0xa70>
 8005ce6:	2339      	movs	r3, #57	; 0x39
 8005ce8:	9a04      	ldr	r2, [sp, #16]
 8005cea:	7013      	strb	r3, [r2, #0]
 8005cec:	463b      	mov	r3, r7
 8005cee:	461f      	mov	r7, r3
 8005cf0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	2a39      	cmp	r2, #57	; 0x39
 8005cf8:	d050      	beq.n	8005d9c <_dtoa_r+0xb74>
 8005cfa:	3201      	adds	r2, #1
 8005cfc:	701a      	strb	r2, [r3, #0]
 8005cfe:	e747      	b.n	8005b90 <_dtoa_r+0x968>
 8005d00:	2a00      	cmp	r2, #0
 8005d02:	dd03      	ble.n	8005d0c <_dtoa_r+0xae4>
 8005d04:	2b39      	cmp	r3, #57	; 0x39
 8005d06:	d0ee      	beq.n	8005ce6 <_dtoa_r+0xabe>
 8005d08:	3301      	adds	r3, #1
 8005d0a:	e7c7      	b.n	8005c9c <_dtoa_r+0xa74>
 8005d0c:	9a08      	ldr	r2, [sp, #32]
 8005d0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d10:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005d14:	428a      	cmp	r2, r1
 8005d16:	d02a      	beq.n	8005d6e <_dtoa_r+0xb46>
 8005d18:	4659      	mov	r1, fp
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	220a      	movs	r2, #10
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f000 f8ec 	bl	8005efc <__multadd>
 8005d24:	45b0      	cmp	r8, r6
 8005d26:	4683      	mov	fp, r0
 8005d28:	f04f 0300 	mov.w	r3, #0
 8005d2c:	f04f 020a 	mov.w	r2, #10
 8005d30:	4641      	mov	r1, r8
 8005d32:	4628      	mov	r0, r5
 8005d34:	d107      	bne.n	8005d46 <_dtoa_r+0xb1e>
 8005d36:	f000 f8e1 	bl	8005efc <__multadd>
 8005d3a:	4680      	mov	r8, r0
 8005d3c:	4606      	mov	r6, r0
 8005d3e:	9b08      	ldr	r3, [sp, #32]
 8005d40:	3301      	adds	r3, #1
 8005d42:	9308      	str	r3, [sp, #32]
 8005d44:	e775      	b.n	8005c32 <_dtoa_r+0xa0a>
 8005d46:	f000 f8d9 	bl	8005efc <__multadd>
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	4680      	mov	r8, r0
 8005d4e:	2300      	movs	r3, #0
 8005d50:	220a      	movs	r2, #10
 8005d52:	4628      	mov	r0, r5
 8005d54:	f000 f8d2 	bl	8005efc <__multadd>
 8005d58:	4606      	mov	r6, r0
 8005d5a:	e7f0      	b.n	8005d3e <_dtoa_r+0xb16>
 8005d5c:	f1b9 0f00 	cmp.w	r9, #0
 8005d60:	bfcc      	ite	gt
 8005d62:	464f      	movgt	r7, r9
 8005d64:	2701      	movle	r7, #1
 8005d66:	f04f 0800 	mov.w	r8, #0
 8005d6a:	9a03      	ldr	r2, [sp, #12]
 8005d6c:	4417      	add	r7, r2
 8005d6e:	4659      	mov	r1, fp
 8005d70:	2201      	movs	r2, #1
 8005d72:	4628      	mov	r0, r5
 8005d74:	9308      	str	r3, [sp, #32]
 8005d76:	f000 fa6d 	bl	8006254 <__lshift>
 8005d7a:	4621      	mov	r1, r4
 8005d7c:	4683      	mov	fp, r0
 8005d7e:	f000 fad9 	bl	8006334 <__mcmp>
 8005d82:	2800      	cmp	r0, #0
 8005d84:	dcb2      	bgt.n	8005cec <_dtoa_r+0xac4>
 8005d86:	d102      	bne.n	8005d8e <_dtoa_r+0xb66>
 8005d88:	9b08      	ldr	r3, [sp, #32]
 8005d8a:	07db      	lsls	r3, r3, #31
 8005d8c:	d4ae      	bmi.n	8005cec <_dtoa_r+0xac4>
 8005d8e:	463b      	mov	r3, r7
 8005d90:	461f      	mov	r7, r3
 8005d92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d96:	2a30      	cmp	r2, #48	; 0x30
 8005d98:	d0fa      	beq.n	8005d90 <_dtoa_r+0xb68>
 8005d9a:	e6f9      	b.n	8005b90 <_dtoa_r+0x968>
 8005d9c:	9a03      	ldr	r2, [sp, #12]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d1a5      	bne.n	8005cee <_dtoa_r+0xac6>
 8005da2:	2331      	movs	r3, #49	; 0x31
 8005da4:	f10a 0a01 	add.w	sl, sl, #1
 8005da8:	e779      	b.n	8005c9e <_dtoa_r+0xa76>
 8005daa:	4b14      	ldr	r3, [pc, #80]	; (8005dfc <_dtoa_r+0xbd4>)
 8005dac:	f7ff baa8 	b.w	8005300 <_dtoa_r+0xd8>
 8005db0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f47f aa81 	bne.w	80052ba <_dtoa_r+0x92>
 8005db8:	4b11      	ldr	r3, [pc, #68]	; (8005e00 <_dtoa_r+0xbd8>)
 8005dba:	f7ff baa1 	b.w	8005300 <_dtoa_r+0xd8>
 8005dbe:	f1b9 0f00 	cmp.w	r9, #0
 8005dc2:	dc03      	bgt.n	8005dcc <_dtoa_r+0xba4>
 8005dc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	f73f aecb 	bgt.w	8005b62 <_dtoa_r+0x93a>
 8005dcc:	9f03      	ldr	r7, [sp, #12]
 8005dce:	4621      	mov	r1, r4
 8005dd0:	4658      	mov	r0, fp
 8005dd2:	f7ff f99d 	bl	8005110 <quorem>
 8005dd6:	9a03      	ldr	r2, [sp, #12]
 8005dd8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005ddc:	f807 3b01 	strb.w	r3, [r7], #1
 8005de0:	1aba      	subs	r2, r7, r2
 8005de2:	4591      	cmp	r9, r2
 8005de4:	ddba      	ble.n	8005d5c <_dtoa_r+0xb34>
 8005de6:	4659      	mov	r1, fp
 8005de8:	2300      	movs	r3, #0
 8005dea:	220a      	movs	r2, #10
 8005dec:	4628      	mov	r0, r5
 8005dee:	f000 f885 	bl	8005efc <__multadd>
 8005df2:	4683      	mov	fp, r0
 8005df4:	e7eb      	b.n	8005dce <_dtoa_r+0xba6>
 8005df6:	bf00      	nop
 8005df8:	08007e4b 	.word	0x08007e4b
 8005dfc:	08007da8 	.word	0x08007da8
 8005e00:	08007dcc 	.word	0x08007dcc

08005e04 <_localeconv_r>:
 8005e04:	4800      	ldr	r0, [pc, #0]	; (8005e08 <_localeconv_r+0x4>)
 8005e06:	4770      	bx	lr
 8005e08:	20000174 	.word	0x20000174

08005e0c <malloc>:
 8005e0c:	4b02      	ldr	r3, [pc, #8]	; (8005e18 <malloc+0xc>)
 8005e0e:	4601      	mov	r1, r0
 8005e10:	6818      	ldr	r0, [r3, #0]
 8005e12:	f000 bc0f 	b.w	8006634 <_malloc_r>
 8005e16:	bf00      	nop
 8005e18:	20000020 	.word	0x20000020

08005e1c <memchr>:
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	b510      	push	{r4, lr}
 8005e20:	b2c9      	uxtb	r1, r1
 8005e22:	4402      	add	r2, r0
 8005e24:	4293      	cmp	r3, r2
 8005e26:	4618      	mov	r0, r3
 8005e28:	d101      	bne.n	8005e2e <memchr+0x12>
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	e003      	b.n	8005e36 <memchr+0x1a>
 8005e2e:	7804      	ldrb	r4, [r0, #0]
 8005e30:	3301      	adds	r3, #1
 8005e32:	428c      	cmp	r4, r1
 8005e34:	d1f6      	bne.n	8005e24 <memchr+0x8>
 8005e36:	bd10      	pop	{r4, pc}

08005e38 <_Balloc>:
 8005e38:	b570      	push	{r4, r5, r6, lr}
 8005e3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	460d      	mov	r5, r1
 8005e40:	b976      	cbnz	r6, 8005e60 <_Balloc+0x28>
 8005e42:	2010      	movs	r0, #16
 8005e44:	f7ff ffe2 	bl	8005e0c <malloc>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	6260      	str	r0, [r4, #36]	; 0x24
 8005e4c:	b920      	cbnz	r0, 8005e58 <_Balloc+0x20>
 8005e4e:	2166      	movs	r1, #102	; 0x66
 8005e50:	4b17      	ldr	r3, [pc, #92]	; (8005eb0 <_Balloc+0x78>)
 8005e52:	4818      	ldr	r0, [pc, #96]	; (8005eb4 <_Balloc+0x7c>)
 8005e54:	f000 fdce 	bl	80069f4 <__assert_func>
 8005e58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e5c:	6006      	str	r6, [r0, #0]
 8005e5e:	60c6      	str	r6, [r0, #12]
 8005e60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005e62:	68f3      	ldr	r3, [r6, #12]
 8005e64:	b183      	cbz	r3, 8005e88 <_Balloc+0x50>
 8005e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005e6e:	b9b8      	cbnz	r0, 8005ea0 <_Balloc+0x68>
 8005e70:	2101      	movs	r1, #1
 8005e72:	fa01 f605 	lsl.w	r6, r1, r5
 8005e76:	1d72      	adds	r2, r6, #5
 8005e78:	4620      	mov	r0, r4
 8005e7a:	0092      	lsls	r2, r2, #2
 8005e7c:	f000 fb5e 	bl	800653c <_calloc_r>
 8005e80:	b160      	cbz	r0, 8005e9c <_Balloc+0x64>
 8005e82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005e86:	e00e      	b.n	8005ea6 <_Balloc+0x6e>
 8005e88:	2221      	movs	r2, #33	; 0x21
 8005e8a:	2104      	movs	r1, #4
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f000 fb55 	bl	800653c <_calloc_r>
 8005e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e94:	60f0      	str	r0, [r6, #12]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e4      	bne.n	8005e66 <_Balloc+0x2e>
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ea0:	6802      	ldr	r2, [r0, #0]
 8005ea2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005eac:	e7f7      	b.n	8005e9e <_Balloc+0x66>
 8005eae:	bf00      	nop
 8005eb0:	08007dd9 	.word	0x08007dd9
 8005eb4:	08007e5c 	.word	0x08007e5c

08005eb8 <_Bfree>:
 8005eb8:	b570      	push	{r4, r5, r6, lr}
 8005eba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005ebc:	4605      	mov	r5, r0
 8005ebe:	460c      	mov	r4, r1
 8005ec0:	b976      	cbnz	r6, 8005ee0 <_Bfree+0x28>
 8005ec2:	2010      	movs	r0, #16
 8005ec4:	f7ff ffa2 	bl	8005e0c <malloc>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	6268      	str	r0, [r5, #36]	; 0x24
 8005ecc:	b920      	cbnz	r0, 8005ed8 <_Bfree+0x20>
 8005ece:	218a      	movs	r1, #138	; 0x8a
 8005ed0:	4b08      	ldr	r3, [pc, #32]	; (8005ef4 <_Bfree+0x3c>)
 8005ed2:	4809      	ldr	r0, [pc, #36]	; (8005ef8 <_Bfree+0x40>)
 8005ed4:	f000 fd8e 	bl	80069f4 <__assert_func>
 8005ed8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005edc:	6006      	str	r6, [r0, #0]
 8005ede:	60c6      	str	r6, [r0, #12]
 8005ee0:	b13c      	cbz	r4, 8005ef2 <_Bfree+0x3a>
 8005ee2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ee4:	6862      	ldr	r2, [r4, #4]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005eec:	6021      	str	r1, [r4, #0]
 8005eee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005ef2:	bd70      	pop	{r4, r5, r6, pc}
 8005ef4:	08007dd9 	.word	0x08007dd9
 8005ef8:	08007e5c 	.word	0x08007e5c

08005efc <__multadd>:
 8005efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f00:	4607      	mov	r7, r0
 8005f02:	460c      	mov	r4, r1
 8005f04:	461e      	mov	r6, r3
 8005f06:	2000      	movs	r0, #0
 8005f08:	690d      	ldr	r5, [r1, #16]
 8005f0a:	f101 0c14 	add.w	ip, r1, #20
 8005f0e:	f8dc 3000 	ldr.w	r3, [ip]
 8005f12:	3001      	adds	r0, #1
 8005f14:	b299      	uxth	r1, r3
 8005f16:	fb02 6101 	mla	r1, r2, r1, r6
 8005f1a:	0c1e      	lsrs	r6, r3, #16
 8005f1c:	0c0b      	lsrs	r3, r1, #16
 8005f1e:	fb02 3306 	mla	r3, r2, r6, r3
 8005f22:	b289      	uxth	r1, r1
 8005f24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f28:	4285      	cmp	r5, r0
 8005f2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005f2e:	f84c 1b04 	str.w	r1, [ip], #4
 8005f32:	dcec      	bgt.n	8005f0e <__multadd+0x12>
 8005f34:	b30e      	cbz	r6, 8005f7a <__multadd+0x7e>
 8005f36:	68a3      	ldr	r3, [r4, #8]
 8005f38:	42ab      	cmp	r3, r5
 8005f3a:	dc19      	bgt.n	8005f70 <__multadd+0x74>
 8005f3c:	6861      	ldr	r1, [r4, #4]
 8005f3e:	4638      	mov	r0, r7
 8005f40:	3101      	adds	r1, #1
 8005f42:	f7ff ff79 	bl	8005e38 <_Balloc>
 8005f46:	4680      	mov	r8, r0
 8005f48:	b928      	cbnz	r0, 8005f56 <__multadd+0x5a>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	21b5      	movs	r1, #181	; 0xb5
 8005f4e:	4b0c      	ldr	r3, [pc, #48]	; (8005f80 <__multadd+0x84>)
 8005f50:	480c      	ldr	r0, [pc, #48]	; (8005f84 <__multadd+0x88>)
 8005f52:	f000 fd4f 	bl	80069f4 <__assert_func>
 8005f56:	6922      	ldr	r2, [r4, #16]
 8005f58:	f104 010c 	add.w	r1, r4, #12
 8005f5c:	3202      	adds	r2, #2
 8005f5e:	0092      	lsls	r2, r2, #2
 8005f60:	300c      	adds	r0, #12
 8005f62:	f7fe fc25 	bl	80047b0 <memcpy>
 8005f66:	4621      	mov	r1, r4
 8005f68:	4638      	mov	r0, r7
 8005f6a:	f7ff ffa5 	bl	8005eb8 <_Bfree>
 8005f6e:	4644      	mov	r4, r8
 8005f70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f74:	3501      	adds	r5, #1
 8005f76:	615e      	str	r6, [r3, #20]
 8005f78:	6125      	str	r5, [r4, #16]
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f80:	08007e4b 	.word	0x08007e4b
 8005f84:	08007e5c 	.word	0x08007e5c

08005f88 <__hi0bits>:
 8005f88:	0c02      	lsrs	r2, r0, #16
 8005f8a:	0412      	lsls	r2, r2, #16
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	b9ca      	cbnz	r2, 8005fc4 <__hi0bits+0x3c>
 8005f90:	0403      	lsls	r3, r0, #16
 8005f92:	2010      	movs	r0, #16
 8005f94:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005f98:	bf04      	itt	eq
 8005f9a:	021b      	lsleq	r3, r3, #8
 8005f9c:	3008      	addeq	r0, #8
 8005f9e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005fa2:	bf04      	itt	eq
 8005fa4:	011b      	lsleq	r3, r3, #4
 8005fa6:	3004      	addeq	r0, #4
 8005fa8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005fac:	bf04      	itt	eq
 8005fae:	009b      	lsleq	r3, r3, #2
 8005fb0:	3002      	addeq	r0, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	db05      	blt.n	8005fc2 <__hi0bits+0x3a>
 8005fb6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005fba:	f100 0001 	add.w	r0, r0, #1
 8005fbe:	bf08      	it	eq
 8005fc0:	2020      	moveq	r0, #32
 8005fc2:	4770      	bx	lr
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	e7e5      	b.n	8005f94 <__hi0bits+0xc>

08005fc8 <__lo0bits>:
 8005fc8:	6803      	ldr	r3, [r0, #0]
 8005fca:	4602      	mov	r2, r0
 8005fcc:	f013 0007 	ands.w	r0, r3, #7
 8005fd0:	d00b      	beq.n	8005fea <__lo0bits+0x22>
 8005fd2:	07d9      	lsls	r1, r3, #31
 8005fd4:	d421      	bmi.n	800601a <__lo0bits+0x52>
 8005fd6:	0798      	lsls	r0, r3, #30
 8005fd8:	bf49      	itett	mi
 8005fda:	085b      	lsrmi	r3, r3, #1
 8005fdc:	089b      	lsrpl	r3, r3, #2
 8005fde:	2001      	movmi	r0, #1
 8005fe0:	6013      	strmi	r3, [r2, #0]
 8005fe2:	bf5c      	itt	pl
 8005fe4:	2002      	movpl	r0, #2
 8005fe6:	6013      	strpl	r3, [r2, #0]
 8005fe8:	4770      	bx	lr
 8005fea:	b299      	uxth	r1, r3
 8005fec:	b909      	cbnz	r1, 8005ff2 <__lo0bits+0x2a>
 8005fee:	2010      	movs	r0, #16
 8005ff0:	0c1b      	lsrs	r3, r3, #16
 8005ff2:	b2d9      	uxtb	r1, r3
 8005ff4:	b909      	cbnz	r1, 8005ffa <__lo0bits+0x32>
 8005ff6:	3008      	adds	r0, #8
 8005ff8:	0a1b      	lsrs	r3, r3, #8
 8005ffa:	0719      	lsls	r1, r3, #28
 8005ffc:	bf04      	itt	eq
 8005ffe:	091b      	lsreq	r3, r3, #4
 8006000:	3004      	addeq	r0, #4
 8006002:	0799      	lsls	r1, r3, #30
 8006004:	bf04      	itt	eq
 8006006:	089b      	lsreq	r3, r3, #2
 8006008:	3002      	addeq	r0, #2
 800600a:	07d9      	lsls	r1, r3, #31
 800600c:	d403      	bmi.n	8006016 <__lo0bits+0x4e>
 800600e:	085b      	lsrs	r3, r3, #1
 8006010:	f100 0001 	add.w	r0, r0, #1
 8006014:	d003      	beq.n	800601e <__lo0bits+0x56>
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	4770      	bx	lr
 800601a:	2000      	movs	r0, #0
 800601c:	4770      	bx	lr
 800601e:	2020      	movs	r0, #32
 8006020:	4770      	bx	lr
	...

08006024 <__i2b>:
 8006024:	b510      	push	{r4, lr}
 8006026:	460c      	mov	r4, r1
 8006028:	2101      	movs	r1, #1
 800602a:	f7ff ff05 	bl	8005e38 <_Balloc>
 800602e:	4602      	mov	r2, r0
 8006030:	b928      	cbnz	r0, 800603e <__i2b+0x1a>
 8006032:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006036:	4b04      	ldr	r3, [pc, #16]	; (8006048 <__i2b+0x24>)
 8006038:	4804      	ldr	r0, [pc, #16]	; (800604c <__i2b+0x28>)
 800603a:	f000 fcdb 	bl	80069f4 <__assert_func>
 800603e:	2301      	movs	r3, #1
 8006040:	6144      	str	r4, [r0, #20]
 8006042:	6103      	str	r3, [r0, #16]
 8006044:	bd10      	pop	{r4, pc}
 8006046:	bf00      	nop
 8006048:	08007e4b 	.word	0x08007e4b
 800604c:	08007e5c 	.word	0x08007e5c

08006050 <__multiply>:
 8006050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006054:	4691      	mov	r9, r2
 8006056:	690a      	ldr	r2, [r1, #16]
 8006058:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800605c:	460c      	mov	r4, r1
 800605e:	429a      	cmp	r2, r3
 8006060:	bfbe      	ittt	lt
 8006062:	460b      	movlt	r3, r1
 8006064:	464c      	movlt	r4, r9
 8006066:	4699      	movlt	r9, r3
 8006068:	6927      	ldr	r7, [r4, #16]
 800606a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800606e:	68a3      	ldr	r3, [r4, #8]
 8006070:	6861      	ldr	r1, [r4, #4]
 8006072:	eb07 060a 	add.w	r6, r7, sl
 8006076:	42b3      	cmp	r3, r6
 8006078:	b085      	sub	sp, #20
 800607a:	bfb8      	it	lt
 800607c:	3101      	addlt	r1, #1
 800607e:	f7ff fedb 	bl	8005e38 <_Balloc>
 8006082:	b930      	cbnz	r0, 8006092 <__multiply+0x42>
 8006084:	4602      	mov	r2, r0
 8006086:	f240 115d 	movw	r1, #349	; 0x15d
 800608a:	4b43      	ldr	r3, [pc, #268]	; (8006198 <__multiply+0x148>)
 800608c:	4843      	ldr	r0, [pc, #268]	; (800619c <__multiply+0x14c>)
 800608e:	f000 fcb1 	bl	80069f4 <__assert_func>
 8006092:	f100 0514 	add.w	r5, r0, #20
 8006096:	462b      	mov	r3, r5
 8006098:	2200      	movs	r2, #0
 800609a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800609e:	4543      	cmp	r3, r8
 80060a0:	d321      	bcc.n	80060e6 <__multiply+0x96>
 80060a2:	f104 0314 	add.w	r3, r4, #20
 80060a6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80060aa:	f109 0314 	add.w	r3, r9, #20
 80060ae:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80060b2:	9202      	str	r2, [sp, #8]
 80060b4:	1b3a      	subs	r2, r7, r4
 80060b6:	3a15      	subs	r2, #21
 80060b8:	f022 0203 	bic.w	r2, r2, #3
 80060bc:	3204      	adds	r2, #4
 80060be:	f104 0115 	add.w	r1, r4, #21
 80060c2:	428f      	cmp	r7, r1
 80060c4:	bf38      	it	cc
 80060c6:	2204      	movcc	r2, #4
 80060c8:	9201      	str	r2, [sp, #4]
 80060ca:	9a02      	ldr	r2, [sp, #8]
 80060cc:	9303      	str	r3, [sp, #12]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d80c      	bhi.n	80060ec <__multiply+0x9c>
 80060d2:	2e00      	cmp	r6, #0
 80060d4:	dd03      	ble.n	80060de <__multiply+0x8e>
 80060d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d059      	beq.n	8006192 <__multiply+0x142>
 80060de:	6106      	str	r6, [r0, #16]
 80060e0:	b005      	add	sp, #20
 80060e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e6:	f843 2b04 	str.w	r2, [r3], #4
 80060ea:	e7d8      	b.n	800609e <__multiply+0x4e>
 80060ec:	f8b3 a000 	ldrh.w	sl, [r3]
 80060f0:	f1ba 0f00 	cmp.w	sl, #0
 80060f4:	d023      	beq.n	800613e <__multiply+0xee>
 80060f6:	46a9      	mov	r9, r5
 80060f8:	f04f 0c00 	mov.w	ip, #0
 80060fc:	f104 0e14 	add.w	lr, r4, #20
 8006100:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006104:	f8d9 1000 	ldr.w	r1, [r9]
 8006108:	fa1f fb82 	uxth.w	fp, r2
 800610c:	b289      	uxth	r1, r1
 800610e:	fb0a 110b 	mla	r1, sl, fp, r1
 8006112:	4461      	add	r1, ip
 8006114:	f8d9 c000 	ldr.w	ip, [r9]
 8006118:	0c12      	lsrs	r2, r2, #16
 800611a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800611e:	fb0a c202 	mla	r2, sl, r2, ip
 8006122:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006126:	b289      	uxth	r1, r1
 8006128:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800612c:	4577      	cmp	r7, lr
 800612e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006132:	f849 1b04 	str.w	r1, [r9], #4
 8006136:	d8e3      	bhi.n	8006100 <__multiply+0xb0>
 8006138:	9a01      	ldr	r2, [sp, #4]
 800613a:	f845 c002 	str.w	ip, [r5, r2]
 800613e:	9a03      	ldr	r2, [sp, #12]
 8006140:	3304      	adds	r3, #4
 8006142:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006146:	f1b9 0f00 	cmp.w	r9, #0
 800614a:	d020      	beq.n	800618e <__multiply+0x13e>
 800614c:	46ae      	mov	lr, r5
 800614e:	f04f 0a00 	mov.w	sl, #0
 8006152:	6829      	ldr	r1, [r5, #0]
 8006154:	f104 0c14 	add.w	ip, r4, #20
 8006158:	f8bc b000 	ldrh.w	fp, [ip]
 800615c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006160:	b289      	uxth	r1, r1
 8006162:	fb09 220b 	mla	r2, r9, fp, r2
 8006166:	4492      	add	sl, r2
 8006168:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800616c:	f84e 1b04 	str.w	r1, [lr], #4
 8006170:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006174:	f8be 1000 	ldrh.w	r1, [lr]
 8006178:	0c12      	lsrs	r2, r2, #16
 800617a:	fb09 1102 	mla	r1, r9, r2, r1
 800617e:	4567      	cmp	r7, ip
 8006180:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006184:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006188:	d8e6      	bhi.n	8006158 <__multiply+0x108>
 800618a:	9a01      	ldr	r2, [sp, #4]
 800618c:	50a9      	str	r1, [r5, r2]
 800618e:	3504      	adds	r5, #4
 8006190:	e79b      	b.n	80060ca <__multiply+0x7a>
 8006192:	3e01      	subs	r6, #1
 8006194:	e79d      	b.n	80060d2 <__multiply+0x82>
 8006196:	bf00      	nop
 8006198:	08007e4b 	.word	0x08007e4b
 800619c:	08007e5c 	.word	0x08007e5c

080061a0 <__pow5mult>:
 80061a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061a4:	4615      	mov	r5, r2
 80061a6:	f012 0203 	ands.w	r2, r2, #3
 80061aa:	4606      	mov	r6, r0
 80061ac:	460f      	mov	r7, r1
 80061ae:	d007      	beq.n	80061c0 <__pow5mult+0x20>
 80061b0:	4c25      	ldr	r4, [pc, #148]	; (8006248 <__pow5mult+0xa8>)
 80061b2:	3a01      	subs	r2, #1
 80061b4:	2300      	movs	r3, #0
 80061b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061ba:	f7ff fe9f 	bl	8005efc <__multadd>
 80061be:	4607      	mov	r7, r0
 80061c0:	10ad      	asrs	r5, r5, #2
 80061c2:	d03d      	beq.n	8006240 <__pow5mult+0xa0>
 80061c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80061c6:	b97c      	cbnz	r4, 80061e8 <__pow5mult+0x48>
 80061c8:	2010      	movs	r0, #16
 80061ca:	f7ff fe1f 	bl	8005e0c <malloc>
 80061ce:	4602      	mov	r2, r0
 80061d0:	6270      	str	r0, [r6, #36]	; 0x24
 80061d2:	b928      	cbnz	r0, 80061e0 <__pow5mult+0x40>
 80061d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80061d8:	4b1c      	ldr	r3, [pc, #112]	; (800624c <__pow5mult+0xac>)
 80061da:	481d      	ldr	r0, [pc, #116]	; (8006250 <__pow5mult+0xb0>)
 80061dc:	f000 fc0a 	bl	80069f4 <__assert_func>
 80061e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80061e4:	6004      	str	r4, [r0, #0]
 80061e6:	60c4      	str	r4, [r0, #12]
 80061e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80061ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80061f0:	b94c      	cbnz	r4, 8006206 <__pow5mult+0x66>
 80061f2:	f240 2171 	movw	r1, #625	; 0x271
 80061f6:	4630      	mov	r0, r6
 80061f8:	f7ff ff14 	bl	8006024 <__i2b>
 80061fc:	2300      	movs	r3, #0
 80061fe:	4604      	mov	r4, r0
 8006200:	f8c8 0008 	str.w	r0, [r8, #8]
 8006204:	6003      	str	r3, [r0, #0]
 8006206:	f04f 0900 	mov.w	r9, #0
 800620a:	07eb      	lsls	r3, r5, #31
 800620c:	d50a      	bpl.n	8006224 <__pow5mult+0x84>
 800620e:	4639      	mov	r1, r7
 8006210:	4622      	mov	r2, r4
 8006212:	4630      	mov	r0, r6
 8006214:	f7ff ff1c 	bl	8006050 <__multiply>
 8006218:	4680      	mov	r8, r0
 800621a:	4639      	mov	r1, r7
 800621c:	4630      	mov	r0, r6
 800621e:	f7ff fe4b 	bl	8005eb8 <_Bfree>
 8006222:	4647      	mov	r7, r8
 8006224:	106d      	asrs	r5, r5, #1
 8006226:	d00b      	beq.n	8006240 <__pow5mult+0xa0>
 8006228:	6820      	ldr	r0, [r4, #0]
 800622a:	b938      	cbnz	r0, 800623c <__pow5mult+0x9c>
 800622c:	4622      	mov	r2, r4
 800622e:	4621      	mov	r1, r4
 8006230:	4630      	mov	r0, r6
 8006232:	f7ff ff0d 	bl	8006050 <__multiply>
 8006236:	6020      	str	r0, [r4, #0]
 8006238:	f8c0 9000 	str.w	r9, [r0]
 800623c:	4604      	mov	r4, r0
 800623e:	e7e4      	b.n	800620a <__pow5mult+0x6a>
 8006240:	4638      	mov	r0, r7
 8006242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006246:	bf00      	nop
 8006248:	08007fa8 	.word	0x08007fa8
 800624c:	08007dd9 	.word	0x08007dd9
 8006250:	08007e5c 	.word	0x08007e5c

08006254 <__lshift>:
 8006254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006258:	460c      	mov	r4, r1
 800625a:	4607      	mov	r7, r0
 800625c:	4691      	mov	r9, r2
 800625e:	6923      	ldr	r3, [r4, #16]
 8006260:	6849      	ldr	r1, [r1, #4]
 8006262:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006266:	68a3      	ldr	r3, [r4, #8]
 8006268:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800626c:	f108 0601 	add.w	r6, r8, #1
 8006270:	42b3      	cmp	r3, r6
 8006272:	db0b      	blt.n	800628c <__lshift+0x38>
 8006274:	4638      	mov	r0, r7
 8006276:	f7ff fddf 	bl	8005e38 <_Balloc>
 800627a:	4605      	mov	r5, r0
 800627c:	b948      	cbnz	r0, 8006292 <__lshift+0x3e>
 800627e:	4602      	mov	r2, r0
 8006280:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006284:	4b29      	ldr	r3, [pc, #164]	; (800632c <__lshift+0xd8>)
 8006286:	482a      	ldr	r0, [pc, #168]	; (8006330 <__lshift+0xdc>)
 8006288:	f000 fbb4 	bl	80069f4 <__assert_func>
 800628c:	3101      	adds	r1, #1
 800628e:	005b      	lsls	r3, r3, #1
 8006290:	e7ee      	b.n	8006270 <__lshift+0x1c>
 8006292:	2300      	movs	r3, #0
 8006294:	f100 0114 	add.w	r1, r0, #20
 8006298:	f100 0210 	add.w	r2, r0, #16
 800629c:	4618      	mov	r0, r3
 800629e:	4553      	cmp	r3, sl
 80062a0:	db37      	blt.n	8006312 <__lshift+0xbe>
 80062a2:	6920      	ldr	r0, [r4, #16]
 80062a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062a8:	f104 0314 	add.w	r3, r4, #20
 80062ac:	f019 091f 	ands.w	r9, r9, #31
 80062b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80062b8:	d02f      	beq.n	800631a <__lshift+0xc6>
 80062ba:	468a      	mov	sl, r1
 80062bc:	f04f 0c00 	mov.w	ip, #0
 80062c0:	f1c9 0e20 	rsb	lr, r9, #32
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	fa02 f209 	lsl.w	r2, r2, r9
 80062ca:	ea42 020c 	orr.w	r2, r2, ip
 80062ce:	f84a 2b04 	str.w	r2, [sl], #4
 80062d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80062d6:	4298      	cmp	r0, r3
 80062d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80062dc:	d8f2      	bhi.n	80062c4 <__lshift+0x70>
 80062de:	1b03      	subs	r3, r0, r4
 80062e0:	3b15      	subs	r3, #21
 80062e2:	f023 0303 	bic.w	r3, r3, #3
 80062e6:	3304      	adds	r3, #4
 80062e8:	f104 0215 	add.w	r2, r4, #21
 80062ec:	4290      	cmp	r0, r2
 80062ee:	bf38      	it	cc
 80062f0:	2304      	movcc	r3, #4
 80062f2:	f841 c003 	str.w	ip, [r1, r3]
 80062f6:	f1bc 0f00 	cmp.w	ip, #0
 80062fa:	d001      	beq.n	8006300 <__lshift+0xac>
 80062fc:	f108 0602 	add.w	r6, r8, #2
 8006300:	3e01      	subs	r6, #1
 8006302:	4638      	mov	r0, r7
 8006304:	4621      	mov	r1, r4
 8006306:	612e      	str	r6, [r5, #16]
 8006308:	f7ff fdd6 	bl	8005eb8 <_Bfree>
 800630c:	4628      	mov	r0, r5
 800630e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006312:	f842 0f04 	str.w	r0, [r2, #4]!
 8006316:	3301      	adds	r3, #1
 8006318:	e7c1      	b.n	800629e <__lshift+0x4a>
 800631a:	3904      	subs	r1, #4
 800631c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006320:	4298      	cmp	r0, r3
 8006322:	f841 2f04 	str.w	r2, [r1, #4]!
 8006326:	d8f9      	bhi.n	800631c <__lshift+0xc8>
 8006328:	e7ea      	b.n	8006300 <__lshift+0xac>
 800632a:	bf00      	nop
 800632c:	08007e4b 	.word	0x08007e4b
 8006330:	08007e5c 	.word	0x08007e5c

08006334 <__mcmp>:
 8006334:	4603      	mov	r3, r0
 8006336:	690a      	ldr	r2, [r1, #16]
 8006338:	6900      	ldr	r0, [r0, #16]
 800633a:	b530      	push	{r4, r5, lr}
 800633c:	1a80      	subs	r0, r0, r2
 800633e:	d10d      	bne.n	800635c <__mcmp+0x28>
 8006340:	3314      	adds	r3, #20
 8006342:	3114      	adds	r1, #20
 8006344:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006348:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800634c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006350:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006354:	4295      	cmp	r5, r2
 8006356:	d002      	beq.n	800635e <__mcmp+0x2a>
 8006358:	d304      	bcc.n	8006364 <__mcmp+0x30>
 800635a:	2001      	movs	r0, #1
 800635c:	bd30      	pop	{r4, r5, pc}
 800635e:	42a3      	cmp	r3, r4
 8006360:	d3f4      	bcc.n	800634c <__mcmp+0x18>
 8006362:	e7fb      	b.n	800635c <__mcmp+0x28>
 8006364:	f04f 30ff 	mov.w	r0, #4294967295
 8006368:	e7f8      	b.n	800635c <__mcmp+0x28>
	...

0800636c <__mdiff>:
 800636c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006370:	460d      	mov	r5, r1
 8006372:	4607      	mov	r7, r0
 8006374:	4611      	mov	r1, r2
 8006376:	4628      	mov	r0, r5
 8006378:	4614      	mov	r4, r2
 800637a:	f7ff ffdb 	bl	8006334 <__mcmp>
 800637e:	1e06      	subs	r6, r0, #0
 8006380:	d111      	bne.n	80063a6 <__mdiff+0x3a>
 8006382:	4631      	mov	r1, r6
 8006384:	4638      	mov	r0, r7
 8006386:	f7ff fd57 	bl	8005e38 <_Balloc>
 800638a:	4602      	mov	r2, r0
 800638c:	b928      	cbnz	r0, 800639a <__mdiff+0x2e>
 800638e:	f240 2132 	movw	r1, #562	; 0x232
 8006392:	4b3a      	ldr	r3, [pc, #232]	; (800647c <__mdiff+0x110>)
 8006394:	483a      	ldr	r0, [pc, #232]	; (8006480 <__mdiff+0x114>)
 8006396:	f000 fb2d 	bl	80069f4 <__assert_func>
 800639a:	2301      	movs	r3, #1
 800639c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80063a0:	4610      	mov	r0, r2
 80063a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a6:	bfa4      	itt	ge
 80063a8:	4623      	movge	r3, r4
 80063aa:	462c      	movge	r4, r5
 80063ac:	4638      	mov	r0, r7
 80063ae:	6861      	ldr	r1, [r4, #4]
 80063b0:	bfa6      	itte	ge
 80063b2:	461d      	movge	r5, r3
 80063b4:	2600      	movge	r6, #0
 80063b6:	2601      	movlt	r6, #1
 80063b8:	f7ff fd3e 	bl	8005e38 <_Balloc>
 80063bc:	4602      	mov	r2, r0
 80063be:	b918      	cbnz	r0, 80063c8 <__mdiff+0x5c>
 80063c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80063c4:	4b2d      	ldr	r3, [pc, #180]	; (800647c <__mdiff+0x110>)
 80063c6:	e7e5      	b.n	8006394 <__mdiff+0x28>
 80063c8:	f102 0814 	add.w	r8, r2, #20
 80063cc:	46c2      	mov	sl, r8
 80063ce:	f04f 0c00 	mov.w	ip, #0
 80063d2:	6927      	ldr	r7, [r4, #16]
 80063d4:	60c6      	str	r6, [r0, #12]
 80063d6:	692e      	ldr	r6, [r5, #16]
 80063d8:	f104 0014 	add.w	r0, r4, #20
 80063dc:	f105 0914 	add.w	r9, r5, #20
 80063e0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80063e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80063e8:	3410      	adds	r4, #16
 80063ea:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80063ee:	f859 3b04 	ldr.w	r3, [r9], #4
 80063f2:	fa1f f18b 	uxth.w	r1, fp
 80063f6:	448c      	add	ip, r1
 80063f8:	b299      	uxth	r1, r3
 80063fa:	0c1b      	lsrs	r3, r3, #16
 80063fc:	ebac 0101 	sub.w	r1, ip, r1
 8006400:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006404:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006408:	b289      	uxth	r1, r1
 800640a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800640e:	454e      	cmp	r6, r9
 8006410:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006414:	f84a 3b04 	str.w	r3, [sl], #4
 8006418:	d8e7      	bhi.n	80063ea <__mdiff+0x7e>
 800641a:	1b73      	subs	r3, r6, r5
 800641c:	3b15      	subs	r3, #21
 800641e:	f023 0303 	bic.w	r3, r3, #3
 8006422:	3515      	adds	r5, #21
 8006424:	3304      	adds	r3, #4
 8006426:	42ae      	cmp	r6, r5
 8006428:	bf38      	it	cc
 800642a:	2304      	movcc	r3, #4
 800642c:	4418      	add	r0, r3
 800642e:	4443      	add	r3, r8
 8006430:	461e      	mov	r6, r3
 8006432:	4605      	mov	r5, r0
 8006434:	4575      	cmp	r5, lr
 8006436:	d30e      	bcc.n	8006456 <__mdiff+0xea>
 8006438:	f10e 0103 	add.w	r1, lr, #3
 800643c:	1a09      	subs	r1, r1, r0
 800643e:	f021 0103 	bic.w	r1, r1, #3
 8006442:	3803      	subs	r0, #3
 8006444:	4586      	cmp	lr, r0
 8006446:	bf38      	it	cc
 8006448:	2100      	movcc	r1, #0
 800644a:	4419      	add	r1, r3
 800644c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006450:	b18b      	cbz	r3, 8006476 <__mdiff+0x10a>
 8006452:	6117      	str	r7, [r2, #16]
 8006454:	e7a4      	b.n	80063a0 <__mdiff+0x34>
 8006456:	f855 8b04 	ldr.w	r8, [r5], #4
 800645a:	fa1f f188 	uxth.w	r1, r8
 800645e:	4461      	add	r1, ip
 8006460:	140c      	asrs	r4, r1, #16
 8006462:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006466:	b289      	uxth	r1, r1
 8006468:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800646c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006470:	f846 1b04 	str.w	r1, [r6], #4
 8006474:	e7de      	b.n	8006434 <__mdiff+0xc8>
 8006476:	3f01      	subs	r7, #1
 8006478:	e7e8      	b.n	800644c <__mdiff+0xe0>
 800647a:	bf00      	nop
 800647c:	08007e4b 	.word	0x08007e4b
 8006480:	08007e5c 	.word	0x08007e5c

08006484 <__d2b>:
 8006484:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006488:	2101      	movs	r1, #1
 800648a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800648e:	4690      	mov	r8, r2
 8006490:	461d      	mov	r5, r3
 8006492:	f7ff fcd1 	bl	8005e38 <_Balloc>
 8006496:	4604      	mov	r4, r0
 8006498:	b930      	cbnz	r0, 80064a8 <__d2b+0x24>
 800649a:	4602      	mov	r2, r0
 800649c:	f240 310a 	movw	r1, #778	; 0x30a
 80064a0:	4b24      	ldr	r3, [pc, #144]	; (8006534 <__d2b+0xb0>)
 80064a2:	4825      	ldr	r0, [pc, #148]	; (8006538 <__d2b+0xb4>)
 80064a4:	f000 faa6 	bl	80069f4 <__assert_func>
 80064a8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80064ac:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80064b0:	bb2d      	cbnz	r5, 80064fe <__d2b+0x7a>
 80064b2:	9301      	str	r3, [sp, #4]
 80064b4:	f1b8 0300 	subs.w	r3, r8, #0
 80064b8:	d026      	beq.n	8006508 <__d2b+0x84>
 80064ba:	4668      	mov	r0, sp
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	f7ff fd83 	bl	8005fc8 <__lo0bits>
 80064c2:	9900      	ldr	r1, [sp, #0]
 80064c4:	b1f0      	cbz	r0, 8006504 <__d2b+0x80>
 80064c6:	9a01      	ldr	r2, [sp, #4]
 80064c8:	f1c0 0320 	rsb	r3, r0, #32
 80064cc:	fa02 f303 	lsl.w	r3, r2, r3
 80064d0:	430b      	orrs	r3, r1
 80064d2:	40c2      	lsrs	r2, r0
 80064d4:	6163      	str	r3, [r4, #20]
 80064d6:	9201      	str	r2, [sp, #4]
 80064d8:	9b01      	ldr	r3, [sp, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	bf14      	ite	ne
 80064de:	2102      	movne	r1, #2
 80064e0:	2101      	moveq	r1, #1
 80064e2:	61a3      	str	r3, [r4, #24]
 80064e4:	6121      	str	r1, [r4, #16]
 80064e6:	b1c5      	cbz	r5, 800651a <__d2b+0x96>
 80064e8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80064ec:	4405      	add	r5, r0
 80064ee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80064f2:	603d      	str	r5, [r7, #0]
 80064f4:	6030      	str	r0, [r6, #0]
 80064f6:	4620      	mov	r0, r4
 80064f8:	b002      	add	sp, #8
 80064fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006502:	e7d6      	b.n	80064b2 <__d2b+0x2e>
 8006504:	6161      	str	r1, [r4, #20]
 8006506:	e7e7      	b.n	80064d8 <__d2b+0x54>
 8006508:	a801      	add	r0, sp, #4
 800650a:	f7ff fd5d 	bl	8005fc8 <__lo0bits>
 800650e:	2101      	movs	r1, #1
 8006510:	9b01      	ldr	r3, [sp, #4]
 8006512:	6121      	str	r1, [r4, #16]
 8006514:	6163      	str	r3, [r4, #20]
 8006516:	3020      	adds	r0, #32
 8006518:	e7e5      	b.n	80064e6 <__d2b+0x62>
 800651a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800651e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006522:	6038      	str	r0, [r7, #0]
 8006524:	6918      	ldr	r0, [r3, #16]
 8006526:	f7ff fd2f 	bl	8005f88 <__hi0bits>
 800652a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800652e:	6031      	str	r1, [r6, #0]
 8006530:	e7e1      	b.n	80064f6 <__d2b+0x72>
 8006532:	bf00      	nop
 8006534:	08007e4b 	.word	0x08007e4b
 8006538:	08007e5c 	.word	0x08007e5c

0800653c <_calloc_r>:
 800653c:	b570      	push	{r4, r5, r6, lr}
 800653e:	fba1 5402 	umull	r5, r4, r1, r2
 8006542:	b934      	cbnz	r4, 8006552 <_calloc_r+0x16>
 8006544:	4629      	mov	r1, r5
 8006546:	f000 f875 	bl	8006634 <_malloc_r>
 800654a:	4606      	mov	r6, r0
 800654c:	b928      	cbnz	r0, 800655a <_calloc_r+0x1e>
 800654e:	4630      	mov	r0, r6
 8006550:	bd70      	pop	{r4, r5, r6, pc}
 8006552:	220c      	movs	r2, #12
 8006554:	2600      	movs	r6, #0
 8006556:	6002      	str	r2, [r0, #0]
 8006558:	e7f9      	b.n	800654e <_calloc_r+0x12>
 800655a:	462a      	mov	r2, r5
 800655c:	4621      	mov	r1, r4
 800655e:	f7fe f94f 	bl	8004800 <memset>
 8006562:	e7f4      	b.n	800654e <_calloc_r+0x12>

08006564 <_free_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4605      	mov	r5, r0
 8006568:	2900      	cmp	r1, #0
 800656a:	d040      	beq.n	80065ee <_free_r+0x8a>
 800656c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006570:	1f0c      	subs	r4, r1, #4
 8006572:	2b00      	cmp	r3, #0
 8006574:	bfb8      	it	lt
 8006576:	18e4      	addlt	r4, r4, r3
 8006578:	f000 fa7e 	bl	8006a78 <__malloc_lock>
 800657c:	4a1c      	ldr	r2, [pc, #112]	; (80065f0 <_free_r+0x8c>)
 800657e:	6813      	ldr	r3, [r2, #0]
 8006580:	b933      	cbnz	r3, 8006590 <_free_r+0x2c>
 8006582:	6063      	str	r3, [r4, #4]
 8006584:	6014      	str	r4, [r2, #0]
 8006586:	4628      	mov	r0, r5
 8006588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800658c:	f000 ba7a 	b.w	8006a84 <__malloc_unlock>
 8006590:	42a3      	cmp	r3, r4
 8006592:	d908      	bls.n	80065a6 <_free_r+0x42>
 8006594:	6820      	ldr	r0, [r4, #0]
 8006596:	1821      	adds	r1, r4, r0
 8006598:	428b      	cmp	r3, r1
 800659a:	bf01      	itttt	eq
 800659c:	6819      	ldreq	r1, [r3, #0]
 800659e:	685b      	ldreq	r3, [r3, #4]
 80065a0:	1809      	addeq	r1, r1, r0
 80065a2:	6021      	streq	r1, [r4, #0]
 80065a4:	e7ed      	b.n	8006582 <_free_r+0x1e>
 80065a6:	461a      	mov	r2, r3
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	b10b      	cbz	r3, 80065b0 <_free_r+0x4c>
 80065ac:	42a3      	cmp	r3, r4
 80065ae:	d9fa      	bls.n	80065a6 <_free_r+0x42>
 80065b0:	6811      	ldr	r1, [r2, #0]
 80065b2:	1850      	adds	r0, r2, r1
 80065b4:	42a0      	cmp	r0, r4
 80065b6:	d10b      	bne.n	80065d0 <_free_r+0x6c>
 80065b8:	6820      	ldr	r0, [r4, #0]
 80065ba:	4401      	add	r1, r0
 80065bc:	1850      	adds	r0, r2, r1
 80065be:	4283      	cmp	r3, r0
 80065c0:	6011      	str	r1, [r2, #0]
 80065c2:	d1e0      	bne.n	8006586 <_free_r+0x22>
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	4401      	add	r1, r0
 80065ca:	6011      	str	r1, [r2, #0]
 80065cc:	6053      	str	r3, [r2, #4]
 80065ce:	e7da      	b.n	8006586 <_free_r+0x22>
 80065d0:	d902      	bls.n	80065d8 <_free_r+0x74>
 80065d2:	230c      	movs	r3, #12
 80065d4:	602b      	str	r3, [r5, #0]
 80065d6:	e7d6      	b.n	8006586 <_free_r+0x22>
 80065d8:	6820      	ldr	r0, [r4, #0]
 80065da:	1821      	adds	r1, r4, r0
 80065dc:	428b      	cmp	r3, r1
 80065de:	bf01      	itttt	eq
 80065e0:	6819      	ldreq	r1, [r3, #0]
 80065e2:	685b      	ldreq	r3, [r3, #4]
 80065e4:	1809      	addeq	r1, r1, r0
 80065e6:	6021      	streq	r1, [r4, #0]
 80065e8:	6063      	str	r3, [r4, #4]
 80065ea:	6054      	str	r4, [r2, #4]
 80065ec:	e7cb      	b.n	8006586 <_free_r+0x22>
 80065ee:	bd38      	pop	{r3, r4, r5, pc}
 80065f0:	20000518 	.word	0x20000518

080065f4 <sbrk_aligned>:
 80065f4:	b570      	push	{r4, r5, r6, lr}
 80065f6:	4e0e      	ldr	r6, [pc, #56]	; (8006630 <sbrk_aligned+0x3c>)
 80065f8:	460c      	mov	r4, r1
 80065fa:	6831      	ldr	r1, [r6, #0]
 80065fc:	4605      	mov	r5, r0
 80065fe:	b911      	cbnz	r1, 8006606 <sbrk_aligned+0x12>
 8006600:	f000 f9e8 	bl	80069d4 <_sbrk_r>
 8006604:	6030      	str	r0, [r6, #0]
 8006606:	4621      	mov	r1, r4
 8006608:	4628      	mov	r0, r5
 800660a:	f000 f9e3 	bl	80069d4 <_sbrk_r>
 800660e:	1c43      	adds	r3, r0, #1
 8006610:	d00a      	beq.n	8006628 <sbrk_aligned+0x34>
 8006612:	1cc4      	adds	r4, r0, #3
 8006614:	f024 0403 	bic.w	r4, r4, #3
 8006618:	42a0      	cmp	r0, r4
 800661a:	d007      	beq.n	800662c <sbrk_aligned+0x38>
 800661c:	1a21      	subs	r1, r4, r0
 800661e:	4628      	mov	r0, r5
 8006620:	f000 f9d8 	bl	80069d4 <_sbrk_r>
 8006624:	3001      	adds	r0, #1
 8006626:	d101      	bne.n	800662c <sbrk_aligned+0x38>
 8006628:	f04f 34ff 	mov.w	r4, #4294967295
 800662c:	4620      	mov	r0, r4
 800662e:	bd70      	pop	{r4, r5, r6, pc}
 8006630:	2000051c 	.word	0x2000051c

08006634 <_malloc_r>:
 8006634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006638:	1ccd      	adds	r5, r1, #3
 800663a:	f025 0503 	bic.w	r5, r5, #3
 800663e:	3508      	adds	r5, #8
 8006640:	2d0c      	cmp	r5, #12
 8006642:	bf38      	it	cc
 8006644:	250c      	movcc	r5, #12
 8006646:	2d00      	cmp	r5, #0
 8006648:	4607      	mov	r7, r0
 800664a:	db01      	blt.n	8006650 <_malloc_r+0x1c>
 800664c:	42a9      	cmp	r1, r5
 800664e:	d905      	bls.n	800665c <_malloc_r+0x28>
 8006650:	230c      	movs	r3, #12
 8006652:	2600      	movs	r6, #0
 8006654:	603b      	str	r3, [r7, #0]
 8006656:	4630      	mov	r0, r6
 8006658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800665c:	4e2e      	ldr	r6, [pc, #184]	; (8006718 <_malloc_r+0xe4>)
 800665e:	f000 fa0b 	bl	8006a78 <__malloc_lock>
 8006662:	6833      	ldr	r3, [r6, #0]
 8006664:	461c      	mov	r4, r3
 8006666:	bb34      	cbnz	r4, 80066b6 <_malloc_r+0x82>
 8006668:	4629      	mov	r1, r5
 800666a:	4638      	mov	r0, r7
 800666c:	f7ff ffc2 	bl	80065f4 <sbrk_aligned>
 8006670:	1c43      	adds	r3, r0, #1
 8006672:	4604      	mov	r4, r0
 8006674:	d14d      	bne.n	8006712 <_malloc_r+0xde>
 8006676:	6834      	ldr	r4, [r6, #0]
 8006678:	4626      	mov	r6, r4
 800667a:	2e00      	cmp	r6, #0
 800667c:	d140      	bne.n	8006700 <_malloc_r+0xcc>
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	4631      	mov	r1, r6
 8006682:	4638      	mov	r0, r7
 8006684:	eb04 0803 	add.w	r8, r4, r3
 8006688:	f000 f9a4 	bl	80069d4 <_sbrk_r>
 800668c:	4580      	cmp	r8, r0
 800668e:	d13a      	bne.n	8006706 <_malloc_r+0xd2>
 8006690:	6821      	ldr	r1, [r4, #0]
 8006692:	3503      	adds	r5, #3
 8006694:	1a6d      	subs	r5, r5, r1
 8006696:	f025 0503 	bic.w	r5, r5, #3
 800669a:	3508      	adds	r5, #8
 800669c:	2d0c      	cmp	r5, #12
 800669e:	bf38      	it	cc
 80066a0:	250c      	movcc	r5, #12
 80066a2:	4638      	mov	r0, r7
 80066a4:	4629      	mov	r1, r5
 80066a6:	f7ff ffa5 	bl	80065f4 <sbrk_aligned>
 80066aa:	3001      	adds	r0, #1
 80066ac:	d02b      	beq.n	8006706 <_malloc_r+0xd2>
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	442b      	add	r3, r5
 80066b2:	6023      	str	r3, [r4, #0]
 80066b4:	e00e      	b.n	80066d4 <_malloc_r+0xa0>
 80066b6:	6822      	ldr	r2, [r4, #0]
 80066b8:	1b52      	subs	r2, r2, r5
 80066ba:	d41e      	bmi.n	80066fa <_malloc_r+0xc6>
 80066bc:	2a0b      	cmp	r2, #11
 80066be:	d916      	bls.n	80066ee <_malloc_r+0xba>
 80066c0:	1961      	adds	r1, r4, r5
 80066c2:	42a3      	cmp	r3, r4
 80066c4:	6025      	str	r5, [r4, #0]
 80066c6:	bf18      	it	ne
 80066c8:	6059      	strne	r1, [r3, #4]
 80066ca:	6863      	ldr	r3, [r4, #4]
 80066cc:	bf08      	it	eq
 80066ce:	6031      	streq	r1, [r6, #0]
 80066d0:	5162      	str	r2, [r4, r5]
 80066d2:	604b      	str	r3, [r1, #4]
 80066d4:	4638      	mov	r0, r7
 80066d6:	f104 060b 	add.w	r6, r4, #11
 80066da:	f000 f9d3 	bl	8006a84 <__malloc_unlock>
 80066de:	f026 0607 	bic.w	r6, r6, #7
 80066e2:	1d23      	adds	r3, r4, #4
 80066e4:	1af2      	subs	r2, r6, r3
 80066e6:	d0b6      	beq.n	8006656 <_malloc_r+0x22>
 80066e8:	1b9b      	subs	r3, r3, r6
 80066ea:	50a3      	str	r3, [r4, r2]
 80066ec:	e7b3      	b.n	8006656 <_malloc_r+0x22>
 80066ee:	6862      	ldr	r2, [r4, #4]
 80066f0:	42a3      	cmp	r3, r4
 80066f2:	bf0c      	ite	eq
 80066f4:	6032      	streq	r2, [r6, #0]
 80066f6:	605a      	strne	r2, [r3, #4]
 80066f8:	e7ec      	b.n	80066d4 <_malloc_r+0xa0>
 80066fa:	4623      	mov	r3, r4
 80066fc:	6864      	ldr	r4, [r4, #4]
 80066fe:	e7b2      	b.n	8006666 <_malloc_r+0x32>
 8006700:	4634      	mov	r4, r6
 8006702:	6876      	ldr	r6, [r6, #4]
 8006704:	e7b9      	b.n	800667a <_malloc_r+0x46>
 8006706:	230c      	movs	r3, #12
 8006708:	4638      	mov	r0, r7
 800670a:	603b      	str	r3, [r7, #0]
 800670c:	f000 f9ba 	bl	8006a84 <__malloc_unlock>
 8006710:	e7a1      	b.n	8006656 <_malloc_r+0x22>
 8006712:	6025      	str	r5, [r4, #0]
 8006714:	e7de      	b.n	80066d4 <_malloc_r+0xa0>
 8006716:	bf00      	nop
 8006718:	20000518 	.word	0x20000518

0800671c <__ssputs_r>:
 800671c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006720:	688e      	ldr	r6, [r1, #8]
 8006722:	4682      	mov	sl, r0
 8006724:	429e      	cmp	r6, r3
 8006726:	460c      	mov	r4, r1
 8006728:	4690      	mov	r8, r2
 800672a:	461f      	mov	r7, r3
 800672c:	d838      	bhi.n	80067a0 <__ssputs_r+0x84>
 800672e:	898a      	ldrh	r2, [r1, #12]
 8006730:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006734:	d032      	beq.n	800679c <__ssputs_r+0x80>
 8006736:	6825      	ldr	r5, [r4, #0]
 8006738:	6909      	ldr	r1, [r1, #16]
 800673a:	3301      	adds	r3, #1
 800673c:	eba5 0901 	sub.w	r9, r5, r1
 8006740:	6965      	ldr	r5, [r4, #20]
 8006742:	444b      	add	r3, r9
 8006744:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006748:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800674c:	106d      	asrs	r5, r5, #1
 800674e:	429d      	cmp	r5, r3
 8006750:	bf38      	it	cc
 8006752:	461d      	movcc	r5, r3
 8006754:	0553      	lsls	r3, r2, #21
 8006756:	d531      	bpl.n	80067bc <__ssputs_r+0xa0>
 8006758:	4629      	mov	r1, r5
 800675a:	f7ff ff6b 	bl	8006634 <_malloc_r>
 800675e:	4606      	mov	r6, r0
 8006760:	b950      	cbnz	r0, 8006778 <__ssputs_r+0x5c>
 8006762:	230c      	movs	r3, #12
 8006764:	f04f 30ff 	mov.w	r0, #4294967295
 8006768:	f8ca 3000 	str.w	r3, [sl]
 800676c:	89a3      	ldrh	r3, [r4, #12]
 800676e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006772:	81a3      	strh	r3, [r4, #12]
 8006774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006778:	464a      	mov	r2, r9
 800677a:	6921      	ldr	r1, [r4, #16]
 800677c:	f7fe f818 	bl	80047b0 <memcpy>
 8006780:	89a3      	ldrh	r3, [r4, #12]
 8006782:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678a:	81a3      	strh	r3, [r4, #12]
 800678c:	6126      	str	r6, [r4, #16]
 800678e:	444e      	add	r6, r9
 8006790:	6026      	str	r6, [r4, #0]
 8006792:	463e      	mov	r6, r7
 8006794:	6165      	str	r5, [r4, #20]
 8006796:	eba5 0509 	sub.w	r5, r5, r9
 800679a:	60a5      	str	r5, [r4, #8]
 800679c:	42be      	cmp	r6, r7
 800679e:	d900      	bls.n	80067a2 <__ssputs_r+0x86>
 80067a0:	463e      	mov	r6, r7
 80067a2:	4632      	mov	r2, r6
 80067a4:	4641      	mov	r1, r8
 80067a6:	6820      	ldr	r0, [r4, #0]
 80067a8:	f7fe f810 	bl	80047cc <memmove>
 80067ac:	68a3      	ldr	r3, [r4, #8]
 80067ae:	2000      	movs	r0, #0
 80067b0:	1b9b      	subs	r3, r3, r6
 80067b2:	60a3      	str	r3, [r4, #8]
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	4433      	add	r3, r6
 80067b8:	6023      	str	r3, [r4, #0]
 80067ba:	e7db      	b.n	8006774 <__ssputs_r+0x58>
 80067bc:	462a      	mov	r2, r5
 80067be:	f000 f967 	bl	8006a90 <_realloc_r>
 80067c2:	4606      	mov	r6, r0
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d1e1      	bne.n	800678c <__ssputs_r+0x70>
 80067c8:	4650      	mov	r0, sl
 80067ca:	6921      	ldr	r1, [r4, #16]
 80067cc:	f7ff feca 	bl	8006564 <_free_r>
 80067d0:	e7c7      	b.n	8006762 <__ssputs_r+0x46>
	...

080067d4 <_svfiprintf_r>:
 80067d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d8:	4698      	mov	r8, r3
 80067da:	898b      	ldrh	r3, [r1, #12]
 80067dc:	4607      	mov	r7, r0
 80067de:	061b      	lsls	r3, r3, #24
 80067e0:	460d      	mov	r5, r1
 80067e2:	4614      	mov	r4, r2
 80067e4:	b09d      	sub	sp, #116	; 0x74
 80067e6:	d50e      	bpl.n	8006806 <_svfiprintf_r+0x32>
 80067e8:	690b      	ldr	r3, [r1, #16]
 80067ea:	b963      	cbnz	r3, 8006806 <_svfiprintf_r+0x32>
 80067ec:	2140      	movs	r1, #64	; 0x40
 80067ee:	f7ff ff21 	bl	8006634 <_malloc_r>
 80067f2:	6028      	str	r0, [r5, #0]
 80067f4:	6128      	str	r0, [r5, #16]
 80067f6:	b920      	cbnz	r0, 8006802 <_svfiprintf_r+0x2e>
 80067f8:	230c      	movs	r3, #12
 80067fa:	603b      	str	r3, [r7, #0]
 80067fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006800:	e0d1      	b.n	80069a6 <_svfiprintf_r+0x1d2>
 8006802:	2340      	movs	r3, #64	; 0x40
 8006804:	616b      	str	r3, [r5, #20]
 8006806:	2300      	movs	r3, #0
 8006808:	9309      	str	r3, [sp, #36]	; 0x24
 800680a:	2320      	movs	r3, #32
 800680c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006810:	2330      	movs	r3, #48	; 0x30
 8006812:	f04f 0901 	mov.w	r9, #1
 8006816:	f8cd 800c 	str.w	r8, [sp, #12]
 800681a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80069c0 <_svfiprintf_r+0x1ec>
 800681e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006822:	4623      	mov	r3, r4
 8006824:	469a      	mov	sl, r3
 8006826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800682a:	b10a      	cbz	r2, 8006830 <_svfiprintf_r+0x5c>
 800682c:	2a25      	cmp	r2, #37	; 0x25
 800682e:	d1f9      	bne.n	8006824 <_svfiprintf_r+0x50>
 8006830:	ebba 0b04 	subs.w	fp, sl, r4
 8006834:	d00b      	beq.n	800684e <_svfiprintf_r+0x7a>
 8006836:	465b      	mov	r3, fp
 8006838:	4622      	mov	r2, r4
 800683a:	4629      	mov	r1, r5
 800683c:	4638      	mov	r0, r7
 800683e:	f7ff ff6d 	bl	800671c <__ssputs_r>
 8006842:	3001      	adds	r0, #1
 8006844:	f000 80aa 	beq.w	800699c <_svfiprintf_r+0x1c8>
 8006848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800684a:	445a      	add	r2, fp
 800684c:	9209      	str	r2, [sp, #36]	; 0x24
 800684e:	f89a 3000 	ldrb.w	r3, [sl]
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 80a2 	beq.w	800699c <_svfiprintf_r+0x1c8>
 8006858:	2300      	movs	r3, #0
 800685a:	f04f 32ff 	mov.w	r2, #4294967295
 800685e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006862:	f10a 0a01 	add.w	sl, sl, #1
 8006866:	9304      	str	r3, [sp, #16]
 8006868:	9307      	str	r3, [sp, #28]
 800686a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800686e:	931a      	str	r3, [sp, #104]	; 0x68
 8006870:	4654      	mov	r4, sl
 8006872:	2205      	movs	r2, #5
 8006874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006878:	4851      	ldr	r0, [pc, #324]	; (80069c0 <_svfiprintf_r+0x1ec>)
 800687a:	f7ff facf 	bl	8005e1c <memchr>
 800687e:	9a04      	ldr	r2, [sp, #16]
 8006880:	b9d8      	cbnz	r0, 80068ba <_svfiprintf_r+0xe6>
 8006882:	06d0      	lsls	r0, r2, #27
 8006884:	bf44      	itt	mi
 8006886:	2320      	movmi	r3, #32
 8006888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800688c:	0711      	lsls	r1, r2, #28
 800688e:	bf44      	itt	mi
 8006890:	232b      	movmi	r3, #43	; 0x2b
 8006892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006896:	f89a 3000 	ldrb.w	r3, [sl]
 800689a:	2b2a      	cmp	r3, #42	; 0x2a
 800689c:	d015      	beq.n	80068ca <_svfiprintf_r+0xf6>
 800689e:	4654      	mov	r4, sl
 80068a0:	2000      	movs	r0, #0
 80068a2:	f04f 0c0a 	mov.w	ip, #10
 80068a6:	9a07      	ldr	r2, [sp, #28]
 80068a8:	4621      	mov	r1, r4
 80068aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068ae:	3b30      	subs	r3, #48	; 0x30
 80068b0:	2b09      	cmp	r3, #9
 80068b2:	d94e      	bls.n	8006952 <_svfiprintf_r+0x17e>
 80068b4:	b1b0      	cbz	r0, 80068e4 <_svfiprintf_r+0x110>
 80068b6:	9207      	str	r2, [sp, #28]
 80068b8:	e014      	b.n	80068e4 <_svfiprintf_r+0x110>
 80068ba:	eba0 0308 	sub.w	r3, r0, r8
 80068be:	fa09 f303 	lsl.w	r3, r9, r3
 80068c2:	4313      	orrs	r3, r2
 80068c4:	46a2      	mov	sl, r4
 80068c6:	9304      	str	r3, [sp, #16]
 80068c8:	e7d2      	b.n	8006870 <_svfiprintf_r+0x9c>
 80068ca:	9b03      	ldr	r3, [sp, #12]
 80068cc:	1d19      	adds	r1, r3, #4
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	9103      	str	r1, [sp, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	bfbb      	ittet	lt
 80068d6:	425b      	neglt	r3, r3
 80068d8:	f042 0202 	orrlt.w	r2, r2, #2
 80068dc:	9307      	strge	r3, [sp, #28]
 80068de:	9307      	strlt	r3, [sp, #28]
 80068e0:	bfb8      	it	lt
 80068e2:	9204      	strlt	r2, [sp, #16]
 80068e4:	7823      	ldrb	r3, [r4, #0]
 80068e6:	2b2e      	cmp	r3, #46	; 0x2e
 80068e8:	d10c      	bne.n	8006904 <_svfiprintf_r+0x130>
 80068ea:	7863      	ldrb	r3, [r4, #1]
 80068ec:	2b2a      	cmp	r3, #42	; 0x2a
 80068ee:	d135      	bne.n	800695c <_svfiprintf_r+0x188>
 80068f0:	9b03      	ldr	r3, [sp, #12]
 80068f2:	3402      	adds	r4, #2
 80068f4:	1d1a      	adds	r2, r3, #4
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	9203      	str	r2, [sp, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	bfb8      	it	lt
 80068fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8006902:	9305      	str	r3, [sp, #20]
 8006904:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80069c4 <_svfiprintf_r+0x1f0>
 8006908:	2203      	movs	r2, #3
 800690a:	4650      	mov	r0, sl
 800690c:	7821      	ldrb	r1, [r4, #0]
 800690e:	f7ff fa85 	bl	8005e1c <memchr>
 8006912:	b140      	cbz	r0, 8006926 <_svfiprintf_r+0x152>
 8006914:	2340      	movs	r3, #64	; 0x40
 8006916:	eba0 000a 	sub.w	r0, r0, sl
 800691a:	fa03 f000 	lsl.w	r0, r3, r0
 800691e:	9b04      	ldr	r3, [sp, #16]
 8006920:	3401      	adds	r4, #1
 8006922:	4303      	orrs	r3, r0
 8006924:	9304      	str	r3, [sp, #16]
 8006926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800692a:	2206      	movs	r2, #6
 800692c:	4826      	ldr	r0, [pc, #152]	; (80069c8 <_svfiprintf_r+0x1f4>)
 800692e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006932:	f7ff fa73 	bl	8005e1c <memchr>
 8006936:	2800      	cmp	r0, #0
 8006938:	d038      	beq.n	80069ac <_svfiprintf_r+0x1d8>
 800693a:	4b24      	ldr	r3, [pc, #144]	; (80069cc <_svfiprintf_r+0x1f8>)
 800693c:	bb1b      	cbnz	r3, 8006986 <_svfiprintf_r+0x1b2>
 800693e:	9b03      	ldr	r3, [sp, #12]
 8006940:	3307      	adds	r3, #7
 8006942:	f023 0307 	bic.w	r3, r3, #7
 8006946:	3308      	adds	r3, #8
 8006948:	9303      	str	r3, [sp, #12]
 800694a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800694c:	4433      	add	r3, r6
 800694e:	9309      	str	r3, [sp, #36]	; 0x24
 8006950:	e767      	b.n	8006822 <_svfiprintf_r+0x4e>
 8006952:	460c      	mov	r4, r1
 8006954:	2001      	movs	r0, #1
 8006956:	fb0c 3202 	mla	r2, ip, r2, r3
 800695a:	e7a5      	b.n	80068a8 <_svfiprintf_r+0xd4>
 800695c:	2300      	movs	r3, #0
 800695e:	f04f 0c0a 	mov.w	ip, #10
 8006962:	4619      	mov	r1, r3
 8006964:	3401      	adds	r4, #1
 8006966:	9305      	str	r3, [sp, #20]
 8006968:	4620      	mov	r0, r4
 800696a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800696e:	3a30      	subs	r2, #48	; 0x30
 8006970:	2a09      	cmp	r2, #9
 8006972:	d903      	bls.n	800697c <_svfiprintf_r+0x1a8>
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0c5      	beq.n	8006904 <_svfiprintf_r+0x130>
 8006978:	9105      	str	r1, [sp, #20]
 800697a:	e7c3      	b.n	8006904 <_svfiprintf_r+0x130>
 800697c:	4604      	mov	r4, r0
 800697e:	2301      	movs	r3, #1
 8006980:	fb0c 2101 	mla	r1, ip, r1, r2
 8006984:	e7f0      	b.n	8006968 <_svfiprintf_r+0x194>
 8006986:	ab03      	add	r3, sp, #12
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	462a      	mov	r2, r5
 800698c:	4638      	mov	r0, r7
 800698e:	4b10      	ldr	r3, [pc, #64]	; (80069d0 <_svfiprintf_r+0x1fc>)
 8006990:	a904      	add	r1, sp, #16
 8006992:	f7fd ffdb 	bl	800494c <_printf_float>
 8006996:	1c42      	adds	r2, r0, #1
 8006998:	4606      	mov	r6, r0
 800699a:	d1d6      	bne.n	800694a <_svfiprintf_r+0x176>
 800699c:	89ab      	ldrh	r3, [r5, #12]
 800699e:	065b      	lsls	r3, r3, #25
 80069a0:	f53f af2c 	bmi.w	80067fc <_svfiprintf_r+0x28>
 80069a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069a6:	b01d      	add	sp, #116	; 0x74
 80069a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ac:	ab03      	add	r3, sp, #12
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	462a      	mov	r2, r5
 80069b2:	4638      	mov	r0, r7
 80069b4:	4b06      	ldr	r3, [pc, #24]	; (80069d0 <_svfiprintf_r+0x1fc>)
 80069b6:	a904      	add	r1, sp, #16
 80069b8:	f7fe fa64 	bl	8004e84 <_printf_i>
 80069bc:	e7eb      	b.n	8006996 <_svfiprintf_r+0x1c2>
 80069be:	bf00      	nop
 80069c0:	08007fb4 	.word	0x08007fb4
 80069c4:	08007fba 	.word	0x08007fba
 80069c8:	08007fbe 	.word	0x08007fbe
 80069cc:	0800494d 	.word	0x0800494d
 80069d0:	0800671d 	.word	0x0800671d

080069d4 <_sbrk_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	2300      	movs	r3, #0
 80069d8:	4d05      	ldr	r5, [pc, #20]	; (80069f0 <_sbrk_r+0x1c>)
 80069da:	4604      	mov	r4, r0
 80069dc:	4608      	mov	r0, r1
 80069de:	602b      	str	r3, [r5, #0]
 80069e0:	f7fb fc22 	bl	8002228 <_sbrk>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d102      	bne.n	80069ee <_sbrk_r+0x1a>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	b103      	cbz	r3, 80069ee <_sbrk_r+0x1a>
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	20000520 	.word	0x20000520

080069f4 <__assert_func>:
 80069f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069f6:	4614      	mov	r4, r2
 80069f8:	461a      	mov	r2, r3
 80069fa:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <__assert_func+0x2c>)
 80069fc:	4605      	mov	r5, r0
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68d8      	ldr	r0, [r3, #12]
 8006a02:	b14c      	cbz	r4, 8006a18 <__assert_func+0x24>
 8006a04:	4b07      	ldr	r3, [pc, #28]	; (8006a24 <__assert_func+0x30>)
 8006a06:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a0a:	9100      	str	r1, [sp, #0]
 8006a0c:	462b      	mov	r3, r5
 8006a0e:	4906      	ldr	r1, [pc, #24]	; (8006a28 <__assert_func+0x34>)
 8006a10:	f000 f80e 	bl	8006a30 <fiprintf>
 8006a14:	f000 fa90 	bl	8006f38 <abort>
 8006a18:	4b04      	ldr	r3, [pc, #16]	; (8006a2c <__assert_func+0x38>)
 8006a1a:	461c      	mov	r4, r3
 8006a1c:	e7f3      	b.n	8006a06 <__assert_func+0x12>
 8006a1e:	bf00      	nop
 8006a20:	20000020 	.word	0x20000020
 8006a24:	08007fc5 	.word	0x08007fc5
 8006a28:	08007fd2 	.word	0x08007fd2
 8006a2c:	08008000 	.word	0x08008000

08006a30 <fiprintf>:
 8006a30:	b40e      	push	{r1, r2, r3}
 8006a32:	b503      	push	{r0, r1, lr}
 8006a34:	4601      	mov	r1, r0
 8006a36:	ab03      	add	r3, sp, #12
 8006a38:	4805      	ldr	r0, [pc, #20]	; (8006a50 <fiprintf+0x20>)
 8006a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a3e:	6800      	ldr	r0, [r0, #0]
 8006a40:	9301      	str	r3, [sp, #4]
 8006a42:	f000 f87b 	bl	8006b3c <_vfiprintf_r>
 8006a46:	b002      	add	sp, #8
 8006a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a4c:	b003      	add	sp, #12
 8006a4e:	4770      	bx	lr
 8006a50:	20000020 	.word	0x20000020

08006a54 <__ascii_mbtowc>:
 8006a54:	b082      	sub	sp, #8
 8006a56:	b901      	cbnz	r1, 8006a5a <__ascii_mbtowc+0x6>
 8006a58:	a901      	add	r1, sp, #4
 8006a5a:	b142      	cbz	r2, 8006a6e <__ascii_mbtowc+0x1a>
 8006a5c:	b14b      	cbz	r3, 8006a72 <__ascii_mbtowc+0x1e>
 8006a5e:	7813      	ldrb	r3, [r2, #0]
 8006a60:	600b      	str	r3, [r1, #0]
 8006a62:	7812      	ldrb	r2, [r2, #0]
 8006a64:	1e10      	subs	r0, r2, #0
 8006a66:	bf18      	it	ne
 8006a68:	2001      	movne	r0, #1
 8006a6a:	b002      	add	sp, #8
 8006a6c:	4770      	bx	lr
 8006a6e:	4610      	mov	r0, r2
 8006a70:	e7fb      	b.n	8006a6a <__ascii_mbtowc+0x16>
 8006a72:	f06f 0001 	mvn.w	r0, #1
 8006a76:	e7f8      	b.n	8006a6a <__ascii_mbtowc+0x16>

08006a78 <__malloc_lock>:
 8006a78:	4801      	ldr	r0, [pc, #4]	; (8006a80 <__malloc_lock+0x8>)
 8006a7a:	f000 bc19 	b.w	80072b0 <__retarget_lock_acquire_recursive>
 8006a7e:	bf00      	nop
 8006a80:	20000524 	.word	0x20000524

08006a84 <__malloc_unlock>:
 8006a84:	4801      	ldr	r0, [pc, #4]	; (8006a8c <__malloc_unlock+0x8>)
 8006a86:	f000 bc14 	b.w	80072b2 <__retarget_lock_release_recursive>
 8006a8a:	bf00      	nop
 8006a8c:	20000524 	.word	0x20000524

08006a90 <_realloc_r>:
 8006a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a94:	4680      	mov	r8, r0
 8006a96:	4614      	mov	r4, r2
 8006a98:	460e      	mov	r6, r1
 8006a9a:	b921      	cbnz	r1, 8006aa6 <_realloc_r+0x16>
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa2:	f7ff bdc7 	b.w	8006634 <_malloc_r>
 8006aa6:	b92a      	cbnz	r2, 8006ab4 <_realloc_r+0x24>
 8006aa8:	f7ff fd5c 	bl	8006564 <_free_r>
 8006aac:	4625      	mov	r5, r4
 8006aae:	4628      	mov	r0, r5
 8006ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ab4:	f000 fc64 	bl	8007380 <_malloc_usable_size_r>
 8006ab8:	4284      	cmp	r4, r0
 8006aba:	4607      	mov	r7, r0
 8006abc:	d802      	bhi.n	8006ac4 <_realloc_r+0x34>
 8006abe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ac2:	d812      	bhi.n	8006aea <_realloc_r+0x5a>
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	4640      	mov	r0, r8
 8006ac8:	f7ff fdb4 	bl	8006634 <_malloc_r>
 8006acc:	4605      	mov	r5, r0
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d0ed      	beq.n	8006aae <_realloc_r+0x1e>
 8006ad2:	42bc      	cmp	r4, r7
 8006ad4:	4622      	mov	r2, r4
 8006ad6:	4631      	mov	r1, r6
 8006ad8:	bf28      	it	cs
 8006ada:	463a      	movcs	r2, r7
 8006adc:	f7fd fe68 	bl	80047b0 <memcpy>
 8006ae0:	4631      	mov	r1, r6
 8006ae2:	4640      	mov	r0, r8
 8006ae4:	f7ff fd3e 	bl	8006564 <_free_r>
 8006ae8:	e7e1      	b.n	8006aae <_realloc_r+0x1e>
 8006aea:	4635      	mov	r5, r6
 8006aec:	e7df      	b.n	8006aae <_realloc_r+0x1e>

08006aee <__sfputc_r>:
 8006aee:	6893      	ldr	r3, [r2, #8]
 8006af0:	b410      	push	{r4}
 8006af2:	3b01      	subs	r3, #1
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	6093      	str	r3, [r2, #8]
 8006af8:	da07      	bge.n	8006b0a <__sfputc_r+0x1c>
 8006afa:	6994      	ldr	r4, [r2, #24]
 8006afc:	42a3      	cmp	r3, r4
 8006afe:	db01      	blt.n	8006b04 <__sfputc_r+0x16>
 8006b00:	290a      	cmp	r1, #10
 8006b02:	d102      	bne.n	8006b0a <__sfputc_r+0x1c>
 8006b04:	bc10      	pop	{r4}
 8006b06:	f000 b949 	b.w	8006d9c <__swbuf_r>
 8006b0a:	6813      	ldr	r3, [r2, #0]
 8006b0c:	1c58      	adds	r0, r3, #1
 8006b0e:	6010      	str	r0, [r2, #0]
 8006b10:	7019      	strb	r1, [r3, #0]
 8006b12:	4608      	mov	r0, r1
 8006b14:	bc10      	pop	{r4}
 8006b16:	4770      	bx	lr

08006b18 <__sfputs_r>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	4606      	mov	r6, r0
 8006b1c:	460f      	mov	r7, r1
 8006b1e:	4614      	mov	r4, r2
 8006b20:	18d5      	adds	r5, r2, r3
 8006b22:	42ac      	cmp	r4, r5
 8006b24:	d101      	bne.n	8006b2a <__sfputs_r+0x12>
 8006b26:	2000      	movs	r0, #0
 8006b28:	e007      	b.n	8006b3a <__sfputs_r+0x22>
 8006b2a:	463a      	mov	r2, r7
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b32:	f7ff ffdc 	bl	8006aee <__sfputc_r>
 8006b36:	1c43      	adds	r3, r0, #1
 8006b38:	d1f3      	bne.n	8006b22 <__sfputs_r+0xa>
 8006b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006b3c <_vfiprintf_r>:
 8006b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b40:	460d      	mov	r5, r1
 8006b42:	4614      	mov	r4, r2
 8006b44:	4698      	mov	r8, r3
 8006b46:	4606      	mov	r6, r0
 8006b48:	b09d      	sub	sp, #116	; 0x74
 8006b4a:	b118      	cbz	r0, 8006b54 <_vfiprintf_r+0x18>
 8006b4c:	6983      	ldr	r3, [r0, #24]
 8006b4e:	b90b      	cbnz	r3, 8006b54 <_vfiprintf_r+0x18>
 8006b50:	f000 fb10 	bl	8007174 <__sinit>
 8006b54:	4b89      	ldr	r3, [pc, #548]	; (8006d7c <_vfiprintf_r+0x240>)
 8006b56:	429d      	cmp	r5, r3
 8006b58:	d11b      	bne.n	8006b92 <_vfiprintf_r+0x56>
 8006b5a:	6875      	ldr	r5, [r6, #4]
 8006b5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b5e:	07d9      	lsls	r1, r3, #31
 8006b60:	d405      	bmi.n	8006b6e <_vfiprintf_r+0x32>
 8006b62:	89ab      	ldrh	r3, [r5, #12]
 8006b64:	059a      	lsls	r2, r3, #22
 8006b66:	d402      	bmi.n	8006b6e <_vfiprintf_r+0x32>
 8006b68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b6a:	f000 fba1 	bl	80072b0 <__retarget_lock_acquire_recursive>
 8006b6e:	89ab      	ldrh	r3, [r5, #12]
 8006b70:	071b      	lsls	r3, r3, #28
 8006b72:	d501      	bpl.n	8006b78 <_vfiprintf_r+0x3c>
 8006b74:	692b      	ldr	r3, [r5, #16]
 8006b76:	b9eb      	cbnz	r3, 8006bb4 <_vfiprintf_r+0x78>
 8006b78:	4629      	mov	r1, r5
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	f000 f96e 	bl	8006e5c <__swsetup_r>
 8006b80:	b1c0      	cbz	r0, 8006bb4 <_vfiprintf_r+0x78>
 8006b82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b84:	07dc      	lsls	r4, r3, #31
 8006b86:	d50e      	bpl.n	8006ba6 <_vfiprintf_r+0x6a>
 8006b88:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8c:	b01d      	add	sp, #116	; 0x74
 8006b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b92:	4b7b      	ldr	r3, [pc, #492]	; (8006d80 <_vfiprintf_r+0x244>)
 8006b94:	429d      	cmp	r5, r3
 8006b96:	d101      	bne.n	8006b9c <_vfiprintf_r+0x60>
 8006b98:	68b5      	ldr	r5, [r6, #8]
 8006b9a:	e7df      	b.n	8006b5c <_vfiprintf_r+0x20>
 8006b9c:	4b79      	ldr	r3, [pc, #484]	; (8006d84 <_vfiprintf_r+0x248>)
 8006b9e:	429d      	cmp	r5, r3
 8006ba0:	bf08      	it	eq
 8006ba2:	68f5      	ldreq	r5, [r6, #12]
 8006ba4:	e7da      	b.n	8006b5c <_vfiprintf_r+0x20>
 8006ba6:	89ab      	ldrh	r3, [r5, #12]
 8006ba8:	0598      	lsls	r0, r3, #22
 8006baa:	d4ed      	bmi.n	8006b88 <_vfiprintf_r+0x4c>
 8006bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bae:	f000 fb80 	bl	80072b2 <__retarget_lock_release_recursive>
 8006bb2:	e7e9      	b.n	8006b88 <_vfiprintf_r+0x4c>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb8:	2320      	movs	r3, #32
 8006bba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bbe:	2330      	movs	r3, #48	; 0x30
 8006bc0:	f04f 0901 	mov.w	r9, #1
 8006bc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bc8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006d88 <_vfiprintf_r+0x24c>
 8006bcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bd0:	4623      	mov	r3, r4
 8006bd2:	469a      	mov	sl, r3
 8006bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bd8:	b10a      	cbz	r2, 8006bde <_vfiprintf_r+0xa2>
 8006bda:	2a25      	cmp	r2, #37	; 0x25
 8006bdc:	d1f9      	bne.n	8006bd2 <_vfiprintf_r+0x96>
 8006bde:	ebba 0b04 	subs.w	fp, sl, r4
 8006be2:	d00b      	beq.n	8006bfc <_vfiprintf_r+0xc0>
 8006be4:	465b      	mov	r3, fp
 8006be6:	4622      	mov	r2, r4
 8006be8:	4629      	mov	r1, r5
 8006bea:	4630      	mov	r0, r6
 8006bec:	f7ff ff94 	bl	8006b18 <__sfputs_r>
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	f000 80aa 	beq.w	8006d4a <_vfiprintf_r+0x20e>
 8006bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bf8:	445a      	add	r2, fp
 8006bfa:	9209      	str	r2, [sp, #36]	; 0x24
 8006bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 80a2 	beq.w	8006d4a <_vfiprintf_r+0x20e>
 8006c06:	2300      	movs	r3, #0
 8006c08:	f04f 32ff 	mov.w	r2, #4294967295
 8006c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c10:	f10a 0a01 	add.w	sl, sl, #1
 8006c14:	9304      	str	r3, [sp, #16]
 8006c16:	9307      	str	r3, [sp, #28]
 8006c18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c1c:	931a      	str	r3, [sp, #104]	; 0x68
 8006c1e:	4654      	mov	r4, sl
 8006c20:	2205      	movs	r2, #5
 8006c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c26:	4858      	ldr	r0, [pc, #352]	; (8006d88 <_vfiprintf_r+0x24c>)
 8006c28:	f7ff f8f8 	bl	8005e1c <memchr>
 8006c2c:	9a04      	ldr	r2, [sp, #16]
 8006c2e:	b9d8      	cbnz	r0, 8006c68 <_vfiprintf_r+0x12c>
 8006c30:	06d1      	lsls	r1, r2, #27
 8006c32:	bf44      	itt	mi
 8006c34:	2320      	movmi	r3, #32
 8006c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c3a:	0713      	lsls	r3, r2, #28
 8006c3c:	bf44      	itt	mi
 8006c3e:	232b      	movmi	r3, #43	; 0x2b
 8006c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c44:	f89a 3000 	ldrb.w	r3, [sl]
 8006c48:	2b2a      	cmp	r3, #42	; 0x2a
 8006c4a:	d015      	beq.n	8006c78 <_vfiprintf_r+0x13c>
 8006c4c:	4654      	mov	r4, sl
 8006c4e:	2000      	movs	r0, #0
 8006c50:	f04f 0c0a 	mov.w	ip, #10
 8006c54:	9a07      	ldr	r2, [sp, #28]
 8006c56:	4621      	mov	r1, r4
 8006c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c5c:	3b30      	subs	r3, #48	; 0x30
 8006c5e:	2b09      	cmp	r3, #9
 8006c60:	d94e      	bls.n	8006d00 <_vfiprintf_r+0x1c4>
 8006c62:	b1b0      	cbz	r0, 8006c92 <_vfiprintf_r+0x156>
 8006c64:	9207      	str	r2, [sp, #28]
 8006c66:	e014      	b.n	8006c92 <_vfiprintf_r+0x156>
 8006c68:	eba0 0308 	sub.w	r3, r0, r8
 8006c6c:	fa09 f303 	lsl.w	r3, r9, r3
 8006c70:	4313      	orrs	r3, r2
 8006c72:	46a2      	mov	sl, r4
 8006c74:	9304      	str	r3, [sp, #16]
 8006c76:	e7d2      	b.n	8006c1e <_vfiprintf_r+0xe2>
 8006c78:	9b03      	ldr	r3, [sp, #12]
 8006c7a:	1d19      	adds	r1, r3, #4
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	9103      	str	r1, [sp, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	bfbb      	ittet	lt
 8006c84:	425b      	neglt	r3, r3
 8006c86:	f042 0202 	orrlt.w	r2, r2, #2
 8006c8a:	9307      	strge	r3, [sp, #28]
 8006c8c:	9307      	strlt	r3, [sp, #28]
 8006c8e:	bfb8      	it	lt
 8006c90:	9204      	strlt	r2, [sp, #16]
 8006c92:	7823      	ldrb	r3, [r4, #0]
 8006c94:	2b2e      	cmp	r3, #46	; 0x2e
 8006c96:	d10c      	bne.n	8006cb2 <_vfiprintf_r+0x176>
 8006c98:	7863      	ldrb	r3, [r4, #1]
 8006c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c9c:	d135      	bne.n	8006d0a <_vfiprintf_r+0x1ce>
 8006c9e:	9b03      	ldr	r3, [sp, #12]
 8006ca0:	3402      	adds	r4, #2
 8006ca2:	1d1a      	adds	r2, r3, #4
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	9203      	str	r2, [sp, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	bfb8      	it	lt
 8006cac:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cb0:	9305      	str	r3, [sp, #20]
 8006cb2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006d8c <_vfiprintf_r+0x250>
 8006cb6:	2203      	movs	r2, #3
 8006cb8:	4650      	mov	r0, sl
 8006cba:	7821      	ldrb	r1, [r4, #0]
 8006cbc:	f7ff f8ae 	bl	8005e1c <memchr>
 8006cc0:	b140      	cbz	r0, 8006cd4 <_vfiprintf_r+0x198>
 8006cc2:	2340      	movs	r3, #64	; 0x40
 8006cc4:	eba0 000a 	sub.w	r0, r0, sl
 8006cc8:	fa03 f000 	lsl.w	r0, r3, r0
 8006ccc:	9b04      	ldr	r3, [sp, #16]
 8006cce:	3401      	adds	r4, #1
 8006cd0:	4303      	orrs	r3, r0
 8006cd2:	9304      	str	r3, [sp, #16]
 8006cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cd8:	2206      	movs	r2, #6
 8006cda:	482d      	ldr	r0, [pc, #180]	; (8006d90 <_vfiprintf_r+0x254>)
 8006cdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ce0:	f7ff f89c 	bl	8005e1c <memchr>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	d03f      	beq.n	8006d68 <_vfiprintf_r+0x22c>
 8006ce8:	4b2a      	ldr	r3, [pc, #168]	; (8006d94 <_vfiprintf_r+0x258>)
 8006cea:	bb1b      	cbnz	r3, 8006d34 <_vfiprintf_r+0x1f8>
 8006cec:	9b03      	ldr	r3, [sp, #12]
 8006cee:	3307      	adds	r3, #7
 8006cf0:	f023 0307 	bic.w	r3, r3, #7
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	9303      	str	r3, [sp, #12]
 8006cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cfa:	443b      	add	r3, r7
 8006cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8006cfe:	e767      	b.n	8006bd0 <_vfiprintf_r+0x94>
 8006d00:	460c      	mov	r4, r1
 8006d02:	2001      	movs	r0, #1
 8006d04:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d08:	e7a5      	b.n	8006c56 <_vfiprintf_r+0x11a>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f04f 0c0a 	mov.w	ip, #10
 8006d10:	4619      	mov	r1, r3
 8006d12:	3401      	adds	r4, #1
 8006d14:	9305      	str	r3, [sp, #20]
 8006d16:	4620      	mov	r0, r4
 8006d18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d1c:	3a30      	subs	r2, #48	; 0x30
 8006d1e:	2a09      	cmp	r2, #9
 8006d20:	d903      	bls.n	8006d2a <_vfiprintf_r+0x1ee>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0c5      	beq.n	8006cb2 <_vfiprintf_r+0x176>
 8006d26:	9105      	str	r1, [sp, #20]
 8006d28:	e7c3      	b.n	8006cb2 <_vfiprintf_r+0x176>
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d32:	e7f0      	b.n	8006d16 <_vfiprintf_r+0x1da>
 8006d34:	ab03      	add	r3, sp, #12
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	462a      	mov	r2, r5
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	4b16      	ldr	r3, [pc, #88]	; (8006d98 <_vfiprintf_r+0x25c>)
 8006d3e:	a904      	add	r1, sp, #16
 8006d40:	f7fd fe04 	bl	800494c <_printf_float>
 8006d44:	4607      	mov	r7, r0
 8006d46:	1c78      	adds	r0, r7, #1
 8006d48:	d1d6      	bne.n	8006cf8 <_vfiprintf_r+0x1bc>
 8006d4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d4c:	07d9      	lsls	r1, r3, #31
 8006d4e:	d405      	bmi.n	8006d5c <_vfiprintf_r+0x220>
 8006d50:	89ab      	ldrh	r3, [r5, #12]
 8006d52:	059a      	lsls	r2, r3, #22
 8006d54:	d402      	bmi.n	8006d5c <_vfiprintf_r+0x220>
 8006d56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d58:	f000 faab 	bl	80072b2 <__retarget_lock_release_recursive>
 8006d5c:	89ab      	ldrh	r3, [r5, #12]
 8006d5e:	065b      	lsls	r3, r3, #25
 8006d60:	f53f af12 	bmi.w	8006b88 <_vfiprintf_r+0x4c>
 8006d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d66:	e711      	b.n	8006b8c <_vfiprintf_r+0x50>
 8006d68:	ab03      	add	r3, sp, #12
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	462a      	mov	r2, r5
 8006d6e:	4630      	mov	r0, r6
 8006d70:	4b09      	ldr	r3, [pc, #36]	; (8006d98 <_vfiprintf_r+0x25c>)
 8006d72:	a904      	add	r1, sp, #16
 8006d74:	f7fe f886 	bl	8004e84 <_printf_i>
 8006d78:	e7e4      	b.n	8006d44 <_vfiprintf_r+0x208>
 8006d7a:	bf00      	nop
 8006d7c:	0800812c 	.word	0x0800812c
 8006d80:	0800814c 	.word	0x0800814c
 8006d84:	0800810c 	.word	0x0800810c
 8006d88:	08007fb4 	.word	0x08007fb4
 8006d8c:	08007fba 	.word	0x08007fba
 8006d90:	08007fbe 	.word	0x08007fbe
 8006d94:	0800494d 	.word	0x0800494d
 8006d98:	08006b19 	.word	0x08006b19

08006d9c <__swbuf_r>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	460e      	mov	r6, r1
 8006da0:	4614      	mov	r4, r2
 8006da2:	4605      	mov	r5, r0
 8006da4:	b118      	cbz	r0, 8006dae <__swbuf_r+0x12>
 8006da6:	6983      	ldr	r3, [r0, #24]
 8006da8:	b90b      	cbnz	r3, 8006dae <__swbuf_r+0x12>
 8006daa:	f000 f9e3 	bl	8007174 <__sinit>
 8006dae:	4b21      	ldr	r3, [pc, #132]	; (8006e34 <__swbuf_r+0x98>)
 8006db0:	429c      	cmp	r4, r3
 8006db2:	d12b      	bne.n	8006e0c <__swbuf_r+0x70>
 8006db4:	686c      	ldr	r4, [r5, #4]
 8006db6:	69a3      	ldr	r3, [r4, #24]
 8006db8:	60a3      	str	r3, [r4, #8]
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	071a      	lsls	r2, r3, #28
 8006dbe:	d52f      	bpl.n	8006e20 <__swbuf_r+0x84>
 8006dc0:	6923      	ldr	r3, [r4, #16]
 8006dc2:	b36b      	cbz	r3, 8006e20 <__swbuf_r+0x84>
 8006dc4:	6923      	ldr	r3, [r4, #16]
 8006dc6:	6820      	ldr	r0, [r4, #0]
 8006dc8:	b2f6      	uxtb	r6, r6
 8006dca:	1ac0      	subs	r0, r0, r3
 8006dcc:	6963      	ldr	r3, [r4, #20]
 8006dce:	4637      	mov	r7, r6
 8006dd0:	4283      	cmp	r3, r0
 8006dd2:	dc04      	bgt.n	8006dde <__swbuf_r+0x42>
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f000 f938 	bl	800704c <_fflush_r>
 8006ddc:	bb30      	cbnz	r0, 8006e2c <__swbuf_r+0x90>
 8006dde:	68a3      	ldr	r3, [r4, #8]
 8006de0:	3001      	adds	r0, #1
 8006de2:	3b01      	subs	r3, #1
 8006de4:	60a3      	str	r3, [r4, #8]
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	6022      	str	r2, [r4, #0]
 8006dec:	701e      	strb	r6, [r3, #0]
 8006dee:	6963      	ldr	r3, [r4, #20]
 8006df0:	4283      	cmp	r3, r0
 8006df2:	d004      	beq.n	8006dfe <__swbuf_r+0x62>
 8006df4:	89a3      	ldrh	r3, [r4, #12]
 8006df6:	07db      	lsls	r3, r3, #31
 8006df8:	d506      	bpl.n	8006e08 <__swbuf_r+0x6c>
 8006dfa:	2e0a      	cmp	r6, #10
 8006dfc:	d104      	bne.n	8006e08 <__swbuf_r+0x6c>
 8006dfe:	4621      	mov	r1, r4
 8006e00:	4628      	mov	r0, r5
 8006e02:	f000 f923 	bl	800704c <_fflush_r>
 8006e06:	b988      	cbnz	r0, 8006e2c <__swbuf_r+0x90>
 8006e08:	4638      	mov	r0, r7
 8006e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e0c:	4b0a      	ldr	r3, [pc, #40]	; (8006e38 <__swbuf_r+0x9c>)
 8006e0e:	429c      	cmp	r4, r3
 8006e10:	d101      	bne.n	8006e16 <__swbuf_r+0x7a>
 8006e12:	68ac      	ldr	r4, [r5, #8]
 8006e14:	e7cf      	b.n	8006db6 <__swbuf_r+0x1a>
 8006e16:	4b09      	ldr	r3, [pc, #36]	; (8006e3c <__swbuf_r+0xa0>)
 8006e18:	429c      	cmp	r4, r3
 8006e1a:	bf08      	it	eq
 8006e1c:	68ec      	ldreq	r4, [r5, #12]
 8006e1e:	e7ca      	b.n	8006db6 <__swbuf_r+0x1a>
 8006e20:	4621      	mov	r1, r4
 8006e22:	4628      	mov	r0, r5
 8006e24:	f000 f81a 	bl	8006e5c <__swsetup_r>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	d0cb      	beq.n	8006dc4 <__swbuf_r+0x28>
 8006e2c:	f04f 37ff 	mov.w	r7, #4294967295
 8006e30:	e7ea      	b.n	8006e08 <__swbuf_r+0x6c>
 8006e32:	bf00      	nop
 8006e34:	0800812c 	.word	0x0800812c
 8006e38:	0800814c 	.word	0x0800814c
 8006e3c:	0800810c 	.word	0x0800810c

08006e40 <__ascii_wctomb>:
 8006e40:	4603      	mov	r3, r0
 8006e42:	4608      	mov	r0, r1
 8006e44:	b141      	cbz	r1, 8006e58 <__ascii_wctomb+0x18>
 8006e46:	2aff      	cmp	r2, #255	; 0xff
 8006e48:	d904      	bls.n	8006e54 <__ascii_wctomb+0x14>
 8006e4a:	228a      	movs	r2, #138	; 0x8a
 8006e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	4770      	bx	lr
 8006e54:	2001      	movs	r0, #1
 8006e56:	700a      	strb	r2, [r1, #0]
 8006e58:	4770      	bx	lr
	...

08006e5c <__swsetup_r>:
 8006e5c:	4b32      	ldr	r3, [pc, #200]	; (8006f28 <__swsetup_r+0xcc>)
 8006e5e:	b570      	push	{r4, r5, r6, lr}
 8006e60:	681d      	ldr	r5, [r3, #0]
 8006e62:	4606      	mov	r6, r0
 8006e64:	460c      	mov	r4, r1
 8006e66:	b125      	cbz	r5, 8006e72 <__swsetup_r+0x16>
 8006e68:	69ab      	ldr	r3, [r5, #24]
 8006e6a:	b913      	cbnz	r3, 8006e72 <__swsetup_r+0x16>
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	f000 f981 	bl	8007174 <__sinit>
 8006e72:	4b2e      	ldr	r3, [pc, #184]	; (8006f2c <__swsetup_r+0xd0>)
 8006e74:	429c      	cmp	r4, r3
 8006e76:	d10f      	bne.n	8006e98 <__swsetup_r+0x3c>
 8006e78:	686c      	ldr	r4, [r5, #4]
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e80:	0719      	lsls	r1, r3, #28
 8006e82:	d42c      	bmi.n	8006ede <__swsetup_r+0x82>
 8006e84:	06dd      	lsls	r5, r3, #27
 8006e86:	d411      	bmi.n	8006eac <__swsetup_r+0x50>
 8006e88:	2309      	movs	r3, #9
 8006e8a:	6033      	str	r3, [r6, #0]
 8006e8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e90:	f04f 30ff 	mov.w	r0, #4294967295
 8006e94:	81a3      	strh	r3, [r4, #12]
 8006e96:	e03e      	b.n	8006f16 <__swsetup_r+0xba>
 8006e98:	4b25      	ldr	r3, [pc, #148]	; (8006f30 <__swsetup_r+0xd4>)
 8006e9a:	429c      	cmp	r4, r3
 8006e9c:	d101      	bne.n	8006ea2 <__swsetup_r+0x46>
 8006e9e:	68ac      	ldr	r4, [r5, #8]
 8006ea0:	e7eb      	b.n	8006e7a <__swsetup_r+0x1e>
 8006ea2:	4b24      	ldr	r3, [pc, #144]	; (8006f34 <__swsetup_r+0xd8>)
 8006ea4:	429c      	cmp	r4, r3
 8006ea6:	bf08      	it	eq
 8006ea8:	68ec      	ldreq	r4, [r5, #12]
 8006eaa:	e7e6      	b.n	8006e7a <__swsetup_r+0x1e>
 8006eac:	0758      	lsls	r0, r3, #29
 8006eae:	d512      	bpl.n	8006ed6 <__swsetup_r+0x7a>
 8006eb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006eb2:	b141      	cbz	r1, 8006ec6 <__swsetup_r+0x6a>
 8006eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006eb8:	4299      	cmp	r1, r3
 8006eba:	d002      	beq.n	8006ec2 <__swsetup_r+0x66>
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	f7ff fb51 	bl	8006564 <_free_r>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	6363      	str	r3, [r4, #52]	; 0x34
 8006ec6:	89a3      	ldrh	r3, [r4, #12]
 8006ec8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ecc:	81a3      	strh	r3, [r4, #12]
 8006ece:	2300      	movs	r3, #0
 8006ed0:	6063      	str	r3, [r4, #4]
 8006ed2:	6923      	ldr	r3, [r4, #16]
 8006ed4:	6023      	str	r3, [r4, #0]
 8006ed6:	89a3      	ldrh	r3, [r4, #12]
 8006ed8:	f043 0308 	orr.w	r3, r3, #8
 8006edc:	81a3      	strh	r3, [r4, #12]
 8006ede:	6923      	ldr	r3, [r4, #16]
 8006ee0:	b94b      	cbnz	r3, 8006ef6 <__swsetup_r+0x9a>
 8006ee2:	89a3      	ldrh	r3, [r4, #12]
 8006ee4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eec:	d003      	beq.n	8006ef6 <__swsetup_r+0x9a>
 8006eee:	4621      	mov	r1, r4
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	f000 fa05 	bl	8007300 <__smakebuf_r>
 8006ef6:	89a0      	ldrh	r0, [r4, #12]
 8006ef8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006efc:	f010 0301 	ands.w	r3, r0, #1
 8006f00:	d00a      	beq.n	8006f18 <__swsetup_r+0xbc>
 8006f02:	2300      	movs	r3, #0
 8006f04:	60a3      	str	r3, [r4, #8]
 8006f06:	6963      	ldr	r3, [r4, #20]
 8006f08:	425b      	negs	r3, r3
 8006f0a:	61a3      	str	r3, [r4, #24]
 8006f0c:	6923      	ldr	r3, [r4, #16]
 8006f0e:	b943      	cbnz	r3, 8006f22 <__swsetup_r+0xc6>
 8006f10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f14:	d1ba      	bne.n	8006e8c <__swsetup_r+0x30>
 8006f16:	bd70      	pop	{r4, r5, r6, pc}
 8006f18:	0781      	lsls	r1, r0, #30
 8006f1a:	bf58      	it	pl
 8006f1c:	6963      	ldrpl	r3, [r4, #20]
 8006f1e:	60a3      	str	r3, [r4, #8]
 8006f20:	e7f4      	b.n	8006f0c <__swsetup_r+0xb0>
 8006f22:	2000      	movs	r0, #0
 8006f24:	e7f7      	b.n	8006f16 <__swsetup_r+0xba>
 8006f26:	bf00      	nop
 8006f28:	20000020 	.word	0x20000020
 8006f2c:	0800812c 	.word	0x0800812c
 8006f30:	0800814c 	.word	0x0800814c
 8006f34:	0800810c 	.word	0x0800810c

08006f38 <abort>:
 8006f38:	2006      	movs	r0, #6
 8006f3a:	b508      	push	{r3, lr}
 8006f3c:	f000 fa50 	bl	80073e0 <raise>
 8006f40:	2001      	movs	r0, #1
 8006f42:	f7fb f8fe 	bl	8002142 <_exit>
	...

08006f48 <__sflush_r>:
 8006f48:	898a      	ldrh	r2, [r1, #12]
 8006f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4c:	4605      	mov	r5, r0
 8006f4e:	0710      	lsls	r0, r2, #28
 8006f50:	460c      	mov	r4, r1
 8006f52:	d457      	bmi.n	8007004 <__sflush_r+0xbc>
 8006f54:	684b      	ldr	r3, [r1, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	dc04      	bgt.n	8006f64 <__sflush_r+0x1c>
 8006f5a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	dc01      	bgt.n	8006f64 <__sflush_r+0x1c>
 8006f60:	2000      	movs	r0, #0
 8006f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f66:	2e00      	cmp	r6, #0
 8006f68:	d0fa      	beq.n	8006f60 <__sflush_r+0x18>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f70:	682f      	ldr	r7, [r5, #0]
 8006f72:	602b      	str	r3, [r5, #0]
 8006f74:	d032      	beq.n	8006fdc <__sflush_r+0x94>
 8006f76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	075a      	lsls	r2, r3, #29
 8006f7c:	d505      	bpl.n	8006f8a <__sflush_r+0x42>
 8006f7e:	6863      	ldr	r3, [r4, #4]
 8006f80:	1ac0      	subs	r0, r0, r3
 8006f82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f84:	b10b      	cbz	r3, 8006f8a <__sflush_r+0x42>
 8006f86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f88:	1ac0      	subs	r0, r0, r3
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f90:	4628      	mov	r0, r5
 8006f92:	6a21      	ldr	r1, [r4, #32]
 8006f94:	47b0      	blx	r6
 8006f96:	1c43      	adds	r3, r0, #1
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	d106      	bne.n	8006faa <__sflush_r+0x62>
 8006f9c:	6829      	ldr	r1, [r5, #0]
 8006f9e:	291d      	cmp	r1, #29
 8006fa0:	d82c      	bhi.n	8006ffc <__sflush_r+0xb4>
 8006fa2:	4a29      	ldr	r2, [pc, #164]	; (8007048 <__sflush_r+0x100>)
 8006fa4:	40ca      	lsrs	r2, r1
 8006fa6:	07d6      	lsls	r6, r2, #31
 8006fa8:	d528      	bpl.n	8006ffc <__sflush_r+0xb4>
 8006faa:	2200      	movs	r2, #0
 8006fac:	6062      	str	r2, [r4, #4]
 8006fae:	6922      	ldr	r2, [r4, #16]
 8006fb0:	04d9      	lsls	r1, r3, #19
 8006fb2:	6022      	str	r2, [r4, #0]
 8006fb4:	d504      	bpl.n	8006fc0 <__sflush_r+0x78>
 8006fb6:	1c42      	adds	r2, r0, #1
 8006fb8:	d101      	bne.n	8006fbe <__sflush_r+0x76>
 8006fba:	682b      	ldr	r3, [r5, #0]
 8006fbc:	b903      	cbnz	r3, 8006fc0 <__sflush_r+0x78>
 8006fbe:	6560      	str	r0, [r4, #84]	; 0x54
 8006fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fc2:	602f      	str	r7, [r5, #0]
 8006fc4:	2900      	cmp	r1, #0
 8006fc6:	d0cb      	beq.n	8006f60 <__sflush_r+0x18>
 8006fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fcc:	4299      	cmp	r1, r3
 8006fce:	d002      	beq.n	8006fd6 <__sflush_r+0x8e>
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	f7ff fac7 	bl	8006564 <_free_r>
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	6360      	str	r0, [r4, #52]	; 0x34
 8006fda:	e7c2      	b.n	8006f62 <__sflush_r+0x1a>
 8006fdc:	6a21      	ldr	r1, [r4, #32]
 8006fde:	2301      	movs	r3, #1
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	47b0      	blx	r6
 8006fe4:	1c41      	adds	r1, r0, #1
 8006fe6:	d1c7      	bne.n	8006f78 <__sflush_r+0x30>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0c4      	beq.n	8006f78 <__sflush_r+0x30>
 8006fee:	2b1d      	cmp	r3, #29
 8006ff0:	d001      	beq.n	8006ff6 <__sflush_r+0xae>
 8006ff2:	2b16      	cmp	r3, #22
 8006ff4:	d101      	bne.n	8006ffa <__sflush_r+0xb2>
 8006ff6:	602f      	str	r7, [r5, #0]
 8006ff8:	e7b2      	b.n	8006f60 <__sflush_r+0x18>
 8006ffa:	89a3      	ldrh	r3, [r4, #12]
 8006ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007000:	81a3      	strh	r3, [r4, #12]
 8007002:	e7ae      	b.n	8006f62 <__sflush_r+0x1a>
 8007004:	690f      	ldr	r7, [r1, #16]
 8007006:	2f00      	cmp	r7, #0
 8007008:	d0aa      	beq.n	8006f60 <__sflush_r+0x18>
 800700a:	0793      	lsls	r3, r2, #30
 800700c:	bf18      	it	ne
 800700e:	2300      	movne	r3, #0
 8007010:	680e      	ldr	r6, [r1, #0]
 8007012:	bf08      	it	eq
 8007014:	694b      	ldreq	r3, [r1, #20]
 8007016:	1bf6      	subs	r6, r6, r7
 8007018:	600f      	str	r7, [r1, #0]
 800701a:	608b      	str	r3, [r1, #8]
 800701c:	2e00      	cmp	r6, #0
 800701e:	dd9f      	ble.n	8006f60 <__sflush_r+0x18>
 8007020:	4633      	mov	r3, r6
 8007022:	463a      	mov	r2, r7
 8007024:	4628      	mov	r0, r5
 8007026:	6a21      	ldr	r1, [r4, #32]
 8007028:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800702c:	47e0      	blx	ip
 800702e:	2800      	cmp	r0, #0
 8007030:	dc06      	bgt.n	8007040 <__sflush_r+0xf8>
 8007032:	89a3      	ldrh	r3, [r4, #12]
 8007034:	f04f 30ff 	mov.w	r0, #4294967295
 8007038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800703c:	81a3      	strh	r3, [r4, #12]
 800703e:	e790      	b.n	8006f62 <__sflush_r+0x1a>
 8007040:	4407      	add	r7, r0
 8007042:	1a36      	subs	r6, r6, r0
 8007044:	e7ea      	b.n	800701c <__sflush_r+0xd4>
 8007046:	bf00      	nop
 8007048:	20400001 	.word	0x20400001

0800704c <_fflush_r>:
 800704c:	b538      	push	{r3, r4, r5, lr}
 800704e:	690b      	ldr	r3, [r1, #16]
 8007050:	4605      	mov	r5, r0
 8007052:	460c      	mov	r4, r1
 8007054:	b913      	cbnz	r3, 800705c <_fflush_r+0x10>
 8007056:	2500      	movs	r5, #0
 8007058:	4628      	mov	r0, r5
 800705a:	bd38      	pop	{r3, r4, r5, pc}
 800705c:	b118      	cbz	r0, 8007066 <_fflush_r+0x1a>
 800705e:	6983      	ldr	r3, [r0, #24]
 8007060:	b90b      	cbnz	r3, 8007066 <_fflush_r+0x1a>
 8007062:	f000 f887 	bl	8007174 <__sinit>
 8007066:	4b14      	ldr	r3, [pc, #80]	; (80070b8 <_fflush_r+0x6c>)
 8007068:	429c      	cmp	r4, r3
 800706a:	d11b      	bne.n	80070a4 <_fflush_r+0x58>
 800706c:	686c      	ldr	r4, [r5, #4]
 800706e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d0ef      	beq.n	8007056 <_fflush_r+0xa>
 8007076:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007078:	07d0      	lsls	r0, r2, #31
 800707a:	d404      	bmi.n	8007086 <_fflush_r+0x3a>
 800707c:	0599      	lsls	r1, r3, #22
 800707e:	d402      	bmi.n	8007086 <_fflush_r+0x3a>
 8007080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007082:	f000 f915 	bl	80072b0 <__retarget_lock_acquire_recursive>
 8007086:	4628      	mov	r0, r5
 8007088:	4621      	mov	r1, r4
 800708a:	f7ff ff5d 	bl	8006f48 <__sflush_r>
 800708e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007090:	4605      	mov	r5, r0
 8007092:	07da      	lsls	r2, r3, #31
 8007094:	d4e0      	bmi.n	8007058 <_fflush_r+0xc>
 8007096:	89a3      	ldrh	r3, [r4, #12]
 8007098:	059b      	lsls	r3, r3, #22
 800709a:	d4dd      	bmi.n	8007058 <_fflush_r+0xc>
 800709c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800709e:	f000 f908 	bl	80072b2 <__retarget_lock_release_recursive>
 80070a2:	e7d9      	b.n	8007058 <_fflush_r+0xc>
 80070a4:	4b05      	ldr	r3, [pc, #20]	; (80070bc <_fflush_r+0x70>)
 80070a6:	429c      	cmp	r4, r3
 80070a8:	d101      	bne.n	80070ae <_fflush_r+0x62>
 80070aa:	68ac      	ldr	r4, [r5, #8]
 80070ac:	e7df      	b.n	800706e <_fflush_r+0x22>
 80070ae:	4b04      	ldr	r3, [pc, #16]	; (80070c0 <_fflush_r+0x74>)
 80070b0:	429c      	cmp	r4, r3
 80070b2:	bf08      	it	eq
 80070b4:	68ec      	ldreq	r4, [r5, #12]
 80070b6:	e7da      	b.n	800706e <_fflush_r+0x22>
 80070b8:	0800812c 	.word	0x0800812c
 80070bc:	0800814c 	.word	0x0800814c
 80070c0:	0800810c 	.word	0x0800810c

080070c4 <std>:
 80070c4:	2300      	movs	r3, #0
 80070c6:	b510      	push	{r4, lr}
 80070c8:	4604      	mov	r4, r0
 80070ca:	e9c0 3300 	strd	r3, r3, [r0]
 80070ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070d2:	6083      	str	r3, [r0, #8]
 80070d4:	8181      	strh	r1, [r0, #12]
 80070d6:	6643      	str	r3, [r0, #100]	; 0x64
 80070d8:	81c2      	strh	r2, [r0, #14]
 80070da:	6183      	str	r3, [r0, #24]
 80070dc:	4619      	mov	r1, r3
 80070de:	2208      	movs	r2, #8
 80070e0:	305c      	adds	r0, #92	; 0x5c
 80070e2:	f7fd fb8d 	bl	8004800 <memset>
 80070e6:	4b05      	ldr	r3, [pc, #20]	; (80070fc <std+0x38>)
 80070e8:	6224      	str	r4, [r4, #32]
 80070ea:	6263      	str	r3, [r4, #36]	; 0x24
 80070ec:	4b04      	ldr	r3, [pc, #16]	; (8007100 <std+0x3c>)
 80070ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80070f0:	4b04      	ldr	r3, [pc, #16]	; (8007104 <std+0x40>)
 80070f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070f4:	4b04      	ldr	r3, [pc, #16]	; (8007108 <std+0x44>)
 80070f6:	6323      	str	r3, [r4, #48]	; 0x30
 80070f8:	bd10      	pop	{r4, pc}
 80070fa:	bf00      	nop
 80070fc:	08007419 	.word	0x08007419
 8007100:	0800743b 	.word	0x0800743b
 8007104:	08007473 	.word	0x08007473
 8007108:	08007497 	.word	0x08007497

0800710c <_cleanup_r>:
 800710c:	4901      	ldr	r1, [pc, #4]	; (8007114 <_cleanup_r+0x8>)
 800710e:	f000 b8af 	b.w	8007270 <_fwalk_reent>
 8007112:	bf00      	nop
 8007114:	0800704d 	.word	0x0800704d

08007118 <__sfmoreglue>:
 8007118:	2268      	movs	r2, #104	; 0x68
 800711a:	b570      	push	{r4, r5, r6, lr}
 800711c:	1e4d      	subs	r5, r1, #1
 800711e:	4355      	muls	r5, r2
 8007120:	460e      	mov	r6, r1
 8007122:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007126:	f7ff fa85 	bl	8006634 <_malloc_r>
 800712a:	4604      	mov	r4, r0
 800712c:	b140      	cbz	r0, 8007140 <__sfmoreglue+0x28>
 800712e:	2100      	movs	r1, #0
 8007130:	e9c0 1600 	strd	r1, r6, [r0]
 8007134:	300c      	adds	r0, #12
 8007136:	60a0      	str	r0, [r4, #8]
 8007138:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800713c:	f7fd fb60 	bl	8004800 <memset>
 8007140:	4620      	mov	r0, r4
 8007142:	bd70      	pop	{r4, r5, r6, pc}

08007144 <__sfp_lock_acquire>:
 8007144:	4801      	ldr	r0, [pc, #4]	; (800714c <__sfp_lock_acquire+0x8>)
 8007146:	f000 b8b3 	b.w	80072b0 <__retarget_lock_acquire_recursive>
 800714a:	bf00      	nop
 800714c:	20000525 	.word	0x20000525

08007150 <__sfp_lock_release>:
 8007150:	4801      	ldr	r0, [pc, #4]	; (8007158 <__sfp_lock_release+0x8>)
 8007152:	f000 b8ae 	b.w	80072b2 <__retarget_lock_release_recursive>
 8007156:	bf00      	nop
 8007158:	20000525 	.word	0x20000525

0800715c <__sinit_lock_acquire>:
 800715c:	4801      	ldr	r0, [pc, #4]	; (8007164 <__sinit_lock_acquire+0x8>)
 800715e:	f000 b8a7 	b.w	80072b0 <__retarget_lock_acquire_recursive>
 8007162:	bf00      	nop
 8007164:	20000526 	.word	0x20000526

08007168 <__sinit_lock_release>:
 8007168:	4801      	ldr	r0, [pc, #4]	; (8007170 <__sinit_lock_release+0x8>)
 800716a:	f000 b8a2 	b.w	80072b2 <__retarget_lock_release_recursive>
 800716e:	bf00      	nop
 8007170:	20000526 	.word	0x20000526

08007174 <__sinit>:
 8007174:	b510      	push	{r4, lr}
 8007176:	4604      	mov	r4, r0
 8007178:	f7ff fff0 	bl	800715c <__sinit_lock_acquire>
 800717c:	69a3      	ldr	r3, [r4, #24]
 800717e:	b11b      	cbz	r3, 8007188 <__sinit+0x14>
 8007180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007184:	f7ff bff0 	b.w	8007168 <__sinit_lock_release>
 8007188:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800718c:	6523      	str	r3, [r4, #80]	; 0x50
 800718e:	4b13      	ldr	r3, [pc, #76]	; (80071dc <__sinit+0x68>)
 8007190:	4a13      	ldr	r2, [pc, #76]	; (80071e0 <__sinit+0x6c>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	62a2      	str	r2, [r4, #40]	; 0x28
 8007196:	42a3      	cmp	r3, r4
 8007198:	bf08      	it	eq
 800719a:	2301      	moveq	r3, #1
 800719c:	4620      	mov	r0, r4
 800719e:	bf08      	it	eq
 80071a0:	61a3      	streq	r3, [r4, #24]
 80071a2:	f000 f81f 	bl	80071e4 <__sfp>
 80071a6:	6060      	str	r0, [r4, #4]
 80071a8:	4620      	mov	r0, r4
 80071aa:	f000 f81b 	bl	80071e4 <__sfp>
 80071ae:	60a0      	str	r0, [r4, #8]
 80071b0:	4620      	mov	r0, r4
 80071b2:	f000 f817 	bl	80071e4 <__sfp>
 80071b6:	2200      	movs	r2, #0
 80071b8:	2104      	movs	r1, #4
 80071ba:	60e0      	str	r0, [r4, #12]
 80071bc:	6860      	ldr	r0, [r4, #4]
 80071be:	f7ff ff81 	bl	80070c4 <std>
 80071c2:	2201      	movs	r2, #1
 80071c4:	2109      	movs	r1, #9
 80071c6:	68a0      	ldr	r0, [r4, #8]
 80071c8:	f7ff ff7c 	bl	80070c4 <std>
 80071cc:	2202      	movs	r2, #2
 80071ce:	2112      	movs	r1, #18
 80071d0:	68e0      	ldr	r0, [r4, #12]
 80071d2:	f7ff ff77 	bl	80070c4 <std>
 80071d6:	2301      	movs	r3, #1
 80071d8:	61a3      	str	r3, [r4, #24]
 80071da:	e7d1      	b.n	8007180 <__sinit+0xc>
 80071dc:	08007d94 	.word	0x08007d94
 80071e0:	0800710d 	.word	0x0800710d

080071e4 <__sfp>:
 80071e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e6:	4607      	mov	r7, r0
 80071e8:	f7ff ffac 	bl	8007144 <__sfp_lock_acquire>
 80071ec:	4b1e      	ldr	r3, [pc, #120]	; (8007268 <__sfp+0x84>)
 80071ee:	681e      	ldr	r6, [r3, #0]
 80071f0:	69b3      	ldr	r3, [r6, #24]
 80071f2:	b913      	cbnz	r3, 80071fa <__sfp+0x16>
 80071f4:	4630      	mov	r0, r6
 80071f6:	f7ff ffbd 	bl	8007174 <__sinit>
 80071fa:	3648      	adds	r6, #72	; 0x48
 80071fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007200:	3b01      	subs	r3, #1
 8007202:	d503      	bpl.n	800720c <__sfp+0x28>
 8007204:	6833      	ldr	r3, [r6, #0]
 8007206:	b30b      	cbz	r3, 800724c <__sfp+0x68>
 8007208:	6836      	ldr	r6, [r6, #0]
 800720a:	e7f7      	b.n	80071fc <__sfp+0x18>
 800720c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007210:	b9d5      	cbnz	r5, 8007248 <__sfp+0x64>
 8007212:	4b16      	ldr	r3, [pc, #88]	; (800726c <__sfp+0x88>)
 8007214:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007218:	60e3      	str	r3, [r4, #12]
 800721a:	6665      	str	r5, [r4, #100]	; 0x64
 800721c:	f000 f847 	bl	80072ae <__retarget_lock_init_recursive>
 8007220:	f7ff ff96 	bl	8007150 <__sfp_lock_release>
 8007224:	2208      	movs	r2, #8
 8007226:	4629      	mov	r1, r5
 8007228:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800722c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007230:	6025      	str	r5, [r4, #0]
 8007232:	61a5      	str	r5, [r4, #24]
 8007234:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007238:	f7fd fae2 	bl	8004800 <memset>
 800723c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007240:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007244:	4620      	mov	r0, r4
 8007246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007248:	3468      	adds	r4, #104	; 0x68
 800724a:	e7d9      	b.n	8007200 <__sfp+0x1c>
 800724c:	2104      	movs	r1, #4
 800724e:	4638      	mov	r0, r7
 8007250:	f7ff ff62 	bl	8007118 <__sfmoreglue>
 8007254:	4604      	mov	r4, r0
 8007256:	6030      	str	r0, [r6, #0]
 8007258:	2800      	cmp	r0, #0
 800725a:	d1d5      	bne.n	8007208 <__sfp+0x24>
 800725c:	f7ff ff78 	bl	8007150 <__sfp_lock_release>
 8007260:	230c      	movs	r3, #12
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	e7ee      	b.n	8007244 <__sfp+0x60>
 8007266:	bf00      	nop
 8007268:	08007d94 	.word	0x08007d94
 800726c:	ffff0001 	.word	0xffff0001

08007270 <_fwalk_reent>:
 8007270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007274:	4606      	mov	r6, r0
 8007276:	4688      	mov	r8, r1
 8007278:	2700      	movs	r7, #0
 800727a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800727e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007282:	f1b9 0901 	subs.w	r9, r9, #1
 8007286:	d505      	bpl.n	8007294 <_fwalk_reent+0x24>
 8007288:	6824      	ldr	r4, [r4, #0]
 800728a:	2c00      	cmp	r4, #0
 800728c:	d1f7      	bne.n	800727e <_fwalk_reent+0xe>
 800728e:	4638      	mov	r0, r7
 8007290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007294:	89ab      	ldrh	r3, [r5, #12]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d907      	bls.n	80072aa <_fwalk_reent+0x3a>
 800729a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800729e:	3301      	adds	r3, #1
 80072a0:	d003      	beq.n	80072aa <_fwalk_reent+0x3a>
 80072a2:	4629      	mov	r1, r5
 80072a4:	4630      	mov	r0, r6
 80072a6:	47c0      	blx	r8
 80072a8:	4307      	orrs	r7, r0
 80072aa:	3568      	adds	r5, #104	; 0x68
 80072ac:	e7e9      	b.n	8007282 <_fwalk_reent+0x12>

080072ae <__retarget_lock_init_recursive>:
 80072ae:	4770      	bx	lr

080072b0 <__retarget_lock_acquire_recursive>:
 80072b0:	4770      	bx	lr

080072b2 <__retarget_lock_release_recursive>:
 80072b2:	4770      	bx	lr

080072b4 <__swhatbuf_r>:
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	460e      	mov	r6, r1
 80072b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072bc:	4614      	mov	r4, r2
 80072be:	2900      	cmp	r1, #0
 80072c0:	461d      	mov	r5, r3
 80072c2:	b096      	sub	sp, #88	; 0x58
 80072c4:	da08      	bge.n	80072d8 <__swhatbuf_r+0x24>
 80072c6:	2200      	movs	r2, #0
 80072c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80072cc:	602a      	str	r2, [r5, #0]
 80072ce:	061a      	lsls	r2, r3, #24
 80072d0:	d410      	bmi.n	80072f4 <__swhatbuf_r+0x40>
 80072d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072d6:	e00e      	b.n	80072f6 <__swhatbuf_r+0x42>
 80072d8:	466a      	mov	r2, sp
 80072da:	f000 f903 	bl	80074e4 <_fstat_r>
 80072de:	2800      	cmp	r0, #0
 80072e0:	dbf1      	blt.n	80072c6 <__swhatbuf_r+0x12>
 80072e2:	9a01      	ldr	r2, [sp, #4]
 80072e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80072e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80072ec:	425a      	negs	r2, r3
 80072ee:	415a      	adcs	r2, r3
 80072f0:	602a      	str	r2, [r5, #0]
 80072f2:	e7ee      	b.n	80072d2 <__swhatbuf_r+0x1e>
 80072f4:	2340      	movs	r3, #64	; 0x40
 80072f6:	2000      	movs	r0, #0
 80072f8:	6023      	str	r3, [r4, #0]
 80072fa:	b016      	add	sp, #88	; 0x58
 80072fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007300 <__smakebuf_r>:
 8007300:	898b      	ldrh	r3, [r1, #12]
 8007302:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007304:	079d      	lsls	r5, r3, #30
 8007306:	4606      	mov	r6, r0
 8007308:	460c      	mov	r4, r1
 800730a:	d507      	bpl.n	800731c <__smakebuf_r+0x1c>
 800730c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	6123      	str	r3, [r4, #16]
 8007314:	2301      	movs	r3, #1
 8007316:	6163      	str	r3, [r4, #20]
 8007318:	b002      	add	sp, #8
 800731a:	bd70      	pop	{r4, r5, r6, pc}
 800731c:	466a      	mov	r2, sp
 800731e:	ab01      	add	r3, sp, #4
 8007320:	f7ff ffc8 	bl	80072b4 <__swhatbuf_r>
 8007324:	9900      	ldr	r1, [sp, #0]
 8007326:	4605      	mov	r5, r0
 8007328:	4630      	mov	r0, r6
 800732a:	f7ff f983 	bl	8006634 <_malloc_r>
 800732e:	b948      	cbnz	r0, 8007344 <__smakebuf_r+0x44>
 8007330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007334:	059a      	lsls	r2, r3, #22
 8007336:	d4ef      	bmi.n	8007318 <__smakebuf_r+0x18>
 8007338:	f023 0303 	bic.w	r3, r3, #3
 800733c:	f043 0302 	orr.w	r3, r3, #2
 8007340:	81a3      	strh	r3, [r4, #12]
 8007342:	e7e3      	b.n	800730c <__smakebuf_r+0xc>
 8007344:	4b0d      	ldr	r3, [pc, #52]	; (800737c <__smakebuf_r+0x7c>)
 8007346:	62b3      	str	r3, [r6, #40]	; 0x28
 8007348:	89a3      	ldrh	r3, [r4, #12]
 800734a:	6020      	str	r0, [r4, #0]
 800734c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007350:	81a3      	strh	r3, [r4, #12]
 8007352:	9b00      	ldr	r3, [sp, #0]
 8007354:	6120      	str	r0, [r4, #16]
 8007356:	6163      	str	r3, [r4, #20]
 8007358:	9b01      	ldr	r3, [sp, #4]
 800735a:	b15b      	cbz	r3, 8007374 <__smakebuf_r+0x74>
 800735c:	4630      	mov	r0, r6
 800735e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007362:	f000 f8d1 	bl	8007508 <_isatty_r>
 8007366:	b128      	cbz	r0, 8007374 <__smakebuf_r+0x74>
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	f023 0303 	bic.w	r3, r3, #3
 800736e:	f043 0301 	orr.w	r3, r3, #1
 8007372:	81a3      	strh	r3, [r4, #12]
 8007374:	89a0      	ldrh	r0, [r4, #12]
 8007376:	4305      	orrs	r5, r0
 8007378:	81a5      	strh	r5, [r4, #12]
 800737a:	e7cd      	b.n	8007318 <__smakebuf_r+0x18>
 800737c:	0800710d 	.word	0x0800710d

08007380 <_malloc_usable_size_r>:
 8007380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007384:	1f18      	subs	r0, r3, #4
 8007386:	2b00      	cmp	r3, #0
 8007388:	bfbc      	itt	lt
 800738a:	580b      	ldrlt	r3, [r1, r0]
 800738c:	18c0      	addlt	r0, r0, r3
 800738e:	4770      	bx	lr

08007390 <_raise_r>:
 8007390:	291f      	cmp	r1, #31
 8007392:	b538      	push	{r3, r4, r5, lr}
 8007394:	4604      	mov	r4, r0
 8007396:	460d      	mov	r5, r1
 8007398:	d904      	bls.n	80073a4 <_raise_r+0x14>
 800739a:	2316      	movs	r3, #22
 800739c:	6003      	str	r3, [r0, #0]
 800739e:	f04f 30ff 	mov.w	r0, #4294967295
 80073a2:	bd38      	pop	{r3, r4, r5, pc}
 80073a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80073a6:	b112      	cbz	r2, 80073ae <_raise_r+0x1e>
 80073a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073ac:	b94b      	cbnz	r3, 80073c2 <_raise_r+0x32>
 80073ae:	4620      	mov	r0, r4
 80073b0:	f000 f830 	bl	8007414 <_getpid_r>
 80073b4:	462a      	mov	r2, r5
 80073b6:	4601      	mov	r1, r0
 80073b8:	4620      	mov	r0, r4
 80073ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073be:	f000 b817 	b.w	80073f0 <_kill_r>
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d00a      	beq.n	80073dc <_raise_r+0x4c>
 80073c6:	1c59      	adds	r1, r3, #1
 80073c8:	d103      	bne.n	80073d2 <_raise_r+0x42>
 80073ca:	2316      	movs	r3, #22
 80073cc:	6003      	str	r3, [r0, #0]
 80073ce:	2001      	movs	r0, #1
 80073d0:	e7e7      	b.n	80073a2 <_raise_r+0x12>
 80073d2:	2400      	movs	r4, #0
 80073d4:	4628      	mov	r0, r5
 80073d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80073da:	4798      	blx	r3
 80073dc:	2000      	movs	r0, #0
 80073de:	e7e0      	b.n	80073a2 <_raise_r+0x12>

080073e0 <raise>:
 80073e0:	4b02      	ldr	r3, [pc, #8]	; (80073ec <raise+0xc>)
 80073e2:	4601      	mov	r1, r0
 80073e4:	6818      	ldr	r0, [r3, #0]
 80073e6:	f7ff bfd3 	b.w	8007390 <_raise_r>
 80073ea:	bf00      	nop
 80073ec:	20000020 	.word	0x20000020

080073f0 <_kill_r>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	2300      	movs	r3, #0
 80073f4:	4d06      	ldr	r5, [pc, #24]	; (8007410 <_kill_r+0x20>)
 80073f6:	4604      	mov	r4, r0
 80073f8:	4608      	mov	r0, r1
 80073fa:	4611      	mov	r1, r2
 80073fc:	602b      	str	r3, [r5, #0]
 80073fe:	f7fa fe90 	bl	8002122 <_kill>
 8007402:	1c43      	adds	r3, r0, #1
 8007404:	d102      	bne.n	800740c <_kill_r+0x1c>
 8007406:	682b      	ldr	r3, [r5, #0]
 8007408:	b103      	cbz	r3, 800740c <_kill_r+0x1c>
 800740a:	6023      	str	r3, [r4, #0]
 800740c:	bd38      	pop	{r3, r4, r5, pc}
 800740e:	bf00      	nop
 8007410:	20000520 	.word	0x20000520

08007414 <_getpid_r>:
 8007414:	f7fa be7e 	b.w	8002114 <_getpid>

08007418 <__sread>:
 8007418:	b510      	push	{r4, lr}
 800741a:	460c      	mov	r4, r1
 800741c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007420:	f000 f894 	bl	800754c <_read_r>
 8007424:	2800      	cmp	r0, #0
 8007426:	bfab      	itete	ge
 8007428:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800742a:	89a3      	ldrhlt	r3, [r4, #12]
 800742c:	181b      	addge	r3, r3, r0
 800742e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007432:	bfac      	ite	ge
 8007434:	6563      	strge	r3, [r4, #84]	; 0x54
 8007436:	81a3      	strhlt	r3, [r4, #12]
 8007438:	bd10      	pop	{r4, pc}

0800743a <__swrite>:
 800743a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800743e:	461f      	mov	r7, r3
 8007440:	898b      	ldrh	r3, [r1, #12]
 8007442:	4605      	mov	r5, r0
 8007444:	05db      	lsls	r3, r3, #23
 8007446:	460c      	mov	r4, r1
 8007448:	4616      	mov	r6, r2
 800744a:	d505      	bpl.n	8007458 <__swrite+0x1e>
 800744c:	2302      	movs	r3, #2
 800744e:	2200      	movs	r2, #0
 8007450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007454:	f000 f868 	bl	8007528 <_lseek_r>
 8007458:	89a3      	ldrh	r3, [r4, #12]
 800745a:	4632      	mov	r2, r6
 800745c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007460:	81a3      	strh	r3, [r4, #12]
 8007462:	4628      	mov	r0, r5
 8007464:	463b      	mov	r3, r7
 8007466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800746a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800746e:	f000 b817 	b.w	80074a0 <_write_r>

08007472 <__sseek>:
 8007472:	b510      	push	{r4, lr}
 8007474:	460c      	mov	r4, r1
 8007476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800747a:	f000 f855 	bl	8007528 <_lseek_r>
 800747e:	1c43      	adds	r3, r0, #1
 8007480:	89a3      	ldrh	r3, [r4, #12]
 8007482:	bf15      	itete	ne
 8007484:	6560      	strne	r0, [r4, #84]	; 0x54
 8007486:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800748a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800748e:	81a3      	strheq	r3, [r4, #12]
 8007490:	bf18      	it	ne
 8007492:	81a3      	strhne	r3, [r4, #12]
 8007494:	bd10      	pop	{r4, pc}

08007496 <__sclose>:
 8007496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800749a:	f000 b813 	b.w	80074c4 <_close_r>
	...

080074a0 <_write_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	4604      	mov	r4, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	4611      	mov	r1, r2
 80074a8:	2200      	movs	r2, #0
 80074aa:	4d05      	ldr	r5, [pc, #20]	; (80074c0 <_write_r+0x20>)
 80074ac:	602a      	str	r2, [r5, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	f7fa fe6e 	bl	8002190 <_write>
 80074b4:	1c43      	adds	r3, r0, #1
 80074b6:	d102      	bne.n	80074be <_write_r+0x1e>
 80074b8:	682b      	ldr	r3, [r5, #0]
 80074ba:	b103      	cbz	r3, 80074be <_write_r+0x1e>
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	bd38      	pop	{r3, r4, r5, pc}
 80074c0:	20000520 	.word	0x20000520

080074c4 <_close_r>:
 80074c4:	b538      	push	{r3, r4, r5, lr}
 80074c6:	2300      	movs	r3, #0
 80074c8:	4d05      	ldr	r5, [pc, #20]	; (80074e0 <_close_r+0x1c>)
 80074ca:	4604      	mov	r4, r0
 80074cc:	4608      	mov	r0, r1
 80074ce:	602b      	str	r3, [r5, #0]
 80074d0:	f7fa fe7a 	bl	80021c8 <_close>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d102      	bne.n	80074de <_close_r+0x1a>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	b103      	cbz	r3, 80074de <_close_r+0x1a>
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	bd38      	pop	{r3, r4, r5, pc}
 80074e0:	20000520 	.word	0x20000520

080074e4 <_fstat_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	2300      	movs	r3, #0
 80074e8:	4d06      	ldr	r5, [pc, #24]	; (8007504 <_fstat_r+0x20>)
 80074ea:	4604      	mov	r4, r0
 80074ec:	4608      	mov	r0, r1
 80074ee:	4611      	mov	r1, r2
 80074f0:	602b      	str	r3, [r5, #0]
 80074f2:	f7fa fe74 	bl	80021de <_fstat>
 80074f6:	1c43      	adds	r3, r0, #1
 80074f8:	d102      	bne.n	8007500 <_fstat_r+0x1c>
 80074fa:	682b      	ldr	r3, [r5, #0]
 80074fc:	b103      	cbz	r3, 8007500 <_fstat_r+0x1c>
 80074fe:	6023      	str	r3, [r4, #0]
 8007500:	bd38      	pop	{r3, r4, r5, pc}
 8007502:	bf00      	nop
 8007504:	20000520 	.word	0x20000520

08007508 <_isatty_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	2300      	movs	r3, #0
 800750c:	4d05      	ldr	r5, [pc, #20]	; (8007524 <_isatty_r+0x1c>)
 800750e:	4604      	mov	r4, r0
 8007510:	4608      	mov	r0, r1
 8007512:	602b      	str	r3, [r5, #0]
 8007514:	f7fa fe72 	bl	80021fc <_isatty>
 8007518:	1c43      	adds	r3, r0, #1
 800751a:	d102      	bne.n	8007522 <_isatty_r+0x1a>
 800751c:	682b      	ldr	r3, [r5, #0]
 800751e:	b103      	cbz	r3, 8007522 <_isatty_r+0x1a>
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	bd38      	pop	{r3, r4, r5, pc}
 8007524:	20000520 	.word	0x20000520

08007528 <_lseek_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4604      	mov	r4, r0
 800752c:	4608      	mov	r0, r1
 800752e:	4611      	mov	r1, r2
 8007530:	2200      	movs	r2, #0
 8007532:	4d05      	ldr	r5, [pc, #20]	; (8007548 <_lseek_r+0x20>)
 8007534:	602a      	str	r2, [r5, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	f7fa fe6a 	bl	8002210 <_lseek>
 800753c:	1c43      	adds	r3, r0, #1
 800753e:	d102      	bne.n	8007546 <_lseek_r+0x1e>
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	b103      	cbz	r3, 8007546 <_lseek_r+0x1e>
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	bd38      	pop	{r3, r4, r5, pc}
 8007548:	20000520 	.word	0x20000520

0800754c <_read_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	4604      	mov	r4, r0
 8007550:	4608      	mov	r0, r1
 8007552:	4611      	mov	r1, r2
 8007554:	2200      	movs	r2, #0
 8007556:	4d05      	ldr	r5, [pc, #20]	; (800756c <_read_r+0x20>)
 8007558:	602a      	str	r2, [r5, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	f7fa fdfb 	bl	8002156 <_read>
 8007560:	1c43      	adds	r3, r0, #1
 8007562:	d102      	bne.n	800756a <_read_r+0x1e>
 8007564:	682b      	ldr	r3, [r5, #0]
 8007566:	b103      	cbz	r3, 800756a <_read_r+0x1e>
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	bd38      	pop	{r3, r4, r5, pc}
 800756c:	20000520 	.word	0x20000520

08007570 <_init>:
 8007570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007572:	bf00      	nop
 8007574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007576:	bc08      	pop	{r3}
 8007578:	469e      	mov	lr, r3
 800757a:	4770      	bx	lr

0800757c <_fini>:
 800757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757e:	bf00      	nop
 8007580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007582:	bc08      	pop	{r3}
 8007584:	469e      	mov	lr, r3
 8007586:	4770      	bx	lr
